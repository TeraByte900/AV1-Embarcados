
SAME70_FONTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000565c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20400000  0040565c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000048c  2040043c  00405a98  0002043c  2**2
                  ALLOC
  3 .stack        00002000  204008c8  00405f24  0002043c  2**0
                  ALLOC
  4 .heap         00000200  204028c8  00407f24  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00013cc4  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002334  00000000  00000000  00034187  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000557a  00000000  00000000  000364bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000988  00000000  00000000  0003ba35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000930  00000000  00000000  0003c3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000747b  00000000  00000000  0003cced  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a954  00000000  00000000  00044168  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093c50  00000000  00000000  0004eabc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000296c  00000000  00000000  000e270c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 28 40 20 c9 2d 40 00 79 2e 40 00 79 2e 40 00     .(@ .-@.y.@.y.@.
  400010:	79 2e 40 00 79 2e 40 00 79 2e 40 00 00 00 00 00     y.@.y.@.y.@.....
	...
  40002c:	79 2e 40 00 79 2e 40 00 00 00 00 00 79 2e 40 00     y.@.y.@.....y.@.
  40003c:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  40004c:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  40005c:	79 2e 40 00 79 2e 40 00 00 00 00 00 81 25 40 00     y.@.y.@......%@.
  40006c:	99 25 40 00 b1 25 40 00 79 2e 40 00 79 2e 40 00     .%@..%@.y.@.y.@.
  40007c:	79 2e 40 00 c9 25 40 00 e1 25 40 00 79 2e 40 00     y.@..%@..%@.y.@.
  40008c:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  40009c:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  4000ac:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  4000bc:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  4000cc:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  4000dc:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  4000ec:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  4000fc:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  40010c:	79 2e 40 00 79 2e 40 00 00 00 00 00 00 00 00 00     y.@.y.@.........
  40011c:	00 00 00 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     ....y.@.y.@.y.@.
  40012c:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  40013c:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  40014c:	79 2e 40 00 79 2e 40 00 79 2e 40 00 79 2e 40 00     y.@.y.@.y.@.y.@.
  40015c:	79 2e 40 00 79 2e 40 00 79 2e 40 00                 y.@.y.@.y.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	2040043c 	.word	0x2040043c
  400184:	00000000 	.word	0x00000000
  400188:	0040565c 	.word	0x0040565c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040565c 	.word	0x0040565c
  4001c8:	20400440 	.word	0x20400440
  4001cc:	0040565c 	.word	0x0040565c
  4001d0:	00000000 	.word	0x00000000

004001d4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4001d4:	b480      	push	{r7}
  4001d6:	b083      	sub	sp, #12
  4001d8:	af00      	add	r7, sp, #0
  4001da:	4603      	mov	r3, r0
  4001dc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4001de:	4909      	ldr	r1, [pc, #36]	; (400204 <NVIC_EnableIRQ+0x30>)
  4001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4001e4:	095b      	lsrs	r3, r3, #5
  4001e6:	79fa      	ldrb	r2, [r7, #7]
  4001e8:	f002 021f 	and.w	r2, r2, #31
  4001ec:	2001      	movs	r0, #1
  4001ee:	fa00 f202 	lsl.w	r2, r0, r2
  4001f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4001f6:	bf00      	nop
  4001f8:	370c      	adds	r7, #12
  4001fa:	46bd      	mov	sp, r7
  4001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400200:	4770      	bx	lr
  400202:	bf00      	nop
  400204:	e000e100 	.word	0xe000e100

00400208 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400208:	b480      	push	{r7}
  40020a:	b083      	sub	sp, #12
  40020c:	af00      	add	r7, sp, #0
  40020e:	4603      	mov	r3, r0
  400210:	6039      	str	r1, [r7, #0]
  400212:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400214:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400218:	2b00      	cmp	r3, #0
  40021a:	da0b      	bge.n	400234 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40021c:	490d      	ldr	r1, [pc, #52]	; (400254 <NVIC_SetPriority+0x4c>)
  40021e:	79fb      	ldrb	r3, [r7, #7]
  400220:	f003 030f 	and.w	r3, r3, #15
  400224:	3b04      	subs	r3, #4
  400226:	683a      	ldr	r2, [r7, #0]
  400228:	b2d2      	uxtb	r2, r2
  40022a:	0152      	lsls	r2, r2, #5
  40022c:	b2d2      	uxtb	r2, r2
  40022e:	440b      	add	r3, r1
  400230:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  400232:	e009      	b.n	400248 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400234:	4908      	ldr	r1, [pc, #32]	; (400258 <NVIC_SetPriority+0x50>)
  400236:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40023a:	683a      	ldr	r2, [r7, #0]
  40023c:	b2d2      	uxtb	r2, r2
  40023e:	0152      	lsls	r2, r2, #5
  400240:	b2d2      	uxtb	r2, r2
  400242:	440b      	add	r3, r1
  400244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400248:	bf00      	nop
  40024a:	370c      	adds	r7, #12
  40024c:	46bd      	mov	sp, r7
  40024e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400252:	4770      	bx	lr
  400254:	e000ed00 	.word	0xe000ed00
  400258:	e000e100 	.word	0xe000e100

0040025c <configure_lcd>:
volatile int counter = 0;


struct ili9488_opt_t g_ili9488_display_opt;

void configure_lcd(void){
  40025c:	b598      	push	{r3, r4, r7, lr}
  40025e:	af00      	add	r7, sp, #0
	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  400260:	4b0d      	ldr	r3, [pc, #52]	; (400298 <configure_lcd+0x3c>)
  400262:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400266:	601a      	str	r2, [r3, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  400268:	4b0b      	ldr	r3, [pc, #44]	; (400298 <configure_lcd+0x3c>)
  40026a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  40026e:	605a      	str	r2, [r3, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  400270:	4b09      	ldr	r3, [pc, #36]	; (400298 <configure_lcd+0x3c>)
  400272:	4a0a      	ldr	r2, [pc, #40]	; (40029c <configure_lcd+0x40>)
  400274:	609a      	str	r2, [r3, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <configure_lcd+0x3c>)
  400278:	4a08      	ldr	r2, [pc, #32]	; (40029c <configure_lcd+0x40>)
  40027a:	60da      	str	r2, [r3, #12]

	/* Initialize LCD */
	ili9488_init(&g_ili9488_display_opt);
  40027c:	4806      	ldr	r0, [pc, #24]	; (400298 <configure_lcd+0x3c>)
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <configure_lcd+0x44>)
  400280:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  400282:	f240 13df 	movw	r3, #479	; 0x1df
  400286:	f240 123f 	movw	r2, #319	; 0x13f
  40028a:	2100      	movs	r1, #0
  40028c:	2000      	movs	r0, #0
  40028e:	4c05      	ldr	r4, [pc, #20]	; (4002a4 <configure_lcd+0x48>)
  400290:	47a0      	blx	r4
	
}
  400292:	bf00      	nop
  400294:	bd98      	pop	{r3, r4, r7, pc}
  400296:	bf00      	nop
  400298:	20400894 	.word	0x20400894
  40029c:	00fcfcfc 	.word	0x00fcfcfc
  4002a0:	00400d8d 	.word	0x00400d8d
  4002a4:	00400fd9 	.word	0x00400fd9

004002a8 <font_draw_text>:


void font_draw_text(tFont *font, const char *text, int x, int y, int spacing) {
  4002a8:	b590      	push	{r4, r7, lr}
  4002aa:	b08b      	sub	sp, #44	; 0x2c
  4002ac:	af02      	add	r7, sp, #8
  4002ae:	60f8      	str	r0, [r7, #12]
  4002b0:	60b9      	str	r1, [r7, #8]
  4002b2:	607a      	str	r2, [r7, #4]
  4002b4:	603b      	str	r3, [r7, #0]
	char *p = text;
  4002b6:	68bb      	ldr	r3, [r7, #8]
  4002b8:	61fb      	str	r3, [r7, #28]
	while(*p != NULL) {
  4002ba:	e02e      	b.n	40031a <font_draw_text+0x72>
		char letter = *p;
  4002bc:	69fb      	ldr	r3, [r7, #28]
  4002be:	781b      	ldrb	r3, [r3, #0]
  4002c0:	76fb      	strb	r3, [r7, #27]
		int letter_offset = letter - font->start_char;
  4002c2:	7efb      	ldrb	r3, [r7, #27]
  4002c4:	68fa      	ldr	r2, [r7, #12]
  4002c6:	7a12      	ldrb	r2, [r2, #8]
  4002c8:	1a9b      	subs	r3, r3, r2
  4002ca:	617b      	str	r3, [r7, #20]
		if(letter <= font->end_char) {
  4002cc:	68fb      	ldr	r3, [r7, #12]
  4002ce:	7a5b      	ldrb	r3, [r3, #9]
  4002d0:	7efa      	ldrb	r2, [r7, #27]
  4002d2:	429a      	cmp	r2, r3
  4002d4:	d81e      	bhi.n	400314 <font_draw_text+0x6c>
			tChar *current_char = font->chars + letter_offset;
  4002d6:	68fb      	ldr	r3, [r7, #12]
  4002d8:	685a      	ldr	r2, [r3, #4]
  4002da:	697b      	ldr	r3, [r7, #20]
  4002dc:	00db      	lsls	r3, r3, #3
  4002de:	4413      	add	r3, r2
  4002e0:	613b      	str	r3, [r7, #16]
			ili9488_draw_pixmap(x, y, current_char->image->width, current_char->image->height, current_char->image->data);
  4002e2:	6878      	ldr	r0, [r7, #4]
  4002e4:	6839      	ldr	r1, [r7, #0]
  4002e6:	693b      	ldr	r3, [r7, #16]
  4002e8:	685b      	ldr	r3, [r3, #4]
  4002ea:	685b      	ldr	r3, [r3, #4]
  4002ec:	461a      	mov	r2, r3
  4002ee:	693b      	ldr	r3, [r7, #16]
  4002f0:	685b      	ldr	r3, [r3, #4]
  4002f2:	689b      	ldr	r3, [r3, #8]
  4002f4:	461c      	mov	r4, r3
  4002f6:	693b      	ldr	r3, [r7, #16]
  4002f8:	685b      	ldr	r3, [r3, #4]
  4002fa:	681b      	ldr	r3, [r3, #0]
  4002fc:	9300      	str	r3, [sp, #0]
  4002fe:	4623      	mov	r3, r4
  400300:	4c0a      	ldr	r4, [pc, #40]	; (40032c <font_draw_text+0x84>)
  400302:	47a0      	blx	r4
			x += current_char->image->width + spacing;
  400304:	693b      	ldr	r3, [r7, #16]
  400306:	685b      	ldr	r3, [r3, #4]
  400308:	685a      	ldr	r2, [r3, #4]
  40030a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40030c:	4413      	add	r3, r2
  40030e:	687a      	ldr	r2, [r7, #4]
  400310:	4413      	add	r3, r2
  400312:	607b      	str	r3, [r7, #4]
		}
		p++;
  400314:	69fb      	ldr	r3, [r7, #28]
  400316:	3301      	adds	r3, #1
  400318:	61fb      	str	r3, [r7, #28]
	while(*p != NULL) {
  40031a:	69fb      	ldr	r3, [r7, #28]
  40031c:	781b      	ldrb	r3, [r3, #0]
  40031e:	2b00      	cmp	r3, #0
  400320:	d1cc      	bne.n	4002bc <font_draw_text+0x14>
	}	
}
  400322:	bf00      	nop
  400324:	3724      	adds	r7, #36	; 0x24
  400326:	46bd      	mov	sp, r7
  400328:	bd90      	pop	{r4, r7, pc}
  40032a:	bf00      	nop
  40032c:	004010b5 	.word	0x004010b5

00400330 <BUT1_Handler>:

void BUT1_Handler(){
  400330:	b480      	push	{r7}
  400332:	af00      	add	r7, sp, #0
	
}
  400334:	bf00      	nop
  400336:	46bd      	mov	sp, r7
  400338:	f85d 7b04 	ldr.w	r7, [sp], #4
  40033c:	4770      	bx	lr

0040033e <BUT2_Handler>:

void BUT2_Handler(){
  40033e:	b480      	push	{r7}
  400340:	af00      	add	r7, sp, #0
	
}
  400342:	bf00      	nop
  400344:	46bd      	mov	sp, r7
  400346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40034a:	4770      	bx	lr

0040034c <BUT3_Handler>:

void BUT3_Handler(){
  40034c:	b480      	push	{r7}
  40034e:	af00      	add	r7, sp, #0
	
}
  400350:	bf00      	nop
  400352:	46bd      	mov	sp, r7
  400354:	f85d 7b04 	ldr.w	r7, [sp], #4
  400358:	4770      	bx	lr
	...

0040035c <But_init>:

void But_init(){
  40035c:	b590      	push	{r4, r7, lr}
  40035e:	b083      	sub	sp, #12
  400360:	af02      	add	r7, sp, #8
	
	pmc_enable_periph_clk(BUT1_PIO_ID);
  400362:	2010      	movs	r0, #16
  400364:	4b2f      	ldr	r3, [pc, #188]	; (400424 <But_init+0xc8>)
  400366:	4798      	blx	r3
	pmc_enable_periph_clk(BUT2_PIO_ID);
  400368:	200c      	movs	r0, #12
  40036a:	4b2e      	ldr	r3, [pc, #184]	; (400424 <But_init+0xc8>)
  40036c:	4798      	blx	r3
	pmc_enable_periph_clk(BUT3_PIO_ID);
  40036e:	200a      	movs	r0, #10
  400370:	4b2c      	ldr	r3, [pc, #176]	; (400424 <But_init+0xc8>)
  400372:	4798      	blx	r3
	
	pio_set_input(BUT1_PIO,BUT1_PIO_IDX_MASK,PIO_DEFAULT);
  400374:	2200      	movs	r2, #0
  400376:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40037a:	482b      	ldr	r0, [pc, #172]	; (400428 <But_init+0xcc>)
  40037c:	4b2b      	ldr	r3, [pc, #172]	; (40042c <But_init+0xd0>)
  40037e:	4798      	blx	r3
	pio_set_input(BUT2_PIO,BUT2_PIO_IDX_MASK,PIO_DEFAULT);
  400380:	2200      	movs	r2, #0
  400382:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  400386:	482a      	ldr	r0, [pc, #168]	; (400430 <But_init+0xd4>)
  400388:	4b28      	ldr	r3, [pc, #160]	; (40042c <But_init+0xd0>)
  40038a:	4798      	blx	r3
	pio_set_input(BUT3_PIO,BUT3_PIO_IDX_MASK,PIO_DEFAULT);
  40038c:	2200      	movs	r2, #0
  40038e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400392:	4828      	ldr	r0, [pc, #160]	; (400434 <But_init+0xd8>)
  400394:	4b25      	ldr	r3, [pc, #148]	; (40042c <But_init+0xd0>)
  400396:	4798      	blx	r3
	
	pio_pull_up(BUT1_PIO, BUT1_PIO_IDX_MASK, 1);
  400398:	2201      	movs	r2, #1
  40039a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40039e:	4822      	ldr	r0, [pc, #136]	; (400428 <But_init+0xcc>)
  4003a0:	4b25      	ldr	r3, [pc, #148]	; (400438 <But_init+0xdc>)
  4003a2:	4798      	blx	r3
	pio_pull_up(BUT2_PIO, BUT2_PIO_IDX_MASK, 1);
  4003a4:	2201      	movs	r2, #1
  4003a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4003aa:	4821      	ldr	r0, [pc, #132]	; (400430 <But_init+0xd4>)
  4003ac:	4b22      	ldr	r3, [pc, #136]	; (400438 <But_init+0xdc>)
  4003ae:	4798      	blx	r3
	pio_pull_up(BUT3_PIO, BUT3_PIO_IDX_MASK, 1);
  4003b0:	2201      	movs	r2, #1
  4003b2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4003b6:	481f      	ldr	r0, [pc, #124]	; (400434 <But_init+0xd8>)
  4003b8:	4b1f      	ldr	r3, [pc, #124]	; (400438 <But_init+0xdc>)
  4003ba:	4798      	blx	r3
	
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_EDGE, BUT1_Handler);
  4003bc:	4b1f      	ldr	r3, [pc, #124]	; (40043c <But_init+0xe0>)
  4003be:	9300      	str	r3, [sp, #0]
  4003c0:	2340      	movs	r3, #64	; 0x40
  4003c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003c6:	2110      	movs	r1, #16
  4003c8:	4817      	ldr	r0, [pc, #92]	; (400428 <But_init+0xcc>)
  4003ca:	4c1d      	ldr	r4, [pc, #116]	; (400440 <But_init+0xe4>)
  4003cc:	47a0      	blx	r4
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_EDGE, BUT2_Handler);
  4003ce:	4b1d      	ldr	r3, [pc, #116]	; (400444 <But_init+0xe8>)
  4003d0:	9300      	str	r3, [sp, #0]
  4003d2:	2340      	movs	r3, #64	; 0x40
  4003d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4003d8:	210c      	movs	r1, #12
  4003da:	4815      	ldr	r0, [pc, #84]	; (400430 <But_init+0xd4>)
  4003dc:	4c18      	ldr	r4, [pc, #96]	; (400440 <But_init+0xe4>)
  4003de:	47a0      	blx	r4
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_EDGE, BUT3_Handler);
  4003e0:	4b19      	ldr	r3, [pc, #100]	; (400448 <But_init+0xec>)
  4003e2:	9300      	str	r3, [sp, #0]
  4003e4:	2340      	movs	r3, #64	; 0x40
  4003e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003ea:	210a      	movs	r1, #10
  4003ec:	4811      	ldr	r0, [pc, #68]	; (400434 <But_init+0xd8>)
  4003ee:	4c14      	ldr	r4, [pc, #80]	; (400440 <But_init+0xe4>)
  4003f0:	47a0      	blx	r4
	
	NVIC_EnableIRQ(BUT1_PIO_ID);
  4003f2:	2010      	movs	r0, #16
  4003f4:	4b15      	ldr	r3, [pc, #84]	; (40044c <But_init+0xf0>)
  4003f6:	4798      	blx	r3
	NVIC_EnableIRQ(BUT2_PIO_ID);
  4003f8:	200c      	movs	r0, #12
  4003fa:	4b14      	ldr	r3, [pc, #80]	; (40044c <But_init+0xf0>)
  4003fc:	4798      	blx	r3
	NVIC_EnableIRQ(BUT3_PIO_ID);
  4003fe:	200a      	movs	r0, #10
  400400:	4b12      	ldr	r3, [pc, #72]	; (40044c <But_init+0xf0>)
  400402:	4798      	blx	r3
		
	NVIC_SetPriority(BUT1_PIO_ID, 1);
  400404:	2101      	movs	r1, #1
  400406:	2010      	movs	r0, #16
  400408:	4b11      	ldr	r3, [pc, #68]	; (400450 <But_init+0xf4>)
  40040a:	4798      	blx	r3
	NVIC_SetPriority(BUT2_PIO_ID, 1);
  40040c:	2101      	movs	r1, #1
  40040e:	200c      	movs	r0, #12
  400410:	4b0f      	ldr	r3, [pc, #60]	; (400450 <But_init+0xf4>)
  400412:	4798      	blx	r3
	NVIC_SetPriority(BUT3_PIO_ID, 1);
  400414:	2101      	movs	r1, #1
  400416:	200a      	movs	r0, #10
  400418:	4b0d      	ldr	r3, [pc, #52]	; (400450 <But_init+0xf4>)
  40041a:	4798      	blx	r3
}
  40041c:	bf00      	nop
  40041e:	3704      	adds	r7, #4
  400420:	46bd      	mov	sp, r7
  400422:	bd90      	pop	{r4, r7, pc}
  400424:	004028bd 	.word	0x004028bd
  400428:	400e1400 	.word	0x400e1400
  40042c:	00401f8d 	.word	0x00401f8d
  400430:	400e1200 	.word	0x400e1200
  400434:	400e0e00 	.word	0x400e0e00
  400438:	00401e35 	.word	0x00401e35
  40043c:	00400331 	.word	0x00400331
  400440:	004024e1 	.word	0x004024e1
  400444:	0040033f 	.word	0x0040033f
  400448:	0040034d 	.word	0x0040034d
  40044c:	004001d5 	.word	0x004001d5
  400450:	00400209 	.word	0x00400209

00400454 <main>:


int main(void) {
  400454:	b590      	push	{r4, r7, lr}
  400456:	b083      	sub	sp, #12
  400458:	af02      	add	r7, sp, #8
	board_init();
  40045a:	4b0e      	ldr	r3, [pc, #56]	; (400494 <main+0x40>)
  40045c:	4798      	blx	r3
	sysclk_init();	
  40045e:	4b0e      	ldr	r3, [pc, #56]	; (400498 <main+0x44>)
  400460:	4798      	blx	r3
	configure_lcd();
  400462:	4b0e      	ldr	r3, [pc, #56]	; (40049c <main+0x48>)
  400464:	4798      	blx	r3
	But_init();
  400466:	4b0e      	ldr	r3, [pc, #56]	; (4004a0 <main+0x4c>)
  400468:	4798      	blx	r3
	
	font_draw_text(&sourcecodepro_28, "BIKE", 50, 50, 1);
  40046a:	2301      	movs	r3, #1
  40046c:	9300      	str	r3, [sp, #0]
  40046e:	2332      	movs	r3, #50	; 0x32
  400470:	2232      	movs	r2, #50	; 0x32
  400472:	490c      	ldr	r1, [pc, #48]	; (4004a4 <main+0x50>)
  400474:	480c      	ldr	r0, [pc, #48]	; (4004a8 <main+0x54>)
  400476:	4c0d      	ldr	r4, [pc, #52]	; (4004ac <main+0x58>)
  400478:	47a0      	blx	r4
	font_draw_text(&sourcecodepro_28, "VELOCIDADE", 50, 100, 1);
  40047a:	2301      	movs	r3, #1
  40047c:	9300      	str	r3, [sp, #0]
  40047e:	2364      	movs	r3, #100	; 0x64
  400480:	2232      	movs	r2, #50	; 0x32
  400482:	490b      	ldr	r1, [pc, #44]	; (4004b0 <main+0x5c>)
  400484:	4808      	ldr	r0, [pc, #32]	; (4004a8 <main+0x54>)
  400486:	4c09      	ldr	r4, [pc, #36]	; (4004ac <main+0x58>)
  400488:	47a0      	blx	r4
	while(1) {
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  40048a:	2002      	movs	r0, #2
  40048c:	4b09      	ldr	r3, [pc, #36]	; (4004b4 <main+0x60>)
  40048e:	4798      	blx	r3
  400490:	e7fb      	b.n	40048a <main+0x36>
  400492:	bf00      	nop
  400494:	00401c89 	.word	0x00401c89
  400498:	00401855 	.word	0x00401855
  40049c:	0040025d 	.word	0x0040025d
  4004a0:	0040035d 	.word	0x0040035d
  4004a4:	00405620 	.word	0x00405620
  4004a8:	00405614 	.word	0x00405614
  4004ac:	004002a9 	.word	0x004002a9
  4004b0:	00405628 	.word	0x00405628
  4004b4:	004029a9 	.word	0x004029a9

004004b8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4004b8:	b480      	push	{r7}
  4004ba:	b083      	sub	sp, #12
  4004bc:	af00      	add	r7, sp, #0
  4004be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4004c0:	687b      	ldr	r3, [r7, #4]
  4004c2:	2b07      	cmp	r3, #7
  4004c4:	d825      	bhi.n	400512 <osc_get_rate+0x5a>
  4004c6:	a201      	add	r2, pc, #4	; (adr r2, 4004cc <osc_get_rate+0x14>)
  4004c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4004cc:	004004ed 	.word	0x004004ed
  4004d0:	004004f3 	.word	0x004004f3
  4004d4:	004004f9 	.word	0x004004f9
  4004d8:	004004ff 	.word	0x004004ff
  4004dc:	00400503 	.word	0x00400503
  4004e0:	00400507 	.word	0x00400507
  4004e4:	0040050b 	.word	0x0040050b
  4004e8:	0040050f 	.word	0x0040050f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4004ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4004f0:	e010      	b.n	400514 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4004f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4004f6:	e00d      	b.n	400514 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4004f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4004fc:	e00a      	b.n	400514 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4004fe:	4b08      	ldr	r3, [pc, #32]	; (400520 <osc_get_rate+0x68>)
  400500:	e008      	b.n	400514 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400502:	4b08      	ldr	r3, [pc, #32]	; (400524 <osc_get_rate+0x6c>)
  400504:	e006      	b.n	400514 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400506:	4b08      	ldr	r3, [pc, #32]	; (400528 <osc_get_rate+0x70>)
  400508:	e004      	b.n	400514 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40050a:	4b07      	ldr	r3, [pc, #28]	; (400528 <osc_get_rate+0x70>)
  40050c:	e002      	b.n	400514 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40050e:	4b06      	ldr	r3, [pc, #24]	; (400528 <osc_get_rate+0x70>)
  400510:	e000      	b.n	400514 <osc_get_rate+0x5c>
	}

	return 0;
  400512:	2300      	movs	r3, #0
}
  400514:	4618      	mov	r0, r3
  400516:	370c      	adds	r7, #12
  400518:	46bd      	mov	sp, r7
  40051a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40051e:	4770      	bx	lr
  400520:	003d0900 	.word	0x003d0900
  400524:	007a1200 	.word	0x007a1200
  400528:	00b71b00 	.word	0x00b71b00

0040052c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40052c:	b580      	push	{r7, lr}
  40052e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400530:	2006      	movs	r0, #6
  400532:	4b05      	ldr	r3, [pc, #20]	; (400548 <sysclk_get_main_hz+0x1c>)
  400534:	4798      	blx	r3
  400536:	4602      	mov	r2, r0
  400538:	4613      	mov	r3, r2
  40053a:	009b      	lsls	r3, r3, #2
  40053c:	4413      	add	r3, r2
  40053e:	009a      	lsls	r2, r3, #2
  400540:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400542:	4618      	mov	r0, r3
  400544:	bd80      	pop	{r7, pc}
  400546:	bf00      	nop
  400548:	004004b9 	.word	0x004004b9

0040054c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40054c:	b580      	push	{r7, lr}
  40054e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400550:	4b02      	ldr	r3, [pc, #8]	; (40055c <sysclk_get_peripheral_hz+0x10>)
  400552:	4798      	blx	r3
  400554:	4603      	mov	r3, r0
  400556:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  400558:	4618      	mov	r0, r3
  40055a:	bd80      	pop	{r7, pc}
  40055c:	0040052d 	.word	0x0040052d

00400560 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  400560:	b480      	push	{r7}
  400562:	b083      	sub	sp, #12
  400564:	af00      	add	r7, sp, #0
  400566:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	2280      	movs	r2, #128	; 0x80
  40056c:	601a      	str	r2, [r3, #0]
}
  40056e:	bf00      	nop
  400570:	370c      	adds	r7, #12
  400572:	46bd      	mov	sp, r7
  400574:	f85d 7b04 	ldr.w	r7, [sp], #4
  400578:	4770      	bx	lr

0040057a <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  40057a:	b480      	push	{r7}
  40057c:	b083      	sub	sp, #12
  40057e:	af00      	add	r7, sp, #0
  400580:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400582:	687b      	ldr	r3, [r7, #4]
  400584:	685b      	ldr	r3, [r3, #4]
  400586:	f043 0201 	orr.w	r2, r3, #1
  40058a:	687b      	ldr	r3, [r7, #4]
  40058c:	605a      	str	r2, [r3, #4]
}
  40058e:	bf00      	nop
  400590:	370c      	adds	r7, #12
  400592:	46bd      	mov	sp, r7
  400594:	f85d 7b04 	ldr.w	r7, [sp], #4
  400598:	4770      	bx	lr

0040059a <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
  40059a:	b480      	push	{r7}
  40059c:	b083      	sub	sp, #12
  40059e:	af00      	add	r7, sp, #0
  4005a0:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4005a2:	687b      	ldr	r3, [r7, #4]
  4005a4:	685b      	ldr	r3, [r3, #4]
  4005a6:	f023 0202 	bic.w	r2, r3, #2
  4005aa:	687b      	ldr	r3, [r7, #4]
  4005ac:	605a      	str	r2, [r3, #4]
}
  4005ae:	bf00      	nop
  4005b0:	370c      	adds	r7, #12
  4005b2:	46bd      	mov	sp, r7
  4005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005b8:	4770      	bx	lr

004005ba <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
  4005ba:	b480      	push	{r7}
  4005bc:	b083      	sub	sp, #12
  4005be:	af00      	add	r7, sp, #0
  4005c0:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4005c2:	687b      	ldr	r3, [r7, #4]
  4005c4:	685b      	ldr	r3, [r3, #4]
  4005c6:	f023 0204 	bic.w	r2, r3, #4
  4005ca:	687b      	ldr	r3, [r7, #4]
  4005cc:	605a      	str	r2, [r3, #4]
}
  4005ce:	bf00      	nop
  4005d0:	370c      	adds	r7, #12
  4005d2:	46bd      	mov	sp, r7
  4005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005d8:	4770      	bx	lr

004005da <spi_get_peripheral_select_decode_setting>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
  4005da:	b480      	push	{r7}
  4005dc:	b083      	sub	sp, #12
  4005de:	af00      	add	r7, sp, #0
  4005e0:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4005e2:	687b      	ldr	r3, [r7, #4]
  4005e4:	685b      	ldr	r3, [r3, #4]
  4005e6:	f003 0304 	and.w	r3, r3, #4
  4005ea:	2b00      	cmp	r3, #0
  4005ec:	d001      	beq.n	4005f2 <spi_get_peripheral_select_decode_setting+0x18>
		return 1;
  4005ee:	2301      	movs	r3, #1
  4005f0:	e000      	b.n	4005f4 <spi_get_peripheral_select_decode_setting+0x1a>
	} else {
		return 0;
  4005f2:	2300      	movs	r3, #0
	}
}
  4005f4:	4618      	mov	r0, r3
  4005f6:	370c      	adds	r7, #12
  4005f8:	46bd      	mov	sp, r7
  4005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005fe:	4770      	bx	lr

00400600 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  400600:	b480      	push	{r7}
  400602:	b083      	sub	sp, #12
  400604:	af00      	add	r7, sp, #0
  400606:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400608:	687b      	ldr	r3, [r7, #4]
  40060a:	685b      	ldr	r3, [r3, #4]
  40060c:	f043 0210 	orr.w	r2, r3, #16
  400610:	687b      	ldr	r3, [r7, #4]
  400612:	605a      	str	r2, [r3, #4]
}
  400614:	bf00      	nop
  400616:	370c      	adds	r7, #12
  400618:	46bd      	mov	sp, r7
  40061a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40061e:	4770      	bx	lr

00400620 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  400620:	b480      	push	{r7}
  400622:	b083      	sub	sp, #12
  400624:	af00      	add	r7, sp, #0
  400626:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400628:	687b      	ldr	r3, [r7, #4]
  40062a:	685b      	ldr	r3, [r3, #4]
  40062c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  400630:	687b      	ldr	r3, [r7, #4]
  400632:	605a      	str	r2, [r3, #4]
}
  400634:	bf00      	nop
  400636:	370c      	adds	r7, #12
  400638:	46bd      	mov	sp, r7
  40063a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40063e:	4770      	bx	lr

00400640 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
  400640:	b480      	push	{r7}
  400642:	b083      	sub	sp, #12
  400644:	af00      	add	r7, sp, #0
  400646:	6078      	str	r0, [r7, #4]
  400648:	460b      	mov	r3, r1
  40064a:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40064c:	887a      	ldrh	r2, [r7, #2]
  40064e:	687b      	ldr	r3, [r7, #4]
  400650:	60da      	str	r2, [r3, #12]
}
  400652:	bf00      	nop
  400654:	370c      	adds	r7, #12
  400656:	46bd      	mov	sp, r7
  400658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40065c:	4770      	bx	lr

0040065e <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
  40065e:	b480      	push	{r7}
  400660:	b083      	sub	sp, #12
  400662:	af00      	add	r7, sp, #0
  400664:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400666:	687b      	ldr	r3, [r7, #4]
  400668:	689b      	ldr	r3, [r3, #8]
  40066a:	b29b      	uxth	r3, r3
}
  40066c:	4618      	mov	r0, r3
  40066e:	370c      	adds	r7, #12
  400670:	46bd      	mov	sp, r7
  400672:	f85d 7b04 	ldr.w	r7, [sp], #4
  400676:	4770      	bx	lr

00400678 <spi_is_tx_ready>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
  400678:	b480      	push	{r7}
  40067a:	b083      	sub	sp, #12
  40067c:	af00      	add	r7, sp, #0
  40067e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400680:	687b      	ldr	r3, [r7, #4]
  400682:	691b      	ldr	r3, [r3, #16]
  400684:	f003 0302 	and.w	r3, r3, #2
  400688:	2b00      	cmp	r3, #0
  40068a:	d001      	beq.n	400690 <spi_is_tx_ready+0x18>
		return 1;
  40068c:	2301      	movs	r3, #1
  40068e:	e000      	b.n	400692 <spi_is_tx_ready+0x1a>
	} else {
		return 0;
  400690:	2300      	movs	r3, #0
	}
}
  400692:	4618      	mov	r0, r3
  400694:	370c      	adds	r7, #12
  400696:	46bd      	mov	sp, r7
  400698:	f85d 7b04 	ldr.w	r7, [sp], #4
  40069c:	4770      	bx	lr

0040069e <spi_is_rx_ready>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
  40069e:	b480      	push	{r7}
  4006a0:	b083      	sub	sp, #12
  4006a2:	af00      	add	r7, sp, #0
  4006a4:	6078      	str	r0, [r7, #4]
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4006a6:	687b      	ldr	r3, [r7, #4]
  4006a8:	691a      	ldr	r2, [r3, #16]
  4006aa:	f240 2301 	movw	r3, #513	; 0x201
  4006ae:	4013      	ands	r3, r2
  4006b0:	f240 2201 	movw	r2, #513	; 0x201
  4006b4:	4293      	cmp	r3, r2
  4006b6:	d101      	bne.n	4006bc <spi_is_rx_ready+0x1e>
			== (SPI_SR_RDRF | SPI_SR_TXEMPTY)) {
		return 1;
  4006b8:	2301      	movs	r3, #1
  4006ba:	e000      	b.n	4006be <spi_is_rx_ready+0x20>
	} else {
		return 0;
  4006bc:	2300      	movs	r3, #0
	}
}
  4006be:	4618      	mov	r0, r3
  4006c0:	370c      	adds	r7, #12
  4006c2:	46bd      	mov	sp, r7
  4006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006c8:	4770      	bx	lr
	...

004006cc <spi_write_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to write.
 *
 */
static inline void spi_write_single(Spi *p_spi, uint8_t data)
{
  4006cc:	b580      	push	{r7, lr}
  4006ce:	b082      	sub	sp, #8
  4006d0:	af00      	add	r7, sp, #0
  4006d2:	6078      	str	r0, [r7, #4]
  4006d4:	460b      	mov	r3, r1
  4006d6:	70fb      	strb	r3, [r7, #3]
	spi_put(p_spi, (uint16_t)data);
  4006d8:	78fb      	ldrb	r3, [r7, #3]
  4006da:	b29b      	uxth	r3, r3
  4006dc:	4619      	mov	r1, r3
  4006de:	6878      	ldr	r0, [r7, #4]
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <spi_write_single+0x20>)
  4006e2:	4798      	blx	r3
}
  4006e4:	bf00      	nop
  4006e6:	3708      	adds	r7, #8
  4006e8:	46bd      	mov	sp, r7
  4006ea:	bd80      	pop	{r7, pc}
  4006ec:	00400641 	.word	0x00400641

004006f0 <spi_read_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
  4006f0:	b580      	push	{r7, lr}
  4006f2:	b082      	sub	sp, #8
  4006f4:	af00      	add	r7, sp, #0
  4006f6:	6078      	str	r0, [r7, #4]
  4006f8:	6039      	str	r1, [r7, #0]
	*data = (uint8_t)spi_get(p_spi);
  4006fa:	6878      	ldr	r0, [r7, #4]
  4006fc:	4b04      	ldr	r3, [pc, #16]	; (400710 <spi_read_single+0x20>)
  4006fe:	4798      	blx	r3
  400700:	4603      	mov	r3, r0
  400702:	b2da      	uxtb	r2, r3
  400704:	683b      	ldr	r3, [r7, #0]
  400706:	701a      	strb	r2, [r3, #0]
}
  400708:	bf00      	nop
  40070a:	3708      	adds	r7, #8
  40070c:	46bd      	mov	sp, r7
  40070e:	bd80      	pop	{r7, pc}
  400710:	0040065f 	.word	0x0040065f

00400714 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400714:	b580      	push	{r7, lr}
  400716:	b082      	sub	sp, #8
  400718:	af00      	add	r7, sp, #0
  40071a:	6078      	str	r0, [r7, #4]
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  40071c:	6878      	ldr	r0, [r7, #4]
  40071e:	4b10      	ldr	r3, [pc, #64]	; (400760 <spi_master_init+0x4c>)
  400720:	4798      	blx	r3
#endif
	spi_reset(p_spi);
  400722:	6878      	ldr	r0, [r7, #4]
  400724:	4b0f      	ldr	r3, [pc, #60]	; (400764 <spi_master_init+0x50>)
  400726:	4798      	blx	r3
	spi_set_master_mode(p_spi);
  400728:	6878      	ldr	r0, [r7, #4]
  40072a:	4b0f      	ldr	r3, [pc, #60]	; (400768 <spi_master_init+0x54>)
  40072c:	4798      	blx	r3
	spi_disable_mode_fault_detect(p_spi);
  40072e:	6878      	ldr	r0, [r7, #4]
  400730:	4b0e      	ldr	r3, [pc, #56]	; (40076c <spi_master_init+0x58>)
  400732:	4798      	blx	r3
	spi_disable_loopback(p_spi);
  400734:	6878      	ldr	r0, [r7, #4]
  400736:	4b0e      	ldr	r3, [pc, #56]	; (400770 <spi_master_init+0x5c>)
  400738:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40073a:	2100      	movs	r1, #0
  40073c:	6878      	ldr	r0, [r7, #4]
  40073e:	4b0d      	ldr	r3, [pc, #52]	; (400774 <spi_master_init+0x60>)
  400740:	4798      	blx	r3
	spi_set_fixed_peripheral_select(p_spi);
  400742:	6878      	ldr	r0, [r7, #4]
  400744:	4b0c      	ldr	r3, [pc, #48]	; (400778 <spi_master_init+0x64>)
  400746:	4798      	blx	r3
	spi_disable_peripheral_select_decode(p_spi);
  400748:	6878      	ldr	r0, [r7, #4]
  40074a:	4b0c      	ldr	r3, [pc, #48]	; (40077c <spi_master_init+0x68>)
  40074c:	4798      	blx	r3
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  40074e:	2100      	movs	r1, #0
  400750:	6878      	ldr	r0, [r7, #4]
  400752:	4b0b      	ldr	r3, [pc, #44]	; (400780 <spi_master_init+0x6c>)
  400754:	4798      	blx	r3
}
  400756:	bf00      	nop
  400758:	3708      	adds	r7, #8
  40075a:	46bd      	mov	sp, r7
  40075c:	bd80      	pop	{r7, pc}
  40075e:	bf00      	nop
  400760:	004011ad 	.word	0x004011ad
  400764:	00400561 	.word	0x00400561
  400768:	0040057b 	.word	0x0040057b
  40076c:	00400601 	.word	0x00400601
  400770:	00400621 	.word	0x00400621
  400774:	004011e9 	.word	0x004011e9
  400778:	0040059b 	.word	0x0040059b
  40077c:	004005bb 	.word	0x004005bb
  400780:	0040121d 	.word	0x0040121d

00400784 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400784:	b590      	push	{r4, r7, lr}
  400786:	b087      	sub	sp, #28
  400788:	af00      	add	r7, sp, #0
  40078a:	60f8      	str	r0, [r7, #12]
  40078c:	60b9      	str	r1, [r7, #8]
  40078e:	603b      	str	r3, [r7, #0]
  400790:	4613      	mov	r3, r2
  400792:	71fb      	strb	r3, [r7, #7]
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  400794:	4b20      	ldr	r3, [pc, #128]	; (400818 <spi_master_setup_device+0x94>)
  400796:	4798      	blx	r3
  400798:	4603      	mov	r3, r0
  40079a:	4619      	mov	r1, r3
  40079c:	6838      	ldr	r0, [r7, #0]
  40079e:	4b1f      	ldr	r3, [pc, #124]	; (40081c <spi_master_setup_device+0x98>)
  4007a0:	4798      	blx	r3
  4007a2:	4603      	mov	r3, r0
  4007a4:	82fb      	strh	r3, [r7, #22]
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4007a6:	68bb      	ldr	r3, [r7, #8]
  4007a8:	6819      	ldr	r1, [r3, #0]
  4007aa:	2300      	movs	r3, #0
  4007ac:	2200      	movs	r2, #0
  4007ae:	68f8      	ldr	r0, [r7, #12]
  4007b0:	4c1b      	ldr	r4, [pc, #108]	; (400820 <spi_master_setup_device+0x9c>)
  4007b2:	47a0      	blx	r4
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4007b4:	68bb      	ldr	r3, [r7, #8]
  4007b6:	681b      	ldr	r3, [r3, #0]
  4007b8:	2208      	movs	r2, #8
  4007ba:	4619      	mov	r1, r3
  4007bc:	68f8      	ldr	r0, [r7, #12]
  4007be:	4b19      	ldr	r3, [pc, #100]	; (400824 <spi_master_setup_device+0xa0>)
  4007c0:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4007c2:	68bb      	ldr	r3, [r7, #8]
  4007c4:	681b      	ldr	r3, [r3, #0]
  4007c6:	8afa      	ldrh	r2, [r7, #22]
  4007c8:	b2d2      	uxtb	r2, r2
  4007ca:	4619      	mov	r1, r3
  4007cc:	68f8      	ldr	r0, [r7, #12]
  4007ce:	4b16      	ldr	r3, [pc, #88]	; (400828 <spi_master_setup_device+0xa4>)
  4007d0:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4007d2:	68bb      	ldr	r3, [r7, #8]
  4007d4:	681b      	ldr	r3, [r3, #0]
  4007d6:	2208      	movs	r2, #8
  4007d8:	4619      	mov	r1, r3
  4007da:	68f8      	ldr	r0, [r7, #12]
  4007dc:	4b13      	ldr	r3, [pc, #76]	; (40082c <spi_master_setup_device+0xa8>)
  4007de:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4007e0:	68bb      	ldr	r3, [r7, #8]
  4007e2:	6819      	ldr	r1, [r3, #0]
  4007e4:	79fb      	ldrb	r3, [r7, #7]
  4007e6:	085b      	lsrs	r3, r3, #1
  4007e8:	b2db      	uxtb	r3, r3
  4007ea:	461a      	mov	r2, r3
  4007ec:	68f8      	ldr	r0, [r7, #12]
  4007ee:	4b10      	ldr	r3, [pc, #64]	; (400830 <spi_master_setup_device+0xac>)
  4007f0:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  4007f2:	68bb      	ldr	r3, [r7, #8]
  4007f4:	6819      	ldr	r1, [r3, #0]
  4007f6:	79fb      	ldrb	r3, [r7, #7]
  4007f8:	f003 0301 	and.w	r3, r3, #1
  4007fc:	2b00      	cmp	r3, #0
  4007fe:	bf0c      	ite	eq
  400800:	2301      	moveq	r3, #1
  400802:	2300      	movne	r3, #0
  400804:	b2db      	uxtb	r3, r3
  400806:	461a      	mov	r2, r3
  400808:	68f8      	ldr	r0, [r7, #12]
  40080a:	4b0a      	ldr	r3, [pc, #40]	; (400834 <spi_master_setup_device+0xb0>)
  40080c:	4798      	blx	r3
}
  40080e:	bf00      	nop
  400810:	371c      	adds	r7, #28
  400812:	46bd      	mov	sp, r7
  400814:	bd90      	pop	{r4, r7, pc}
  400816:	bf00      	nop
  400818:	0040054d 	.word	0x0040054d
  40081c:	0040145d 	.word	0x0040145d
  400820:	004014f7 	.word	0x004014f7
  400824:	00401413 	.word	0x00401413
  400828:	00401499 	.word	0x00401499
  40082c:	0040136d 	.word	0x0040136d
  400830:	004012cd 	.word	0x004012cd
  400834:	0040131d 	.word	0x0040131d

00400838 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400838:	b580      	push	{r7, lr}
  40083a:	b082      	sub	sp, #8
  40083c:	af00      	add	r7, sp, #0
  40083e:	6078      	str	r0, [r7, #4]
  400840:	6039      	str	r1, [r7, #0]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400842:	6878      	ldr	r0, [r7, #4]
  400844:	4b10      	ldr	r3, [pc, #64]	; (400888 <spi_select_device+0x50>)
  400846:	4798      	blx	r3
  400848:	4603      	mov	r3, r0
  40084a:	2b00      	cmp	r3, #0
  40084c:	d00a      	beq.n	400864 <spi_select_device+0x2c>
		if (device->id < MAX_NUM_WITH_DECODER) {
  40084e:	683b      	ldr	r3, [r7, #0]
  400850:	681b      	ldr	r3, [r3, #0]
  400852:	2b0f      	cmp	r3, #15
  400854:	d814      	bhi.n	400880 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400856:	683b      	ldr	r3, [r7, #0]
  400858:	681b      	ldr	r3, [r3, #0]
  40085a:	4619      	mov	r1, r3
  40085c:	6878      	ldr	r0, [r7, #4]
  40085e:	4b0b      	ldr	r3, [pc, #44]	; (40088c <spi_select_device+0x54>)
  400860:	4798      	blx	r3
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
		}
	}
}
  400862:	e00d      	b.n	400880 <spi_select_device+0x48>
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400864:	683b      	ldr	r3, [r7, #0]
  400866:	681b      	ldr	r3, [r3, #0]
  400868:	2b03      	cmp	r3, #3
  40086a:	d809      	bhi.n	400880 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  40086c:	683b      	ldr	r3, [r7, #0]
  40086e:	681b      	ldr	r3, [r3, #0]
  400870:	2201      	movs	r2, #1
  400872:	fa02 f303 	lsl.w	r3, r2, r3
  400876:	43db      	mvns	r3, r3
  400878:	4619      	mov	r1, r3
  40087a:	6878      	ldr	r0, [r7, #4]
  40087c:	4b03      	ldr	r3, [pc, #12]	; (40088c <spi_select_device+0x54>)
  40087e:	4798      	blx	r3
}
  400880:	bf00      	nop
  400882:	3708      	adds	r7, #8
  400884:	46bd      	mov	sp, r7
  400886:	bd80      	pop	{r7, pc}
  400888:	004005db 	.word	0x004005db
  40088c:	004011e9 	.word	0x004011e9

00400890 <spi_write_packet>:
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  400890:	b580      	push	{r7, lr}
  400892:	b088      	sub	sp, #32
  400894:	af00      	add	r7, sp, #0
  400896:	60f8      	str	r0, [r7, #12]
  400898:	60b9      	str	r1, [r7, #8]
  40089a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  40089c:	f643 2398 	movw	r3, #15000	; 0x3a98
  4008a0:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
  4008a2:	2300      	movs	r3, #0
  4008a4:	61bb      	str	r3, [r7, #24]
	uint8_t val;

	while (len) {
  4008a6:	e021      	b.n	4008ec <spi_write_packet+0x5c>
		timeout = SPI_TIMEOUT;
  4008a8:	f643 2398 	movw	r3, #15000	; 0x3a98
  4008ac:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
  4008ae:	e007      	b.n	4008c0 <spi_write_packet+0x30>
			if (!timeout--) {
  4008b0:	69fb      	ldr	r3, [r7, #28]
  4008b2:	1e5a      	subs	r2, r3, #1
  4008b4:	61fa      	str	r2, [r7, #28]
  4008b6:	2b00      	cmp	r3, #0
  4008b8:	d102      	bne.n	4008c0 <spi_write_packet+0x30>
				return ERR_TIMEOUT;
  4008ba:	f06f 0302 	mvn.w	r3, #2
  4008be:	e019      	b.n	4008f4 <spi_write_packet+0x64>
		while (!spi_is_tx_ready(p_spi)) {
  4008c0:	68f8      	ldr	r0, [r7, #12]
  4008c2:	4b0e      	ldr	r3, [pc, #56]	; (4008fc <spi_write_packet+0x6c>)
  4008c4:	4798      	blx	r3
  4008c6:	4603      	mov	r3, r0
  4008c8:	2b00      	cmp	r3, #0
  4008ca:	d0f1      	beq.n	4008b0 <spi_write_packet+0x20>
			}
		}
		val = data[i];
  4008cc:	68ba      	ldr	r2, [r7, #8]
  4008ce:	69bb      	ldr	r3, [r7, #24]
  4008d0:	4413      	add	r3, r2
  4008d2:	781b      	ldrb	r3, [r3, #0]
  4008d4:	75fb      	strb	r3, [r7, #23]
		spi_write_single(p_spi, val);
  4008d6:	7dfb      	ldrb	r3, [r7, #23]
  4008d8:	4619      	mov	r1, r3
  4008da:	68f8      	ldr	r0, [r7, #12]
  4008dc:	4b08      	ldr	r3, [pc, #32]	; (400900 <spi_write_packet+0x70>)
  4008de:	4798      	blx	r3
		i++;
  4008e0:	69bb      	ldr	r3, [r7, #24]
  4008e2:	3301      	adds	r3, #1
  4008e4:	61bb      	str	r3, [r7, #24]
		len--;
  4008e6:	687b      	ldr	r3, [r7, #4]
  4008e8:	3b01      	subs	r3, #1
  4008ea:	607b      	str	r3, [r7, #4]
	while (len) {
  4008ec:	687b      	ldr	r3, [r7, #4]
  4008ee:	2b00      	cmp	r3, #0
  4008f0:	d1da      	bne.n	4008a8 <spi_write_packet+0x18>
	}

	return STATUS_OK;
  4008f2:	2300      	movs	r3, #0
}
  4008f4:	4618      	mov	r0, r3
  4008f6:	3720      	adds	r7, #32
  4008f8:	46bd      	mov	sp, r7
  4008fa:	bd80      	pop	{r7, pc}
  4008fc:	00400679 	.word	0x00400679
  400900:	004006cd 	.word	0x004006cd

00400904 <spi_read_packet>:
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  400904:	b580      	push	{r7, lr}
  400906:	b088      	sub	sp, #32
  400908:	af00      	add	r7, sp, #0
  40090a:	60f8      	str	r0, [r7, #12]
  40090c:	60b9      	str	r1, [r7, #8]
  40090e:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  400910:	f643 2398 	movw	r3, #15000	; 0x3a98
  400914:	61fb      	str	r3, [r7, #28]
	uint8_t val;
	uint32_t i = 0;
  400916:	2300      	movs	r3, #0
  400918:	61bb      	str	r3, [r7, #24]

	while (len) {
  40091a:	e038      	b.n	40098e <spi_read_packet+0x8a>
		timeout = SPI_TIMEOUT;
  40091c:	f643 2398 	movw	r3, #15000	; 0x3a98
  400920:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
  400922:	e007      	b.n	400934 <spi_read_packet+0x30>
			if (!timeout--) {
  400924:	69fb      	ldr	r3, [r7, #28]
  400926:	1e5a      	subs	r2, r3, #1
  400928:	61fa      	str	r2, [r7, #28]
  40092a:	2b00      	cmp	r3, #0
  40092c:	d102      	bne.n	400934 <spi_read_packet+0x30>
				return ERR_TIMEOUT;
  40092e:	f06f 0302 	mvn.w	r3, #2
  400932:	e030      	b.n	400996 <spi_read_packet+0x92>
		while (!spi_is_tx_ready(p_spi)) {
  400934:	68f8      	ldr	r0, [r7, #12]
  400936:	4b1a      	ldr	r3, [pc, #104]	; (4009a0 <spi_read_packet+0x9c>)
  400938:	4798      	blx	r3
  40093a:	4603      	mov	r3, r0
  40093c:	2b00      	cmp	r3, #0
  40093e:	d0f1      	beq.n	400924 <spi_read_packet+0x20>
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
  400940:	21ff      	movs	r1, #255	; 0xff
  400942:	68f8      	ldr	r0, [r7, #12]
  400944:	4b17      	ldr	r3, [pc, #92]	; (4009a4 <spi_read_packet+0xa0>)
  400946:	4798      	blx	r3

		timeout = SPI_TIMEOUT;
  400948:	f643 2398 	movw	r3, #15000	; 0x3a98
  40094c:	61fb      	str	r3, [r7, #28]
		while (!spi_is_rx_ready(p_spi)) {
  40094e:	e007      	b.n	400960 <spi_read_packet+0x5c>
			if (!timeout--) {
  400950:	69fb      	ldr	r3, [r7, #28]
  400952:	1e5a      	subs	r2, r3, #1
  400954:	61fa      	str	r2, [r7, #28]
  400956:	2b00      	cmp	r3, #0
  400958:	d102      	bne.n	400960 <spi_read_packet+0x5c>
				return ERR_TIMEOUT;
  40095a:	f06f 0302 	mvn.w	r3, #2
  40095e:	e01a      	b.n	400996 <spi_read_packet+0x92>
		while (!spi_is_rx_ready(p_spi)) {
  400960:	68f8      	ldr	r0, [r7, #12]
  400962:	4b11      	ldr	r3, [pc, #68]	; (4009a8 <spi_read_packet+0xa4>)
  400964:	4798      	blx	r3
  400966:	4603      	mov	r3, r0
  400968:	2b00      	cmp	r3, #0
  40096a:	d0f1      	beq.n	400950 <spi_read_packet+0x4c>
			}
		}
		spi_read_single(p_spi, &val);
  40096c:	f107 0317 	add.w	r3, r7, #23
  400970:	4619      	mov	r1, r3
  400972:	68f8      	ldr	r0, [r7, #12]
  400974:	4b0d      	ldr	r3, [pc, #52]	; (4009ac <spi_read_packet+0xa8>)
  400976:	4798      	blx	r3

		data[i] = val;
  400978:	68ba      	ldr	r2, [r7, #8]
  40097a:	69bb      	ldr	r3, [r7, #24]
  40097c:	4413      	add	r3, r2
  40097e:	7dfa      	ldrb	r2, [r7, #23]
  400980:	701a      	strb	r2, [r3, #0]
		i++;
  400982:	69bb      	ldr	r3, [r7, #24]
  400984:	3301      	adds	r3, #1
  400986:	61bb      	str	r3, [r7, #24]
		len--;
  400988:	687b      	ldr	r3, [r7, #4]
  40098a:	3b01      	subs	r3, #1
  40098c:	607b      	str	r3, [r7, #4]
	while (len) {
  40098e:	687b      	ldr	r3, [r7, #4]
  400990:	2b00      	cmp	r3, #0
  400992:	d1c3      	bne.n	40091c <spi_read_packet+0x18>
	}

	return STATUS_OK;
  400994:	2300      	movs	r3, #0
}
  400996:	4618      	mov	r0, r3
  400998:	3720      	adds	r7, #32
  40099a:	46bd      	mov	sp, r7
  40099c:	bd80      	pop	{r7, pc}
  40099e:	bf00      	nop
  4009a0:	00400679 	.word	0x00400679
  4009a4:	004006cd 	.word	0x004006cd
  4009a8:	0040069f 	.word	0x0040069f
  4009ac:	004006f1 	.word	0x004006f1

004009b0 <spi_enable>:
{
  4009b0:	b480      	push	{r7}
  4009b2:	b083      	sub	sp, #12
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4009b8:	687b      	ldr	r3, [r7, #4]
  4009ba:	2201      	movs	r2, #1
  4009bc:	601a      	str	r2, [r3, #0]
}
  4009be:	bf00      	nop
  4009c0:	370c      	adds	r7, #12
  4009c2:	46bd      	mov	sp, r7
  4009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009c8:	4770      	bx	lr

004009ca <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  4009ca:	b480      	push	{r7}
  4009cc:	b083      	sub	sp, #12
  4009ce:	af00      	add	r7, sp, #0
  4009d0:	6078      	str	r0, [r7, #4]
  4009d2:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
  4009d4:	687b      	ldr	r3, [r7, #4]
  4009d6:	683a      	ldr	r2, [r7, #0]
  4009d8:	615a      	str	r2, [r3, #20]
}
  4009da:	bf00      	nop
  4009dc:	370c      	adds	r7, #12
  4009de:	46bd      	mov	sp, r7
  4009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009e4:	4770      	bx	lr
	...

004009e8 <ili9488_write_ram_prepare>:
#ifdef ILI9488_SPIMODE
/**
 * \brief Prepare to write GRAM data.
 */
static void ili9488_write_ram_prepare(void)
{
  4009e8:	b590      	push	{r4, r7, lr}
  4009ea:	b083      	sub	sp, #12
  4009ec:	af00      	add	r7, sp, #0
	volatile uint32_t i;
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  4009ee:	2006      	movs	r0, #6
  4009f0:	4b0a      	ldr	r3, [pc, #40]	; (400a1c <ili9488_write_ram_prepare+0x34>)
  4009f2:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  4009f4:	2300      	movs	r3, #0
  4009f6:	2203      	movs	r2, #3
  4009f8:	212c      	movs	r1, #44	; 0x2c
  4009fa:	4809      	ldr	r0, [pc, #36]	; (400a20 <ili9488_write_ram_prepare+0x38>)
  4009fc:	4c09      	ldr	r4, [pc, #36]	; (400a24 <ili9488_write_ram_prepare+0x3c>)
  4009fe:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400a00:	2300      	movs	r3, #0
  400a02:	607b      	str	r3, [r7, #4]
  400a04:	e002      	b.n	400a0c <ili9488_write_ram_prepare+0x24>
  400a06:	687b      	ldr	r3, [r7, #4]
  400a08:	3301      	adds	r3, #1
  400a0a:	607b      	str	r3, [r7, #4]
  400a0c:	687b      	ldr	r3, [r7, #4]
  400a0e:	2bfe      	cmp	r3, #254	; 0xfe
  400a10:	d9f9      	bls.n	400a06 <ili9488_write_ram_prepare+0x1e>
}
  400a12:	bf00      	nop
  400a14:	370c      	adds	r7, #12
  400a16:	46bd      	mov	sp, r7
  400a18:	bd90      	pop	{r4, r7, pc}
  400a1a:	bf00      	nop
  400a1c:	00402225 	.word	0x00402225
  400a20:	40008000 	.word	0x40008000
  400a24:	0040124d 	.word	0x0040124d

00400a28 <ili9488_write_ram_buffer>:
 *
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili9488_write_ram_buffer(const ili9488_color_t *p_ul_buf, uint32_t ul_size)
{
  400a28:	b580      	push	{r7, lr}
  400a2a:	b084      	sub	sp, #16
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	6078      	str	r0, [r7, #4]
  400a30:	6039      	str	r1, [r7, #0]
	volatile uint32_t i;
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400a32:	2006      	movs	r0, #6
  400a34:	4b09      	ldr	r3, [pc, #36]	; (400a5c <ili9488_write_ram_buffer+0x34>)
  400a36:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400a38:	683a      	ldr	r2, [r7, #0]
  400a3a:	6879      	ldr	r1, [r7, #4]
  400a3c:	4808      	ldr	r0, [pc, #32]	; (400a60 <ili9488_write_ram_buffer+0x38>)
  400a3e:	4b09      	ldr	r3, [pc, #36]	; (400a64 <ili9488_write_ram_buffer+0x3c>)
  400a40:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400a42:	2300      	movs	r3, #0
  400a44:	60fb      	str	r3, [r7, #12]
  400a46:	e002      	b.n	400a4e <ili9488_write_ram_buffer+0x26>
  400a48:	68fb      	ldr	r3, [r7, #12]
  400a4a:	3301      	adds	r3, #1
  400a4c:	60fb      	str	r3, [r7, #12]
  400a4e:	68fb      	ldr	r3, [r7, #12]
  400a50:	2bfe      	cmp	r3, #254	; 0xfe
  400a52:	d9f9      	bls.n	400a48 <ili9488_write_ram_buffer+0x20>
}
  400a54:	bf00      	nop
  400a56:	3710      	adds	r7, #16
  400a58:	46bd      	mov	sp, r7
  400a5a:	bd80      	pop	{r7, pc}
  400a5c:	004021f5 	.word	0x004021f5
  400a60:	40008000 	.word	0x40008000
  400a64:	00400891 	.word	0x00400891

00400a68 <ili9488_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 * \param size the number of parameters.
 */
static void ili9488_write_register(uint8_t uc_reg, const ili9488_color_t *us_data, uint32_t size)
{
  400a68:	b590      	push	{r4, r7, lr}
  400a6a:	b087      	sub	sp, #28
  400a6c:	af00      	add	r7, sp, #0
  400a6e:	4603      	mov	r3, r0
  400a70:	60b9      	str	r1, [r7, #8]
  400a72:	607a      	str	r2, [r7, #4]
  400a74:	73fb      	strb	r3, [r7, #15]
	volatile uint32_t i;

	/* Transfer cmd */
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400a76:	2006      	movs	r0, #6
  400a78:	4b14      	ldr	r3, [pc, #80]	; (400acc <ili9488_write_register+0x64>)
  400a7a:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400a7c:	7bfb      	ldrb	r3, [r7, #15]
  400a7e:	b299      	uxth	r1, r3
  400a80:	2300      	movs	r3, #0
  400a82:	2203      	movs	r2, #3
  400a84:	4812      	ldr	r0, [pc, #72]	; (400ad0 <ili9488_write_register+0x68>)
  400a86:	4c13      	ldr	r4, [pc, #76]	; (400ad4 <ili9488_write_register+0x6c>)
  400a88:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400a8a:	2300      	movs	r3, #0
  400a8c:	617b      	str	r3, [r7, #20]
  400a8e:	e002      	b.n	400a96 <ili9488_write_register+0x2e>
  400a90:	697b      	ldr	r3, [r7, #20]
  400a92:	3301      	adds	r3, #1
  400a94:	617b      	str	r3, [r7, #20]
  400a96:	697b      	ldr	r3, [r7, #20]
  400a98:	2bfe      	cmp	r3, #254	; 0xfe
  400a9a:	d9f9      	bls.n	400a90 <ili9488_write_register+0x28>

	if(size > 0) {
  400a9c:	687b      	ldr	r3, [r7, #4]
  400a9e:	2b00      	cmp	r3, #0
  400aa0:	d010      	beq.n	400ac4 <ili9488_write_register+0x5c>
		/* Transfer data */
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400aa2:	2006      	movs	r0, #6
  400aa4:	4b0c      	ldr	r3, [pc, #48]	; (400ad8 <ili9488_write_register+0x70>)
  400aa6:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400aa8:	687a      	ldr	r2, [r7, #4]
  400aaa:	68b9      	ldr	r1, [r7, #8]
  400aac:	4808      	ldr	r0, [pc, #32]	; (400ad0 <ili9488_write_register+0x68>)
  400aae:	4b0b      	ldr	r3, [pc, #44]	; (400adc <ili9488_write_register+0x74>)
  400ab0:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400ab2:	2300      	movs	r3, #0
  400ab4:	617b      	str	r3, [r7, #20]
  400ab6:	e002      	b.n	400abe <ili9488_write_register+0x56>
  400ab8:	697b      	ldr	r3, [r7, #20]
  400aba:	3301      	adds	r3, #1
  400abc:	617b      	str	r3, [r7, #20]
  400abe:	697b      	ldr	r3, [r7, #20]
  400ac0:	2b5e      	cmp	r3, #94	; 0x5e
  400ac2:	d9f9      	bls.n	400ab8 <ili9488_write_register+0x50>
	}
}
  400ac4:	bf00      	nop
  400ac6:	371c      	adds	r7, #28
  400ac8:	46bd      	mov	sp, r7
  400aca:	bd90      	pop	{r4, r7, pc}
  400acc:	00402225 	.word	0x00402225
  400ad0:	40008000 	.word	0x40008000
  400ad4:	0040124d 	.word	0x0040124d
  400ad8:	004021f5 	.word	0x004021f5
  400adc:	00400891 	.word	0x00400891

00400ae0 <ili9488_read_chipid>:
 * \brief Read chipid.
 *
 * \return chipid value.
 */
static uint32_t ili9488_read_chipid(void)
{
  400ae0:	b580      	push	{r7, lr}
  400ae2:	b084      	sub	sp, #16
  400ae4:	af00      	add	r7, sp, #0
	uint32_t i, chipid = 0;
  400ae6:	2300      	movs	r3, #0
  400ae8:	60bb      	str	r3, [r7, #8]
	volatile uint32_t j;
	ili9488_color_t chipidBuf, reg, param;

	reg = 0x81;
  400aea:	2381      	movs	r3, #129	; 0x81
  400aec:	70bb      	strb	r3, [r7, #2]
	param = 0x0;
  400aee:	2300      	movs	r3, #0
  400af0:	707b      	strb	r3, [r7, #1]
	for (i = 3; i > 0; i--) {
  400af2:	2303      	movs	r3, #3
  400af4:	60fb      	str	r3, [r7, #12]
  400af6:	e048      	b.n	400b8a <ili9488_read_chipid+0xaa>
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400af8:	1cbb      	adds	r3, r7, #2
  400afa:	2201      	movs	r2, #1
  400afc:	4619      	mov	r1, r3
  400afe:	20fb      	movs	r0, #251	; 0xfb
  400b00:	4b26      	ldr	r3, [pc, #152]	; (400b9c <ili9488_read_chipid+0xbc>)
  400b02:	4798      	blx	r3
		reg++;
  400b04:	78bb      	ldrb	r3, [r7, #2]
  400b06:	3301      	adds	r3, #1
  400b08:	b2db      	uxtb	r3, r3
  400b0a:	70bb      	strb	r3, [r7, #2]
		for(j = 0; j < 0xFF; j++);
  400b0c:	2300      	movs	r3, #0
  400b0e:	607b      	str	r3, [r7, #4]
  400b10:	e002      	b.n	400b18 <ili9488_read_chipid+0x38>
  400b12:	687b      	ldr	r3, [r7, #4]
  400b14:	3301      	adds	r3, #1
  400b16:	607b      	str	r3, [r7, #4]
  400b18:	687b      	ldr	r3, [r7, #4]
  400b1a:	2bfe      	cmp	r3, #254	; 0xfe
  400b1c:	d9f9      	bls.n	400b12 <ili9488_read_chipid+0x32>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  400b1e:	2200      	movs	r2, #0
  400b20:	2100      	movs	r1, #0
  400b22:	20d3      	movs	r0, #211	; 0xd3
  400b24:	4b1d      	ldr	r3, [pc, #116]	; (400b9c <ili9488_read_chipid+0xbc>)
  400b26:	4798      	blx	r3
		{
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  400b28:	2006      	movs	r0, #6
  400b2a:	4b1d      	ldr	r3, [pc, #116]	; (400ba0 <ili9488_read_chipid+0xc0>)
  400b2c:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  400b2e:	1cfb      	adds	r3, r7, #3
  400b30:	2201      	movs	r2, #1
  400b32:	4619      	mov	r1, r3
  400b34:	481b      	ldr	r0, [pc, #108]	; (400ba4 <ili9488_read_chipid+0xc4>)
  400b36:	4b1c      	ldr	r3, [pc, #112]	; (400ba8 <ili9488_read_chipid+0xc8>)
  400b38:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  400b3a:	2300      	movs	r3, #0
  400b3c:	607b      	str	r3, [r7, #4]
  400b3e:	e002      	b.n	400b46 <ili9488_read_chipid+0x66>
  400b40:	687b      	ldr	r3, [r7, #4]
  400b42:	3301      	adds	r3, #1
  400b44:	607b      	str	r3, [r7, #4]
  400b46:	687b      	ldr	r3, [r7, #4]
  400b48:	2bfe      	cmp	r3, #254	; 0xfe
  400b4a:	d9f9      	bls.n	400b40 <ili9488_read_chipid+0x60>
		}
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  400b4c:	78fb      	ldrb	r3, [r7, #3]
  400b4e:	461a      	mov	r2, r3
  400b50:	68fb      	ldr	r3, [r7, #12]
  400b52:	3b01      	subs	r3, #1
  400b54:	00db      	lsls	r3, r3, #3
  400b56:	fa02 f303 	lsl.w	r3, r2, r3
  400b5a:	461a      	mov	r2, r3
  400b5c:	68bb      	ldr	r3, [r7, #8]
  400b5e:	4313      	orrs	r3, r2
  400b60:	60bb      	str	r3, [r7, #8]
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  400b62:	1c7b      	adds	r3, r7, #1
  400b64:	2201      	movs	r2, #1
  400b66:	4619      	mov	r1, r3
  400b68:	20fb      	movs	r0, #251	; 0xfb
  400b6a:	4b0c      	ldr	r3, [pc, #48]	; (400b9c <ili9488_read_chipid+0xbc>)
  400b6c:	4798      	blx	r3
		for(j = 0; j < 0xFFF; j++);
  400b6e:	2300      	movs	r3, #0
  400b70:	607b      	str	r3, [r7, #4]
  400b72:	e002      	b.n	400b7a <ili9488_read_chipid+0x9a>
  400b74:	687b      	ldr	r3, [r7, #4]
  400b76:	3301      	adds	r3, #1
  400b78:	607b      	str	r3, [r7, #4]
  400b7a:	687b      	ldr	r3, [r7, #4]
  400b7c:	f640 72fe 	movw	r2, #4094	; 0xffe
  400b80:	4293      	cmp	r3, r2
  400b82:	d9f7      	bls.n	400b74 <ili9488_read_chipid+0x94>
	for (i = 3; i > 0; i--) {
  400b84:	68fb      	ldr	r3, [r7, #12]
  400b86:	3b01      	subs	r3, #1
  400b88:	60fb      	str	r3, [r7, #12]
  400b8a:	68fb      	ldr	r3, [r7, #12]
  400b8c:	2b00      	cmp	r3, #0
  400b8e:	d1b3      	bne.n	400af8 <ili9488_read_chipid+0x18>
	}
	return chipid;
  400b90:	68bb      	ldr	r3, [r7, #8]
}
  400b92:	4618      	mov	r0, r3
  400b94:	3710      	adds	r7, #16
  400b96:	46bd      	mov	sp, r7
  400b98:	bd80      	pop	{r7, pc}
  400b9a:	bf00      	nop
  400b9c:	00400a69 	.word	0x00400a69
  400ba0:	004021f5 	.word	0x004021f5
  400ba4:	40008000 	.word	0x40008000
  400ba8:	00400905 	.word	0x00400905

00400bac <ili9488_delay>:

/**
 * \brief Delay function.
 */
void ili9488_delay(uint32_t ul_ms)
{
  400bac:	b480      	push	{r7}
  400bae:	b085      	sub	sp, #20
  400bb0:	af00      	add	r7, sp, #0
  400bb2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  400bb4:	2300      	movs	r3, #0
  400bb6:	60fb      	str	r3, [r7, #12]
  400bb8:	e00c      	b.n	400bd4 <ili9488_delay+0x28>
		for(i = 0; i < 100000; i++) {
  400bba:	2300      	movs	r3, #0
  400bbc:	60fb      	str	r3, [r7, #12]
  400bbe:	e002      	b.n	400bc6 <ili9488_delay+0x1a>
  400bc0:	68fb      	ldr	r3, [r7, #12]
  400bc2:	3301      	adds	r3, #1
  400bc4:	60fb      	str	r3, [r7, #12]
  400bc6:	68fb      	ldr	r3, [r7, #12]
  400bc8:	4a07      	ldr	r2, [pc, #28]	; (400be8 <ili9488_delay+0x3c>)
  400bca:	4293      	cmp	r3, r2
  400bcc:	d9f8      	bls.n	400bc0 <ili9488_delay+0x14>
	for(i = 0; i < ul_ms; i++) {
  400bce:	68fb      	ldr	r3, [r7, #12]
  400bd0:	3301      	adds	r3, #1
  400bd2:	60fb      	str	r3, [r7, #12]
  400bd4:	68fa      	ldr	r2, [r7, #12]
  400bd6:	687b      	ldr	r3, [r7, #4]
  400bd8:	429a      	cmp	r2, r3
  400bda:	d3ee      	bcc.n	400bba <ili9488_delay+0xe>
		}
	}
}
  400bdc:	bf00      	nop
  400bde:	3714      	adds	r7, #20
  400be0:	46bd      	mov	sp, r7
  400be2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400be6:	4770      	bx	lr
  400be8:	0001869f 	.word	0x0001869f

00400bec <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400bec:	b480      	push	{r7}
  400bee:	b087      	sub	sp, #28
  400bf0:	af00      	add	r7, sp, #0
  400bf2:	60f8      	str	r0, [r7, #12]
  400bf4:	60b9      	str	r1, [r7, #8]
  400bf6:	607a      	str	r2, [r7, #4]
  400bf8:	603b      	str	r3, [r7, #0]
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400bfa:	68fb      	ldr	r3, [r7, #12]
  400bfc:	681b      	ldr	r3, [r3, #0]
  400bfe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  400c02:	d303      	bcc.n	400c0c <ili9488_check_box_coordinates+0x20>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400c04:	68fb      	ldr	r3, [r7, #12]
  400c06:	f240 123f 	movw	r2, #319	; 0x13f
  400c0a:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400c0c:	687b      	ldr	r3, [r7, #4]
  400c0e:	681b      	ldr	r3, [r3, #0]
  400c10:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  400c14:	d303      	bcc.n	400c1e <ili9488_check_box_coordinates+0x32>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400c16:	687b      	ldr	r3, [r7, #4]
  400c18:	f240 123f 	movw	r2, #319	; 0x13f
  400c1c:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400c1e:	68bb      	ldr	r3, [r7, #8]
  400c20:	681b      	ldr	r3, [r3, #0]
  400c22:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
  400c26:	d303      	bcc.n	400c30 <ili9488_check_box_coordinates+0x44>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400c28:	68bb      	ldr	r3, [r7, #8]
  400c2a:	f240 12df 	movw	r2, #479	; 0x1df
  400c2e:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400c30:	683b      	ldr	r3, [r7, #0]
  400c32:	681b      	ldr	r3, [r3, #0]
  400c34:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
  400c38:	d303      	bcc.n	400c42 <ili9488_check_box_coordinates+0x56>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400c3a:	683b      	ldr	r3, [r7, #0]
  400c3c:	f240 12df 	movw	r2, #479	; 0x1df
  400c40:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400c42:	68fb      	ldr	r3, [r7, #12]
  400c44:	681a      	ldr	r2, [r3, #0]
  400c46:	687b      	ldr	r3, [r7, #4]
  400c48:	681b      	ldr	r3, [r3, #0]
  400c4a:	429a      	cmp	r2, r3
  400c4c:	d909      	bls.n	400c62 <ili9488_check_box_coordinates+0x76>
		dw = *p_ul_x1;
  400c4e:	68fb      	ldr	r3, [r7, #12]
  400c50:	681b      	ldr	r3, [r3, #0]
  400c52:	617b      	str	r3, [r7, #20]
		*p_ul_x1 = *p_ul_x2;
  400c54:	687b      	ldr	r3, [r7, #4]
  400c56:	681a      	ldr	r2, [r3, #0]
  400c58:	68fb      	ldr	r3, [r7, #12]
  400c5a:	601a      	str	r2, [r3, #0]
		*p_ul_x2 = dw;
  400c5c:	687b      	ldr	r3, [r7, #4]
  400c5e:	697a      	ldr	r2, [r7, #20]
  400c60:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400c62:	68bb      	ldr	r3, [r7, #8]
  400c64:	681a      	ldr	r2, [r3, #0]
  400c66:	683b      	ldr	r3, [r7, #0]
  400c68:	681b      	ldr	r3, [r3, #0]
  400c6a:	429a      	cmp	r2, r3
  400c6c:	d909      	bls.n	400c82 <ili9488_check_box_coordinates+0x96>
		dw = *p_ul_y1;
  400c6e:	68bb      	ldr	r3, [r7, #8]
  400c70:	681b      	ldr	r3, [r3, #0]
  400c72:	617b      	str	r3, [r7, #20]
		*p_ul_y1 = *p_ul_y2;
  400c74:	683b      	ldr	r3, [r7, #0]
  400c76:	681a      	ldr	r2, [r3, #0]
  400c78:	68bb      	ldr	r3, [r7, #8]
  400c7a:	601a      	str	r2, [r3, #0]
		*p_ul_y2 = dw;
  400c7c:	683b      	ldr	r3, [r7, #0]
  400c7e:	697a      	ldr	r2, [r7, #20]
  400c80:	601a      	str	r2, [r3, #0]
	}
}
  400c82:	bf00      	nop
  400c84:	371c      	adds	r7, #28
  400c86:	46bd      	mov	sp, r7
  400c88:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c8c:	4770      	bx	lr
	...

00400c90 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400c90:	b580      	push	{r7, lr}
  400c92:	b084      	sub	sp, #16
  400c94:	af00      	add	r7, sp, #0
  400c96:	4603      	mov	r3, r0
  400c98:	71fb      	strb	r3, [r7, #7]
	ili9488_color_t value;
	if(direction) {
  400c9a:	79fb      	ldrb	r3, [r7, #7]
  400c9c:	2b00      	cmp	r3, #0
  400c9e:	d002      	beq.n	400ca6 <ili9488_set_display_direction+0x16>
		value = 0xE8;
  400ca0:	23e8      	movs	r3, #232	; 0xe8
  400ca2:	73fb      	strb	r3, [r7, #15]
  400ca4:	e001      	b.n	400caa <ili9488_set_display_direction+0x1a>
	} else {
		value = 0x48;
  400ca6:	2348      	movs	r3, #72	; 0x48
  400ca8:	73fb      	strb	r3, [r7, #15]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400caa:	f107 030f 	add.w	r3, r7, #15
  400cae:	2201      	movs	r2, #1
  400cb0:	4619      	mov	r1, r3
  400cb2:	2036      	movs	r0, #54	; 0x36
  400cb4:	4b02      	ldr	r3, [pc, #8]	; (400cc0 <ili9488_set_display_direction+0x30>)
  400cb6:	4798      	blx	r3
}
  400cb8:	bf00      	nop
  400cba:	3710      	adds	r7, #16
  400cbc:	46bd      	mov	sp, r7
  400cbe:	bd80      	pop	{r7, pc}
  400cc0:	00400a69 	.word	0x00400a69

00400cc4 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400cc4:	b590      	push	{r4, r7, lr}
  400cc6:	b087      	sub	sp, #28
  400cc8:	af00      	add	r7, sp, #0
  400cca:	4604      	mov	r4, r0
  400ccc:	4608      	mov	r0, r1
  400cce:	4611      	mov	r1, r2
  400cd0:	461a      	mov	r2, r3
  400cd2:	4623      	mov	r3, r4
  400cd4:	80fb      	strh	r3, [r7, #6]
  400cd6:	4603      	mov	r3, r0
  400cd8:	80bb      	strh	r3, [r7, #4]
  400cda:	460b      	mov	r3, r1
  400cdc:	807b      	strh	r3, [r7, #2]
  400cde:	4613      	mov	r3, r2
  400ce0:	803b      	strh	r3, [r7, #0]
	uint16_t col_start, col_end, row_start, row_end;
	uint32_t cnt = 0;
  400ce2:	2300      	movs	r3, #0
  400ce4:	617b      	str	r3, [r7, #20]
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);
  400ce6:	2304      	movs	r3, #4
  400ce8:	617b      	str	r3, [r7, #20]

	col_start  =  x ;
  400cea:	88fb      	ldrh	r3, [r7, #6]
  400cec:	827b      	strh	r3, [r7, #18]
	col_end    =  width + x - 1;
  400cee:	887a      	ldrh	r2, [r7, #2]
  400cf0:	88fb      	ldrh	r3, [r7, #6]
  400cf2:	4413      	add	r3, r2
  400cf4:	b29b      	uxth	r3, r3
  400cf6:	3b01      	subs	r3, #1
  400cf8:	b29b      	uxth	r3, r3
  400cfa:	823b      	strh	r3, [r7, #16]

	row_start = y ;
  400cfc:	88bb      	ldrh	r3, [r7, #4]
  400cfe:	81fb      	strh	r3, [r7, #14]
	row_end   = height + y - 1;
  400d00:	883a      	ldrh	r2, [r7, #0]
  400d02:	88bb      	ldrh	r3, [r7, #4]
  400d04:	4413      	add	r3, r2
  400d06:	b29b      	uxth	r3, r3
  400d08:	3b01      	subs	r3, #1
  400d0a:	b29b      	uxth	r3, r3
  400d0c:	81bb      	strh	r3, [r7, #12]

	buf[0] = get_8b_to_16b(col_start);
  400d0e:	f107 0312 	add.w	r3, r7, #18
  400d12:	785b      	ldrb	r3, [r3, #1]
  400d14:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(col_start);
  400d16:	f107 0312 	add.w	r3, r7, #18
  400d1a:	781b      	ldrb	r3, [r3, #0]
  400d1c:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(col_end);
  400d1e:	f107 0310 	add.w	r3, r7, #16
  400d22:	785b      	ldrb	r3, [r3, #1]
  400d24:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(col_end);
  400d26:	f107 0310 	add.w	r3, r7, #16
  400d2a:	781b      	ldrb	r3, [r3, #0]
  400d2c:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400d2e:	f107 0308 	add.w	r3, r7, #8
  400d32:	697a      	ldr	r2, [r7, #20]
  400d34:	4619      	mov	r1, r3
  400d36:	202a      	movs	r0, #42	; 0x2a
  400d38:	4b13      	ldr	r3, [pc, #76]	; (400d88 <ili9488_set_window+0xc4>)
  400d3a:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d3c:	2200      	movs	r2, #0
  400d3e:	2100      	movs	r1, #0
  400d40:	2000      	movs	r0, #0
  400d42:	4b11      	ldr	r3, [pc, #68]	; (400d88 <ili9488_set_window+0xc4>)
  400d44:	4798      	blx	r3

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400d46:	f107 030e 	add.w	r3, r7, #14
  400d4a:	785b      	ldrb	r3, [r3, #1]
  400d4c:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(row_start);
  400d4e:	f107 030e 	add.w	r3, r7, #14
  400d52:	781b      	ldrb	r3, [r3, #0]
  400d54:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(row_end);
  400d56:	f107 030c 	add.w	r3, r7, #12
  400d5a:	785b      	ldrb	r3, [r3, #1]
  400d5c:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(row_end);
  400d5e:	f107 030c 	add.w	r3, r7, #12
  400d62:	781b      	ldrb	r3, [r3, #0]
  400d64:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400d66:	f107 0308 	add.w	r3, r7, #8
  400d6a:	697a      	ldr	r2, [r7, #20]
  400d6c:	4619      	mov	r1, r3
  400d6e:	202b      	movs	r0, #43	; 0x2b
  400d70:	4b05      	ldr	r3, [pc, #20]	; (400d88 <ili9488_set_window+0xc4>)
  400d72:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d74:	2200      	movs	r2, #0
  400d76:	2100      	movs	r1, #0
  400d78:	2000      	movs	r0, #0
  400d7a:	4b03      	ldr	r3, [pc, #12]	; (400d88 <ili9488_set_window+0xc4>)
  400d7c:	4798      	blx	r3
}
  400d7e:	bf00      	nop
  400d80:	371c      	adds	r7, #28
  400d82:	46bd      	mov	sp, r7
  400d84:	bd90      	pop	{r4, r7, pc}
  400d86:	bf00      	nop
  400d88:	00400a69 	.word	0x00400a69

00400d8c <ili9488_init>:
 * \param p_opt pointer to ILI9488 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9488_init(struct ili9488_opt_t *p_opt)
{
  400d8c:	b590      	push	{r4, r7, lr}
  400d8e:	b089      	sub	sp, #36	; 0x24
  400d90:	af02      	add	r7, sp, #8
  400d92:	6078      	str	r0, [r7, #4]
			| SMC_MODE_DBW_16_BIT
			| SMC_MODE_EXNW_MODE_DISABLED
			| SMC_MODE_TDF_CYCLES(0xF));
#endif
#ifdef ILI9488_SPIMODE
	struct spi_device ILI9488_SPI_DEVICE = {
  400d94:	2303      	movs	r3, #3
  400d96:	60fb      	str	r3, [r7, #12]
		// Board specific chip select configuration
		.id = BOARD_ILI9488_SPI_NPCS
	};

	/* Init, select and configure the chip */
	spi_master_init(BOARD_ILI9488_SPI);
  400d98:	4843      	ldr	r0, [pc, #268]	; (400ea8 <ili9488_init+0x11c>)
  400d9a:	4b44      	ldr	r3, [pc, #272]	; (400eac <ili9488_init+0x120>)
  400d9c:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  400d9e:	f107 010c 	add.w	r1, r7, #12
  400da2:	2300      	movs	r3, #0
  400da4:	9300      	str	r3, [sp, #0]
  400da6:	4b42      	ldr	r3, [pc, #264]	; (400eb0 <ili9488_init+0x124>)
  400da8:	2203      	movs	r2, #3
  400daa:	483f      	ldr	r0, [pc, #252]	; (400ea8 <ili9488_init+0x11c>)
  400dac:	4c41      	ldr	r4, [pc, #260]	; (400eb4 <ili9488_init+0x128>)
  400dae:	47a0      	blx	r4
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400db0:	2200      	movs	r2, #0
  400db2:	2103      	movs	r1, #3
  400db4:	483c      	ldr	r0, [pc, #240]	; (400ea8 <ili9488_init+0x11c>)
  400db6:	4b40      	ldr	r3, [pc, #256]	; (400eb8 <ili9488_init+0x12c>)
  400db8:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  400dba:	f107 030c 	add.w	r3, r7, #12
  400dbe:	4619      	mov	r1, r3
  400dc0:	4839      	ldr	r0, [pc, #228]	; (400ea8 <ili9488_init+0x11c>)
  400dc2:	4b3e      	ldr	r3, [pc, #248]	; (400ebc <ili9488_init+0x130>)
  400dc4:	4798      	blx	r3

	/* Enable the SPI peripheral */
	spi_enable(BOARD_ILI9488_SPI);
  400dc6:	4838      	ldr	r0, [pc, #224]	; (400ea8 <ili9488_init+0x11c>)
  400dc8:	4b3d      	ldr	r3, [pc, #244]	; (400ec0 <ili9488_init+0x134>)
  400dca:	4798      	blx	r3
	spi_enable_interrupt(BOARD_ILI9488_SPI, SPI_IER_RDRF);
  400dcc:	2101      	movs	r1, #1
  400dce:	4836      	ldr	r0, [pc, #216]	; (400ea8 <ili9488_init+0x11c>)
  400dd0:	4b3c      	ldr	r3, [pc, #240]	; (400ec4 <ili9488_init+0x138>)
  400dd2:	4798      	blx	r3
#endif

	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400dd4:	2200      	movs	r2, #0
  400dd6:	2100      	movs	r1, #0
  400dd8:	2001      	movs	r0, #1
  400dda:	4b3b      	ldr	r3, [pc, #236]	; (400ec8 <ili9488_init+0x13c>)
  400ddc:	4798      	blx	r3
	ili9488_delay(200);
  400dde:	20c8      	movs	r0, #200	; 0xc8
  400de0:	4b3a      	ldr	r3, [pc, #232]	; (400ecc <ili9488_init+0x140>)
  400de2:	4798      	blx	r3

	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400de4:	2200      	movs	r2, #0
  400de6:	2100      	movs	r1, #0
  400de8:	2011      	movs	r0, #17
  400dea:	4b37      	ldr	r3, [pc, #220]	; (400ec8 <ili9488_init+0x13c>)
  400dec:	4798      	blx	r3
	ili9488_delay(200);
  400dee:	20c8      	movs	r0, #200	; 0xc8
  400df0:	4b36      	ldr	r3, [pc, #216]	; (400ecc <ili9488_init+0x140>)
  400df2:	4798      	blx	r3

	/** read chipid */
	chipid = ili9488_read_chipid();
  400df4:	4b36      	ldr	r3, [pc, #216]	; (400ed0 <ili9488_init+0x144>)
  400df6:	4798      	blx	r3
  400df8:	6178      	str	r0, [r7, #20]
	if (chipid != ILI9488_DEVICE_CODE) {
  400dfa:	697b      	ldr	r3, [r7, #20]
  400dfc:	f249 4288 	movw	r2, #38024	; 0x9488
  400e00:	4293      	cmp	r3, r2
  400e02:	d001      	beq.n	400e08 <ili9488_init+0x7c>
		return 1;
  400e04:	2301      	movs	r3, #1
  400e06:	e04a      	b.n	400e9e <ili9488_init+0x112>
	}

	/** make it tRGB and reverse the column order */
	param = 0x48;
  400e08:	2348      	movs	r3, #72	; 0x48
  400e0a:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  400e0c:	f107 0313 	add.w	r3, r7, #19
  400e10:	2201      	movs	r2, #1
  400e12:	4619      	mov	r1, r3
  400e14:	2036      	movs	r0, #54	; 0x36
  400e16:	4b2c      	ldr	r3, [pc, #176]	; (400ec8 <ili9488_init+0x13c>)
  400e18:	4798      	blx	r3
	ili9488_delay(100);
  400e1a:	2064      	movs	r0, #100	; 0x64
  400e1c:	4b2b      	ldr	r3, [pc, #172]	; (400ecc <ili9488_init+0x140>)
  400e1e:	4798      	blx	r3

	param = 0x04;
  400e20:	2304      	movs	r3, #4
  400e22:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  400e24:	f107 0313 	add.w	r3, r7, #19
  400e28:	2201      	movs	r2, #1
  400e2a:	4619      	mov	r1, r3
  400e2c:	20cf      	movs	r0, #207	; 0xcf
  400e2e:	4b26      	ldr	r3, [pc, #152]	; (400ec8 <ili9488_init+0x13c>)
  400e30:	4798      	blx	r3
	ili9488_delay(100);
  400e32:	2064      	movs	r0, #100	; 0x64
  400e34:	4b25      	ldr	r3, [pc, #148]	; (400ecc <ili9488_init+0x140>)
  400e36:	4798      	blx	r3
	ili9488_delay(100);
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
	ili9488_delay(100);
#endif
#ifdef ILI9488_SPIMODE
	param = 0x06;
  400e38:	2306      	movs	r3, #6
  400e3a:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  400e3c:	f107 0313 	add.w	r3, r7, #19
  400e40:	2201      	movs	r2, #1
  400e42:	4619      	mov	r1, r3
  400e44:	203a      	movs	r0, #58	; 0x3a
  400e46:	4b20      	ldr	r3, [pc, #128]	; (400ec8 <ili9488_init+0x13c>)
  400e48:	4798      	blx	r3
	ili9488_delay(100);
  400e4a:	2064      	movs	r0, #100	; 0x64
  400e4c:	4b1f      	ldr	r3, [pc, #124]	; (400ecc <ili9488_init+0x140>)
  400e4e:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  400e50:	2200      	movs	r2, #0
  400e52:	2100      	movs	r1, #0
  400e54:	2013      	movs	r0, #19
  400e56:	4b1c      	ldr	r3, [pc, #112]	; (400ec8 <ili9488_init+0x13c>)
  400e58:	4798      	blx	r3
	ili9488_delay(100);
  400e5a:	2064      	movs	r0, #100	; 0x64
  400e5c:	4b1b      	ldr	r3, [pc, #108]	; (400ecc <ili9488_init+0x140>)
  400e5e:	4798      	blx	r3
#endif

	ili9488_display_on();
  400e60:	4b1c      	ldr	r3, [pc, #112]	; (400ed4 <ili9488_init+0x148>)
  400e62:	4798      	blx	r3
	ili9488_delay(100);
  400e64:	2064      	movs	r0, #100	; 0x64
  400e66:	4b19      	ldr	r3, [pc, #100]	; (400ecc <ili9488_init+0x140>)
  400e68:	4798      	blx	r3

	ili9488_set_display_direction(LANDSCAPE);
  400e6a:	2000      	movs	r0, #0
  400e6c:	4b1a      	ldr	r3, [pc, #104]	; (400ed8 <ili9488_init+0x14c>)
  400e6e:	4798      	blx	r3
	ili9488_delay(100);
  400e70:	2064      	movs	r0, #100	; 0x64
  400e72:	4b16      	ldr	r3, [pc, #88]	; (400ecc <ili9488_init+0x140>)
  400e74:	4798      	blx	r3

	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400e76:	687b      	ldr	r3, [r7, #4]
  400e78:	681b      	ldr	r3, [r3, #0]
  400e7a:	b29a      	uxth	r2, r3
  400e7c:	687b      	ldr	r3, [r7, #4]
  400e7e:	685b      	ldr	r3, [r3, #4]
  400e80:	b29b      	uxth	r3, r3
  400e82:	2100      	movs	r1, #0
  400e84:	2000      	movs	r0, #0
  400e86:	4c15      	ldr	r4, [pc, #84]	; (400edc <ili9488_init+0x150>)
  400e88:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  400e8a:	687b      	ldr	r3, [r7, #4]
  400e8c:	689b      	ldr	r3, [r3, #8]
  400e8e:	4618      	mov	r0, r3
  400e90:	4b13      	ldr	r3, [pc, #76]	; (400ee0 <ili9488_init+0x154>)
  400e92:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  400e94:	2100      	movs	r1, #0
  400e96:	2000      	movs	r0, #0
  400e98:	4b12      	ldr	r3, [pc, #72]	; (400ee4 <ili9488_init+0x158>)
  400e9a:	4798      	blx	r3

	return 0;
  400e9c:	2300      	movs	r3, #0
}
  400e9e:	4618      	mov	r0, r3
  400ea0:	371c      	adds	r7, #28
  400ea2:	46bd      	mov	sp, r7
  400ea4:	bd90      	pop	{r4, r7, pc}
  400ea6:	bf00      	nop
  400ea8:	40008000 	.word	0x40008000
  400eac:	00400715 	.word	0x00400715
  400eb0:	01312d00 	.word	0x01312d00
  400eb4:	00400785 	.word	0x00400785
  400eb8:	0040136d 	.word	0x0040136d
  400ebc:	00400839 	.word	0x00400839
  400ec0:	004009b1 	.word	0x004009b1
  400ec4:	004009cb 	.word	0x004009cb
  400ec8:	00400a69 	.word	0x00400a69
  400ecc:	00400bad 	.word	0x00400bad
  400ed0:	00400ae1 	.word	0x00400ae1
  400ed4:	00400ee9 	.word	0x00400ee9
  400ed8:	00400c91 	.word	0x00400c91
  400edc:	00400cc5 	.word	0x00400cc5
  400ee0:	00400f01 	.word	0x00400f01
  400ee4:	00400f55 	.word	0x00400f55

00400ee8 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400ee8:	b580      	push	{r7, lr}
  400eea:	af00      	add	r7, sp, #0
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400eec:	2200      	movs	r2, #0
  400eee:	2100      	movs	r1, #0
  400ef0:	2029      	movs	r0, #41	; 0x29
  400ef2:	4b02      	ldr	r3, [pc, #8]	; (400efc <ili9488_display_on+0x14>)
  400ef4:	4798      	blx	r3
}
  400ef6:	bf00      	nop
  400ef8:	bd80      	pop	{r7, pc}
  400efa:	bf00      	nop
  400efc:	00400a69 	.word	0x00400a69

00400f00 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400f00:	b480      	push	{r7}
  400f02:	b085      	sub	sp, #20
  400f04:	af00      	add	r7, sp, #0
  400f06:	6078      	str	r0, [r7, #4]
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400f08:	2300      	movs	r3, #0
  400f0a:	60fb      	str	r3, [r7, #12]
  400f0c:	e016      	b.n	400f3c <ili9488_set_foreground_color+0x3c>
		g_ul_pixel_cache[i++] = ul_color>>16;
  400f0e:	68fb      	ldr	r3, [r7, #12]
  400f10:	1c5a      	adds	r2, r3, #1
  400f12:	60fa      	str	r2, [r7, #12]
  400f14:	687a      	ldr	r2, [r7, #4]
  400f16:	0c12      	lsrs	r2, r2, #16
  400f18:	b2d1      	uxtb	r1, r2
  400f1a:	4a0d      	ldr	r2, [pc, #52]	; (400f50 <ili9488_set_foreground_color+0x50>)
  400f1c:	54d1      	strb	r1, [r2, r3]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400f1e:	68fb      	ldr	r3, [r7, #12]
  400f20:	1c5a      	adds	r2, r3, #1
  400f22:	60fa      	str	r2, [r7, #12]
  400f24:	687a      	ldr	r2, [r7, #4]
  400f26:	0a12      	lsrs	r2, r2, #8
  400f28:	b2d1      	uxtb	r1, r2
  400f2a:	4a09      	ldr	r2, [pc, #36]	; (400f50 <ili9488_set_foreground_color+0x50>)
  400f2c:	54d1      	strb	r1, [r2, r3]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400f2e:	68fb      	ldr	r3, [r7, #12]
  400f30:	1c5a      	adds	r2, r3, #1
  400f32:	60fa      	str	r2, [r7, #12]
  400f34:	687a      	ldr	r2, [r7, #4]
  400f36:	b2d1      	uxtb	r1, r2
  400f38:	4a05      	ldr	r2, [pc, #20]	; (400f50 <ili9488_set_foreground_color+0x50>)
  400f3a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400f3c:	68fb      	ldr	r3, [r7, #12]
  400f3e:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
  400f42:	d3e4      	bcc.n	400f0e <ili9488_set_foreground_color+0xe>
	}
#endif
}
  400f44:	bf00      	nop
  400f46:	3714      	adds	r7, #20
  400f48:	46bd      	mov	sp, r7
  400f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4e:	4770      	bx	lr
  400f50:	20400458 	.word	0x20400458

00400f54 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400f54:	b580      	push	{r7, lr}
  400f56:	b084      	sub	sp, #16
  400f58:	af00      	add	r7, sp, #0
  400f5a:	4603      	mov	r3, r0
  400f5c:	460a      	mov	r2, r1
  400f5e:	80fb      	strh	r3, [r7, #6]
  400f60:	4613      	mov	r3, r2
  400f62:	80bb      	strh	r3, [r7, #4]
	/* Set Horizontal Address Start Position */
	uint32_t cnt = 0;
  400f64:	2300      	movs	r3, #0
  400f66:	60fb      	str	r3, [r7, #12]

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);
  400f68:	2304      	movs	r3, #4
  400f6a:	60fb      	str	r3, [r7, #12]

	buf[0] = get_8b_to_16b(x);
  400f6c:	1dbb      	adds	r3, r7, #6
  400f6e:	785b      	ldrb	r3, [r3, #1]
  400f70:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(x);
  400f72:	1dbb      	adds	r3, r7, #6
  400f74:	781b      	ldrb	r3, [r3, #0]
  400f76:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(x);
  400f78:	1dbb      	adds	r3, r7, #6
  400f7a:	785b      	ldrb	r3, [r3, #1]
  400f7c:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(x);
  400f7e:	1dbb      	adds	r3, r7, #6
  400f80:	781b      	ldrb	r3, [r3, #0]
  400f82:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400f84:	f107 0308 	add.w	r3, r7, #8
  400f88:	68fa      	ldr	r2, [r7, #12]
  400f8a:	4619      	mov	r1, r3
  400f8c:	202a      	movs	r0, #42	; 0x2a
  400f8e:	4b11      	ldr	r3, [pc, #68]	; (400fd4 <ili9488_set_cursor_position+0x80>)
  400f90:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400f92:	2200      	movs	r2, #0
  400f94:	2100      	movs	r1, #0
  400f96:	2000      	movs	r0, #0
  400f98:	4b0e      	ldr	r3, [pc, #56]	; (400fd4 <ili9488_set_cursor_position+0x80>)
  400f9a:	4798      	blx	r3


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400f9c:	1d3b      	adds	r3, r7, #4
  400f9e:	785b      	ldrb	r3, [r3, #1]
  400fa0:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(y);
  400fa2:	1d3b      	adds	r3, r7, #4
  400fa4:	781b      	ldrb	r3, [r3, #0]
  400fa6:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(y);
  400fa8:	1d3b      	adds	r3, r7, #4
  400faa:	785b      	ldrb	r3, [r3, #1]
  400fac:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(y);
  400fae:	1d3b      	adds	r3, r7, #4
  400fb0:	781b      	ldrb	r3, [r3, #0]
  400fb2:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400fb4:	f107 0308 	add.w	r3, r7, #8
  400fb8:	68fa      	ldr	r2, [r7, #12]
  400fba:	4619      	mov	r1, r3
  400fbc:	202b      	movs	r0, #43	; 0x2b
  400fbe:	4b05      	ldr	r3, [pc, #20]	; (400fd4 <ili9488_set_cursor_position+0x80>)
  400fc0:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400fc2:	2200      	movs	r2, #0
  400fc4:	2100      	movs	r1, #0
  400fc6:	2000      	movs	r0, #0
  400fc8:	4b02      	ldr	r3, [pc, #8]	; (400fd4 <ili9488_set_cursor_position+0x80>)
  400fca:	4798      	blx	r3
}
  400fcc:	bf00      	nop
  400fce:	3710      	adds	r7, #16
  400fd0:	46bd      	mov	sp, r7
  400fd2:	bd80      	pop	{r7, pc}
  400fd4:	00400a69 	.word	0x00400a69

00400fd8 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  400fd8:	b590      	push	{r4, r7, lr}
  400fda:	b087      	sub	sp, #28
  400fdc:	af00      	add	r7, sp, #0
  400fde:	60f8      	str	r0, [r7, #12]
  400fe0:	60b9      	str	r1, [r7, #8]
  400fe2:	607a      	str	r2, [r7, #4]
  400fe4:	603b      	str	r3, [r7, #0]
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  400fe6:	463b      	mov	r3, r7
  400fe8:	1d3a      	adds	r2, r7, #4
  400fea:	f107 0108 	add.w	r1, r7, #8
  400fee:	f107 000c 	add.w	r0, r7, #12
  400ff2:	4c2a      	ldr	r4, [pc, #168]	; (40109c <ili9488_draw_filled_rectangle+0xc4>)
  400ff4:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	b298      	uxth	r0, r3
  400ffa:	68bb      	ldr	r3, [r7, #8]
  400ffc:	b299      	uxth	r1, r3
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	b29a      	uxth	r2, r3
  401002:	68fb      	ldr	r3, [r7, #12]
  401004:	b29b      	uxth	r3, r3
  401006:	1ad3      	subs	r3, r2, r3
  401008:	b29b      	uxth	r3, r3
  40100a:	3301      	adds	r3, #1
  40100c:	b29c      	uxth	r4, r3
  40100e:	683b      	ldr	r3, [r7, #0]
  401010:	b29a      	uxth	r2, r3
  401012:	68bb      	ldr	r3, [r7, #8]
  401014:	b29b      	uxth	r3, r3
  401016:	1ad3      	subs	r3, r2, r3
  401018:	b29b      	uxth	r3, r3
  40101a:	3301      	adds	r3, #1
  40101c:	b29b      	uxth	r3, r3
  40101e:	4622      	mov	r2, r4
  401020:	4c1f      	ldr	r4, [pc, #124]	; (4010a0 <ili9488_draw_filled_rectangle+0xc8>)
  401022:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401024:	4b1f      	ldr	r3, [pc, #124]	; (4010a4 <ili9488_draw_filled_rectangle+0xcc>)
  401026:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401028:	687a      	ldr	r2, [r7, #4]
  40102a:	68fb      	ldr	r3, [r7, #12]
  40102c:	1ad3      	subs	r3, r2, r3
  40102e:	3301      	adds	r3, #1
  401030:	6839      	ldr	r1, [r7, #0]
  401032:	68ba      	ldr	r2, [r7, #8]
  401034:	1a8a      	subs	r2, r1, r2
  401036:	3201      	adds	r2, #1
  401038:	fb02 f303 	mul.w	r3, r2, r3
  40103c:	613b      	str	r3, [r7, #16]
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  40103e:	693b      	ldr	r3, [r7, #16]
  401040:	4a19      	ldr	r2, [pc, #100]	; (4010a8 <ili9488_draw_filled_rectangle+0xd0>)
  401042:	fba2 2303 	umull	r2, r3, r2, r3
  401046:	0a1b      	lsrs	r3, r3, #8
  401048:	617b      	str	r3, [r7, #20]
	while (blocks--) {
  40104a:	e004      	b.n	401056 <ili9488_draw_filled_rectangle+0x7e>
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  40104c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
  401050:	4816      	ldr	r0, [pc, #88]	; (4010ac <ili9488_draw_filled_rectangle+0xd4>)
  401052:	4b17      	ldr	r3, [pc, #92]	; (4010b0 <ili9488_draw_filled_rectangle+0xd8>)
  401054:	4798      	blx	r3
	while (blocks--) {
  401056:	697b      	ldr	r3, [r7, #20]
  401058:	1e5a      	subs	r2, r3, #1
  40105a:	617a      	str	r2, [r7, #20]
  40105c:	2b00      	cmp	r3, #0
  40105e:	d1f5      	bne.n	40104c <ili9488_draw_filled_rectangle+0x74>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401060:	6939      	ldr	r1, [r7, #16]
  401062:	4b11      	ldr	r3, [pc, #68]	; (4010a8 <ili9488_draw_filled_rectangle+0xd0>)
  401064:	fba3 2301 	umull	r2, r3, r3, r1
  401068:	0a1a      	lsrs	r2, r3, #8
  40106a:	4613      	mov	r3, r2
  40106c:	009b      	lsls	r3, r3, #2
  40106e:	4413      	add	r3, r2
  401070:	019b      	lsls	r3, r3, #6
  401072:	1aca      	subs	r2, r1, r3
  401074:	4613      	mov	r3, r2
  401076:	005b      	lsls	r3, r3, #1
  401078:	4413      	add	r3, r2
  40107a:	4619      	mov	r1, r3
  40107c:	480b      	ldr	r0, [pc, #44]	; (4010ac <ili9488_draw_filled_rectangle+0xd4>)
  40107e:	4b0c      	ldr	r3, [pc, #48]	; (4010b0 <ili9488_draw_filled_rectangle+0xd8>)
  401080:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  401082:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  401086:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40108a:	2100      	movs	r1, #0
  40108c:	2000      	movs	r0, #0
  40108e:	4c04      	ldr	r4, [pc, #16]	; (4010a0 <ili9488_draw_filled_rectangle+0xc8>)
  401090:	47a0      	blx	r4

}
  401092:	bf00      	nop
  401094:	371c      	adds	r7, #28
  401096:	46bd      	mov	sp, r7
  401098:	bd90      	pop	{r4, r7, pc}
  40109a:	bf00      	nop
  40109c:	00400bed 	.word	0x00400bed
  4010a0:	00400cc5 	.word	0x00400cc5
  4010a4:	004009e9 	.word	0x004009e9
  4010a8:	cccccccd 	.word	0xcccccccd
  4010ac:	20400458 	.word	0x20400458
  4010b0:	00400a29 	.word	0x00400a29

004010b4 <ili9488_draw_pixmap>:
 * \param ul_height height of the picture.
 * \param p_ul_pixmap pixmap of the image.
 */
void ili9488_draw_pixmap(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height, const ili9488_color_t *p_ul_pixmap)
{
  4010b4:	b590      	push	{r4, r7, lr}
  4010b6:	b08b      	sub	sp, #44	; 0x2c
  4010b8:	af00      	add	r7, sp, #0
  4010ba:	60f8      	str	r0, [r7, #12]
  4010bc:	60b9      	str	r1, [r7, #8]
  4010be:	607a      	str	r2, [r7, #4]
  4010c0:	603b      	str	r3, [r7, #0]
	uint32_t size;
	uint32_t dwX1, dwY1, dwX2, dwY2;
	dwX1 = ul_x;
  4010c2:	68fb      	ldr	r3, [r7, #12]
  4010c4:	623b      	str	r3, [r7, #32]
	dwY1 = ul_y;
  4010c6:	68bb      	ldr	r3, [r7, #8]
  4010c8:	61fb      	str	r3, [r7, #28]
	dwX2 = ul_x + ul_width - 1;
  4010ca:	68fa      	ldr	r2, [r7, #12]
  4010cc:	687b      	ldr	r3, [r7, #4]
  4010ce:	4413      	add	r3, r2
  4010d0:	3b01      	subs	r3, #1
  4010d2:	61bb      	str	r3, [r7, #24]
	dwY2 = ul_y + ul_height - 1;
  4010d4:	68ba      	ldr	r2, [r7, #8]
  4010d6:	683b      	ldr	r3, [r7, #0]
  4010d8:	4413      	add	r3, r2
  4010da:	3b01      	subs	r3, #1
  4010dc:	617b      	str	r3, [r7, #20]

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&dwX1, &dwY1, &dwX2, &dwY2);
  4010de:	f107 0314 	add.w	r3, r7, #20
  4010e2:	f107 0218 	add.w	r2, r7, #24
  4010e6:	f107 011c 	add.w	r1, r7, #28
  4010ea:	f107 0020 	add.w	r0, r7, #32
  4010ee:	4c1b      	ldr	r4, [pc, #108]	; (40115c <ili9488_draw_pixmap+0xa8>)
  4010f0:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(dwX1, dwY1, (dwX2 - dwX1 + 1), (dwY2 - dwY1 + 1));
  4010f2:	6a3b      	ldr	r3, [r7, #32]
  4010f4:	b298      	uxth	r0, r3
  4010f6:	69fb      	ldr	r3, [r7, #28]
  4010f8:	b299      	uxth	r1, r3
  4010fa:	69bb      	ldr	r3, [r7, #24]
  4010fc:	b29a      	uxth	r2, r3
  4010fe:	6a3b      	ldr	r3, [r7, #32]
  401100:	b29b      	uxth	r3, r3
  401102:	1ad3      	subs	r3, r2, r3
  401104:	b29b      	uxth	r3, r3
  401106:	3301      	adds	r3, #1
  401108:	b29c      	uxth	r4, r3
  40110a:	697b      	ldr	r3, [r7, #20]
  40110c:	b29a      	uxth	r2, r3
  40110e:	69fb      	ldr	r3, [r7, #28]
  401110:	b29b      	uxth	r3, r3
  401112:	1ad3      	subs	r3, r2, r3
  401114:	b29b      	uxth	r3, r3
  401116:	3301      	adds	r3, #1
  401118:	b29b      	uxth	r3, r3
  40111a:	4622      	mov	r2, r4
  40111c:	4c10      	ldr	r4, [pc, #64]	; (401160 <ili9488_draw_pixmap+0xac>)
  40111e:	47a0      	blx	r4

	size = (dwX2 - dwX1) * (dwY2 - dwY1);
  401120:	69ba      	ldr	r2, [r7, #24]
  401122:	6a3b      	ldr	r3, [r7, #32]
  401124:	1ad3      	subs	r3, r2, r3
  401126:	6979      	ldr	r1, [r7, #20]
  401128:	69fa      	ldr	r2, [r7, #28]
  40112a:	1a8a      	subs	r2, r1, r2
  40112c:	fb02 f303 	mul.w	r3, r2, r3
  401130:	627b      	str	r3, [r7, #36]	; 0x24

	ili9488_write_register(ILI9488_CMD_MEMORY_WRITE, p_ul_pixmap, size * LCD_DATA_COLOR_UNIT);
  401132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  401134:	4613      	mov	r3, r2
  401136:	005b      	lsls	r3, r3, #1
  401138:	4413      	add	r3, r2
  40113a:	461a      	mov	r2, r3
  40113c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  40113e:	202c      	movs	r0, #44	; 0x2c
  401140:	4b08      	ldr	r3, [pc, #32]	; (401164 <ili9488_draw_pixmap+0xb0>)
  401142:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  401144:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  401148:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40114c:	2100      	movs	r1, #0
  40114e:	2000      	movs	r0, #0
  401150:	4c03      	ldr	r4, [pc, #12]	; (401160 <ili9488_draw_pixmap+0xac>)
  401152:	47a0      	blx	r4
}
  401154:	bf00      	nop
  401156:	372c      	adds	r7, #44	; 0x2c
  401158:	46bd      	mov	sp, r7
  40115a:	bd90      	pop	{r4, r7, pc}
  40115c:	00400bed 	.word	0x00400bed
  401160:	00400cc5 	.word	0x00400cc5
  401164:	00400a69 	.word	0x00400a69

00401168 <spi_get_peripheral_select_mode>:
{
  401168:	b480      	push	{r7}
  40116a:	b083      	sub	sp, #12
  40116c:	af00      	add	r7, sp, #0
  40116e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	685b      	ldr	r3, [r3, #4]
  401174:	f003 0302 	and.w	r3, r3, #2
  401178:	2b00      	cmp	r3, #0
  40117a:	d001      	beq.n	401180 <spi_get_peripheral_select_mode+0x18>
		return 1;
  40117c:	2301      	movs	r3, #1
  40117e:	e000      	b.n	401182 <spi_get_peripheral_select_mode+0x1a>
		return 0;
  401180:	2300      	movs	r3, #0
}
  401182:	4618      	mov	r0, r3
  401184:	370c      	adds	r7, #12
  401186:	46bd      	mov	sp, r7
  401188:	f85d 7b04 	ldr.w	r7, [sp], #4
  40118c:	4770      	bx	lr
	...

00401190 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401190:	b580      	push	{r7, lr}
  401192:	b082      	sub	sp, #8
  401194:	af00      	add	r7, sp, #0
  401196:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401198:	6878      	ldr	r0, [r7, #4]
  40119a:	4b03      	ldr	r3, [pc, #12]	; (4011a8 <sysclk_enable_peripheral_clock+0x18>)
  40119c:	4798      	blx	r3
}
  40119e:	bf00      	nop
  4011a0:	3708      	adds	r7, #8
  4011a2:	46bd      	mov	sp, r7
  4011a4:	bd80      	pop	{r7, pc}
  4011a6:	bf00      	nop
  4011a8:	004028bd 	.word	0x004028bd

004011ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4011ac:	b580      	push	{r7, lr}
  4011ae:	b082      	sub	sp, #8
  4011b0:	af00      	add	r7, sp, #0
  4011b2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4011b4:	687b      	ldr	r3, [r7, #4]
  4011b6:	4a09      	ldr	r2, [pc, #36]	; (4011dc <spi_enable_clock+0x30>)
  4011b8:	4293      	cmp	r3, r2
  4011ba:	d103      	bne.n	4011c4 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  4011bc:	2015      	movs	r0, #21
  4011be:	4b08      	ldr	r3, [pc, #32]	; (4011e0 <spi_enable_clock+0x34>)
  4011c0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4011c2:	e006      	b.n	4011d2 <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4011c4:	687b      	ldr	r3, [r7, #4]
  4011c6:	4a07      	ldr	r2, [pc, #28]	; (4011e4 <spi_enable_clock+0x38>)
  4011c8:	4293      	cmp	r3, r2
  4011ca:	d102      	bne.n	4011d2 <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4011cc:	202a      	movs	r0, #42	; 0x2a
  4011ce:	4b04      	ldr	r3, [pc, #16]	; (4011e0 <spi_enable_clock+0x34>)
  4011d0:	4798      	blx	r3
}
  4011d2:	bf00      	nop
  4011d4:	3708      	adds	r7, #8
  4011d6:	46bd      	mov	sp, r7
  4011d8:	bd80      	pop	{r7, pc}
  4011da:	bf00      	nop
  4011dc:	40008000 	.word	0x40008000
  4011e0:	00401191 	.word	0x00401191
  4011e4:	40058000 	.word	0x40058000

004011e8 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4011e8:	b480      	push	{r7}
  4011ea:	b083      	sub	sp, #12
  4011ec:	af00      	add	r7, sp, #0
  4011ee:	6078      	str	r0, [r7, #4]
  4011f0:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4011f2:	687b      	ldr	r3, [r7, #4]
  4011f4:	685b      	ldr	r3, [r3, #4]
  4011f6:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4011fa:	687b      	ldr	r3, [r7, #4]
  4011fc:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4011fe:	687b      	ldr	r3, [r7, #4]
  401200:	685a      	ldr	r2, [r3, #4]
  401202:	683b      	ldr	r3, [r7, #0]
  401204:	041b      	lsls	r3, r3, #16
  401206:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40120a:	431a      	orrs	r2, r3
  40120c:	687b      	ldr	r3, [r7, #4]
  40120e:	605a      	str	r2, [r3, #4]
}
  401210:	bf00      	nop
  401212:	370c      	adds	r7, #12
  401214:	46bd      	mov	sp, r7
  401216:	f85d 7b04 	ldr.w	r7, [sp], #4
  40121a:	4770      	bx	lr

0040121c <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
  40121c:	b480      	push	{r7}
  40121e:	b083      	sub	sp, #12
  401220:	af00      	add	r7, sp, #0
  401222:	6078      	str	r0, [r7, #4]
  401224:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401226:	687b      	ldr	r3, [r7, #4]
  401228:	685b      	ldr	r3, [r3, #4]
  40122a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  40122e:	687b      	ldr	r3, [r7, #4]
  401230:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401232:	687b      	ldr	r3, [r7, #4]
  401234:	685a      	ldr	r2, [r3, #4]
  401236:	683b      	ldr	r3, [r7, #0]
  401238:	061b      	lsls	r3, r3, #24
  40123a:	431a      	orrs	r2, r3
  40123c:	687b      	ldr	r3, [r7, #4]
  40123e:	605a      	str	r2, [r3, #4]
}
  401240:	bf00      	nop
  401242:	370c      	adds	r7, #12
  401244:	46bd      	mov	sp, r7
  401246:	f85d 7b04 	ldr.w	r7, [sp], #4
  40124a:	4770      	bx	lr

0040124c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40124c:	b580      	push	{r7, lr}
  40124e:	b084      	sub	sp, #16
  401250:	af00      	add	r7, sp, #0
  401252:	6078      	str	r0, [r7, #4]
  401254:	4608      	mov	r0, r1
  401256:	4611      	mov	r1, r2
  401258:	461a      	mov	r2, r3
  40125a:	4603      	mov	r3, r0
  40125c:	807b      	strh	r3, [r7, #2]
  40125e:	460b      	mov	r3, r1
  401260:	707b      	strb	r3, [r7, #1]
  401262:	4613      	mov	r3, r2
  401264:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  401266:	f643 2398 	movw	r3, #15000	; 0x3a98
  40126a:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40126c:	e006      	b.n	40127c <spi_write+0x30>
		if (!timeout--) {
  40126e:	68fb      	ldr	r3, [r7, #12]
  401270:	1e5a      	subs	r2, r3, #1
  401272:	60fa      	str	r2, [r7, #12]
  401274:	2b00      	cmp	r3, #0
  401276:	d101      	bne.n	40127c <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  401278:	2301      	movs	r3, #1
  40127a:	e020      	b.n	4012be <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40127c:	687b      	ldr	r3, [r7, #4]
  40127e:	691b      	ldr	r3, [r3, #16]
  401280:	f003 0302 	and.w	r3, r3, #2
  401284:	2b00      	cmp	r3, #0
  401286:	d0f2      	beq.n	40126e <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401288:	6878      	ldr	r0, [r7, #4]
  40128a:	4b0f      	ldr	r3, [pc, #60]	; (4012c8 <spi_write+0x7c>)
  40128c:	4798      	blx	r3
  40128e:	4603      	mov	r3, r0
  401290:	2b00      	cmp	r3, #0
  401292:	d00e      	beq.n	4012b2 <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401294:	887a      	ldrh	r2, [r7, #2]
  401296:	787b      	ldrb	r3, [r7, #1]
  401298:	041b      	lsls	r3, r3, #16
  40129a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40129e:	4313      	orrs	r3, r2
  4012a0:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  4012a2:	783b      	ldrb	r3, [r7, #0]
  4012a4:	2b00      	cmp	r3, #0
  4012a6:	d006      	beq.n	4012b6 <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  4012a8:	68bb      	ldr	r3, [r7, #8]
  4012aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4012ae:	60bb      	str	r3, [r7, #8]
  4012b0:	e001      	b.n	4012b6 <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  4012b2:	887b      	ldrh	r3, [r7, #2]
  4012b4:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  4012b6:	687b      	ldr	r3, [r7, #4]
  4012b8:	68ba      	ldr	r2, [r7, #8]
  4012ba:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  4012bc:	2300      	movs	r3, #0
}
  4012be:	4618      	mov	r0, r3
  4012c0:	3710      	adds	r7, #16
  4012c2:	46bd      	mov	sp, r7
  4012c4:	bd80      	pop	{r7, pc}
  4012c6:	bf00      	nop
  4012c8:	00401169 	.word	0x00401169

004012cc <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  4012cc:	b480      	push	{r7}
  4012ce:	b085      	sub	sp, #20
  4012d0:	af00      	add	r7, sp, #0
  4012d2:	60f8      	str	r0, [r7, #12]
  4012d4:	60b9      	str	r1, [r7, #8]
  4012d6:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  4012d8:	687b      	ldr	r3, [r7, #4]
  4012da:	2b00      	cmp	r3, #0
  4012dc:	d00c      	beq.n	4012f8 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4012de:	68fb      	ldr	r3, [r7, #12]
  4012e0:	68ba      	ldr	r2, [r7, #8]
  4012e2:	320c      	adds	r2, #12
  4012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4012e8:	f043 0101 	orr.w	r1, r3, #1
  4012ec:	68fb      	ldr	r3, [r7, #12]
  4012ee:	68ba      	ldr	r2, [r7, #8]
  4012f0:	320c      	adds	r2, #12
  4012f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4012f6:	e00b      	b.n	401310 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4012f8:	68fb      	ldr	r3, [r7, #12]
  4012fa:	68ba      	ldr	r2, [r7, #8]
  4012fc:	320c      	adds	r2, #12
  4012fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401302:	f023 0101 	bic.w	r1, r3, #1
  401306:	68fb      	ldr	r3, [r7, #12]
  401308:	68ba      	ldr	r2, [r7, #8]
  40130a:	320c      	adds	r2, #12
  40130c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401310:	bf00      	nop
  401312:	3714      	adds	r7, #20
  401314:	46bd      	mov	sp, r7
  401316:	f85d 7b04 	ldr.w	r7, [sp], #4
  40131a:	4770      	bx	lr

0040131c <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  40131c:	b480      	push	{r7}
  40131e:	b085      	sub	sp, #20
  401320:	af00      	add	r7, sp, #0
  401322:	60f8      	str	r0, [r7, #12]
  401324:	60b9      	str	r1, [r7, #8]
  401326:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  401328:	687b      	ldr	r3, [r7, #4]
  40132a:	2b00      	cmp	r3, #0
  40132c:	d00c      	beq.n	401348 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40132e:	68fb      	ldr	r3, [r7, #12]
  401330:	68ba      	ldr	r2, [r7, #8]
  401332:	320c      	adds	r2, #12
  401334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401338:	f043 0102 	orr.w	r1, r3, #2
  40133c:	68fb      	ldr	r3, [r7, #12]
  40133e:	68ba      	ldr	r2, [r7, #8]
  401340:	320c      	adds	r2, #12
  401342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  401346:	e00b      	b.n	401360 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401348:	68fb      	ldr	r3, [r7, #12]
  40134a:	68ba      	ldr	r2, [r7, #8]
  40134c:	320c      	adds	r2, #12
  40134e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401352:	f023 0102 	bic.w	r1, r3, #2
  401356:	68fb      	ldr	r3, [r7, #12]
  401358:	68ba      	ldr	r2, [r7, #8]
  40135a:	320c      	adds	r2, #12
  40135c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401360:	bf00      	nop
  401362:	3714      	adds	r7, #20
  401364:	46bd      	mov	sp, r7
  401366:	f85d 7b04 	ldr.w	r7, [sp], #4
  40136a:	4770      	bx	lr

0040136c <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  40136c:	b480      	push	{r7}
  40136e:	b085      	sub	sp, #20
  401370:	af00      	add	r7, sp, #0
  401372:	60f8      	str	r0, [r7, #12]
  401374:	60b9      	str	r1, [r7, #8]
  401376:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401378:	687b      	ldr	r3, [r7, #4]
  40137a:	2b04      	cmp	r3, #4
  40137c:	d118      	bne.n	4013b0 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40137e:	68fb      	ldr	r3, [r7, #12]
  401380:	68ba      	ldr	r2, [r7, #8]
  401382:	320c      	adds	r2, #12
  401384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401388:	f023 0108 	bic.w	r1, r3, #8
  40138c:	68fb      	ldr	r3, [r7, #12]
  40138e:	68ba      	ldr	r2, [r7, #8]
  401390:	320c      	adds	r2, #12
  401392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401396:	68fb      	ldr	r3, [r7, #12]
  401398:	68ba      	ldr	r2, [r7, #8]
  40139a:	320c      	adds	r2, #12
  40139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013a0:	f043 0104 	orr.w	r1, r3, #4
  4013a4:	68fb      	ldr	r3, [r7, #12]
  4013a6:	68ba      	ldr	r2, [r7, #8]
  4013a8:	320c      	adds	r2, #12
  4013aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  4013ae:	e02a      	b.n	401406 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	2b00      	cmp	r3, #0
  4013b4:	d118      	bne.n	4013e8 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4013b6:	68fb      	ldr	r3, [r7, #12]
  4013b8:	68ba      	ldr	r2, [r7, #8]
  4013ba:	320c      	adds	r2, #12
  4013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013c0:	f023 0108 	bic.w	r1, r3, #8
  4013c4:	68fb      	ldr	r3, [r7, #12]
  4013c6:	68ba      	ldr	r2, [r7, #8]
  4013c8:	320c      	adds	r2, #12
  4013ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4013ce:	68fb      	ldr	r3, [r7, #12]
  4013d0:	68ba      	ldr	r2, [r7, #8]
  4013d2:	320c      	adds	r2, #12
  4013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013d8:	f023 0104 	bic.w	r1, r3, #4
  4013dc:	68fb      	ldr	r3, [r7, #12]
  4013de:	68ba      	ldr	r2, [r7, #8]
  4013e0:	320c      	adds	r2, #12
  4013e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4013e6:	e00e      	b.n	401406 <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4013e8:	687b      	ldr	r3, [r7, #4]
  4013ea:	2b08      	cmp	r3, #8
  4013ec:	d10b      	bne.n	401406 <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4013ee:	68fb      	ldr	r3, [r7, #12]
  4013f0:	68ba      	ldr	r2, [r7, #8]
  4013f2:	320c      	adds	r2, #12
  4013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013f8:	f043 0108 	orr.w	r1, r3, #8
  4013fc:	68fb      	ldr	r3, [r7, #12]
  4013fe:	68ba      	ldr	r2, [r7, #8]
  401400:	320c      	adds	r2, #12
  401402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401406:	bf00      	nop
  401408:	3714      	adds	r7, #20
  40140a:	46bd      	mov	sp, r7
  40140c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401410:	4770      	bx	lr

00401412 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401412:	b480      	push	{r7}
  401414:	b085      	sub	sp, #20
  401416:	af00      	add	r7, sp, #0
  401418:	60f8      	str	r0, [r7, #12]
  40141a:	60b9      	str	r1, [r7, #8]
  40141c:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40141e:	68fb      	ldr	r3, [r7, #12]
  401420:	68ba      	ldr	r2, [r7, #8]
  401422:	320c      	adds	r2, #12
  401424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401428:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  40142c:	68fb      	ldr	r3, [r7, #12]
  40142e:	68ba      	ldr	r2, [r7, #8]
  401430:	320c      	adds	r2, #12
  401432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401436:	68fb      	ldr	r3, [r7, #12]
  401438:	68ba      	ldr	r2, [r7, #8]
  40143a:	320c      	adds	r2, #12
  40143c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	ea42 0103 	orr.w	r1, r2, r3
  401446:	68fb      	ldr	r3, [r7, #12]
  401448:	68ba      	ldr	r2, [r7, #8]
  40144a:	320c      	adds	r2, #12
  40144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401450:	bf00      	nop
  401452:	3714      	adds	r7, #20
  401454:	46bd      	mov	sp, r7
  401456:	f85d 7b04 	ldr.w	r7, [sp], #4
  40145a:	4770      	bx	lr

0040145c <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  40145c:	b480      	push	{r7}
  40145e:	b085      	sub	sp, #20
  401460:	af00      	add	r7, sp, #0
  401462:	6078      	str	r0, [r7, #4]
  401464:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  401466:	683a      	ldr	r2, [r7, #0]
  401468:	687b      	ldr	r3, [r7, #4]
  40146a:	4413      	add	r3, r2
  40146c:	1e5a      	subs	r2, r3, #1
  40146e:	687b      	ldr	r3, [r7, #4]
  401470:	fbb2 f3f3 	udiv	r3, r2, r3
  401474:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401476:	68fb      	ldr	r3, [r7, #12]
  401478:	2b00      	cmp	r3, #0
  40147a:	dd02      	ble.n	401482 <spi_calc_baudrate_div+0x26>
  40147c:	68fb      	ldr	r3, [r7, #12]
  40147e:	2bff      	cmp	r3, #255	; 0xff
  401480:	dd02      	ble.n	401488 <spi_calc_baudrate_div+0x2c>
		return -1;
  401482:	f04f 33ff 	mov.w	r3, #4294967295
  401486:	e001      	b.n	40148c <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  401488:	68fb      	ldr	r3, [r7, #12]
  40148a:	b21b      	sxth	r3, r3
}
  40148c:	4618      	mov	r0, r3
  40148e:	3714      	adds	r7, #20
  401490:	46bd      	mov	sp, r7
  401492:	f85d 7b04 	ldr.w	r7, [sp], #4
  401496:	4770      	bx	lr

00401498 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  401498:	b480      	push	{r7}
  40149a:	b085      	sub	sp, #20
  40149c:	af00      	add	r7, sp, #0
  40149e:	60f8      	str	r0, [r7, #12]
  4014a0:	60b9      	str	r1, [r7, #8]
  4014a2:	4613      	mov	r3, r2
  4014a4:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4014a6:	79fb      	ldrb	r3, [r7, #7]
  4014a8:	2b00      	cmp	r3, #0
  4014aa:	d102      	bne.n	4014b2 <spi_set_baudrate_div+0x1a>
        return -1;
  4014ac:	f04f 33ff 	mov.w	r3, #4294967295
  4014b0:	e01b      	b.n	4014ea <spi_set_baudrate_div+0x52>
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4014b2:	68fb      	ldr	r3, [r7, #12]
  4014b4:	68ba      	ldr	r2, [r7, #8]
  4014b6:	320c      	adds	r2, #12
  4014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4014bc:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  4014c0:	68fb      	ldr	r3, [r7, #12]
  4014c2:	68ba      	ldr	r2, [r7, #8]
  4014c4:	320c      	adds	r2, #12
  4014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4014ca:	68fb      	ldr	r3, [r7, #12]
  4014cc:	68ba      	ldr	r2, [r7, #8]
  4014ce:	320c      	adds	r2, #12
  4014d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4014d4:	79fb      	ldrb	r3, [r7, #7]
  4014d6:	021b      	lsls	r3, r3, #8
  4014d8:	b29b      	uxth	r3, r3
  4014da:	ea42 0103 	orr.w	r1, r2, r3
  4014de:	68fb      	ldr	r3, [r7, #12]
  4014e0:	68ba      	ldr	r2, [r7, #8]
  4014e2:	320c      	adds	r2, #12
  4014e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4014e8:	2300      	movs	r3, #0
}
  4014ea:	4618      	mov	r0, r3
  4014ec:	3714      	adds	r7, #20
  4014ee:	46bd      	mov	sp, r7
  4014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014f4:	4770      	bx	lr

004014f6 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4014f6:	b480      	push	{r7}
  4014f8:	b085      	sub	sp, #20
  4014fa:	af00      	add	r7, sp, #0
  4014fc:	60f8      	str	r0, [r7, #12]
  4014fe:	60b9      	str	r1, [r7, #8]
  401500:	4611      	mov	r1, r2
  401502:	461a      	mov	r2, r3
  401504:	460b      	mov	r3, r1
  401506:	71fb      	strb	r3, [r7, #7]
  401508:	4613      	mov	r3, r2
  40150a:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40150c:	68fb      	ldr	r3, [r7, #12]
  40150e:	68ba      	ldr	r2, [r7, #8]
  401510:	320c      	adds	r2, #12
  401512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401516:	b299      	uxth	r1, r3
  401518:	68fb      	ldr	r3, [r7, #12]
  40151a:	68ba      	ldr	r2, [r7, #8]
  40151c:	320c      	adds	r2, #12
  40151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401522:	68fb      	ldr	r3, [r7, #12]
  401524:	68ba      	ldr	r2, [r7, #8]
  401526:	320c      	adds	r2, #12
  401528:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  40152c:	79fb      	ldrb	r3, [r7, #7]
  40152e:	041b      	lsls	r3, r3, #16
  401530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  401534:	79b9      	ldrb	r1, [r7, #6]
  401536:	0609      	lsls	r1, r1, #24
  401538:	430b      	orrs	r3, r1
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40153a:	ea42 0103 	orr.w	r1, r2, r3
  40153e:	68fb      	ldr	r3, [r7, #12]
  401540:	68ba      	ldr	r2, [r7, #8]
  401542:	320c      	adds	r2, #12
  401544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401548:	bf00      	nop
  40154a:	3714      	adds	r7, #20
  40154c:	46bd      	mov	sp, r7
  40154e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401552:	4770      	bx	lr

00401554 <osc_enable>:
{
  401554:	b580      	push	{r7, lr}
  401556:	b082      	sub	sp, #8
  401558:	af00      	add	r7, sp, #0
  40155a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40155c:	687b      	ldr	r3, [r7, #4]
  40155e:	2b07      	cmp	r3, #7
  401560:	d831      	bhi.n	4015c6 <osc_enable+0x72>
  401562:	a201      	add	r2, pc, #4	; (adr r2, 401568 <osc_enable+0x14>)
  401564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401568:	004015c5 	.word	0x004015c5
  40156c:	00401589 	.word	0x00401589
  401570:	00401591 	.word	0x00401591
  401574:	00401599 	.word	0x00401599
  401578:	004015a1 	.word	0x004015a1
  40157c:	004015a9 	.word	0x004015a9
  401580:	004015b1 	.word	0x004015b1
  401584:	004015bb 	.word	0x004015bb
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401588:	2000      	movs	r0, #0
  40158a:	4b11      	ldr	r3, [pc, #68]	; (4015d0 <osc_enable+0x7c>)
  40158c:	4798      	blx	r3
		break;
  40158e:	e01a      	b.n	4015c6 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401590:	2001      	movs	r0, #1
  401592:	4b0f      	ldr	r3, [pc, #60]	; (4015d0 <osc_enable+0x7c>)
  401594:	4798      	blx	r3
		break;
  401596:	e016      	b.n	4015c6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401598:	2000      	movs	r0, #0
  40159a:	4b0e      	ldr	r3, [pc, #56]	; (4015d4 <osc_enable+0x80>)
  40159c:	4798      	blx	r3
		break;
  40159e:	e012      	b.n	4015c6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4015a0:	2010      	movs	r0, #16
  4015a2:	4b0c      	ldr	r3, [pc, #48]	; (4015d4 <osc_enable+0x80>)
  4015a4:	4798      	blx	r3
		break;
  4015a6:	e00e      	b.n	4015c6 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4015a8:	2020      	movs	r0, #32
  4015aa:	4b0a      	ldr	r3, [pc, #40]	; (4015d4 <osc_enable+0x80>)
  4015ac:	4798      	blx	r3
		break;
  4015ae:	e00a      	b.n	4015c6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4015b0:	213e      	movs	r1, #62	; 0x3e
  4015b2:	2000      	movs	r0, #0
  4015b4:	4b08      	ldr	r3, [pc, #32]	; (4015d8 <osc_enable+0x84>)
  4015b6:	4798      	blx	r3
		break;
  4015b8:	e005      	b.n	4015c6 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4015ba:	213e      	movs	r1, #62	; 0x3e
  4015bc:	2001      	movs	r0, #1
  4015be:	4b06      	ldr	r3, [pc, #24]	; (4015d8 <osc_enable+0x84>)
  4015c0:	4798      	blx	r3
		break;
  4015c2:	e000      	b.n	4015c6 <osc_enable+0x72>
		break;
  4015c4:	bf00      	nop
}
  4015c6:	bf00      	nop
  4015c8:	3708      	adds	r7, #8
  4015ca:	46bd      	mov	sp, r7
  4015cc:	bd80      	pop	{r7, pc}
  4015ce:	bf00      	nop
  4015d0:	004026f9 	.word	0x004026f9
  4015d4:	00402765 	.word	0x00402765
  4015d8:	004027d5 	.word	0x004027d5

004015dc <osc_is_ready>:
{
  4015dc:	b580      	push	{r7, lr}
  4015de:	b082      	sub	sp, #8
  4015e0:	af00      	add	r7, sp, #0
  4015e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015e4:	687b      	ldr	r3, [r7, #4]
  4015e6:	2b07      	cmp	r3, #7
  4015e8:	d826      	bhi.n	401638 <osc_is_ready+0x5c>
  4015ea:	a201      	add	r2, pc, #4	; (adr r2, 4015f0 <osc_is_ready+0x14>)
  4015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4015f0:	00401611 	.word	0x00401611
  4015f4:	00401615 	.word	0x00401615
  4015f8:	00401615 	.word	0x00401615
  4015fc:	00401627 	.word	0x00401627
  401600:	00401627 	.word	0x00401627
  401604:	00401627 	.word	0x00401627
  401608:	00401627 	.word	0x00401627
  40160c:	00401627 	.word	0x00401627
		return 1;
  401610:	2301      	movs	r3, #1
  401612:	e012      	b.n	40163a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401614:	4b0b      	ldr	r3, [pc, #44]	; (401644 <osc_is_ready+0x68>)
  401616:	4798      	blx	r3
  401618:	4603      	mov	r3, r0
  40161a:	2b00      	cmp	r3, #0
  40161c:	bf14      	ite	ne
  40161e:	2301      	movne	r3, #1
  401620:	2300      	moveq	r3, #0
  401622:	b2db      	uxtb	r3, r3
  401624:	e009      	b.n	40163a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  401626:	4b08      	ldr	r3, [pc, #32]	; (401648 <osc_is_ready+0x6c>)
  401628:	4798      	blx	r3
  40162a:	4603      	mov	r3, r0
  40162c:	2b00      	cmp	r3, #0
  40162e:	bf14      	ite	ne
  401630:	2301      	movne	r3, #1
  401632:	2300      	moveq	r3, #0
  401634:	b2db      	uxtb	r3, r3
  401636:	e000      	b.n	40163a <osc_is_ready+0x5e>
	return 0;
  401638:	2300      	movs	r3, #0
}
  40163a:	4618      	mov	r0, r3
  40163c:	3708      	adds	r7, #8
  40163e:	46bd      	mov	sp, r7
  401640:	bd80      	pop	{r7, pc}
  401642:	bf00      	nop
  401644:	00402731 	.word	0x00402731
  401648:	0040284d 	.word	0x0040284d

0040164c <osc_get_rate>:
{
  40164c:	b480      	push	{r7}
  40164e:	b083      	sub	sp, #12
  401650:	af00      	add	r7, sp, #0
  401652:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401654:	687b      	ldr	r3, [r7, #4]
  401656:	2b07      	cmp	r3, #7
  401658:	d825      	bhi.n	4016a6 <osc_get_rate+0x5a>
  40165a:	a201      	add	r2, pc, #4	; (adr r2, 401660 <osc_get_rate+0x14>)
  40165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401660:	00401681 	.word	0x00401681
  401664:	00401687 	.word	0x00401687
  401668:	0040168d 	.word	0x0040168d
  40166c:	00401693 	.word	0x00401693
  401670:	00401697 	.word	0x00401697
  401674:	0040169b 	.word	0x0040169b
  401678:	0040169f 	.word	0x0040169f
  40167c:	004016a3 	.word	0x004016a3
		return OSC_SLCK_32K_RC_HZ;
  401680:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401684:	e010      	b.n	4016a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40168a:	e00d      	b.n	4016a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40168c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401690:	e00a      	b.n	4016a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401692:	4b08      	ldr	r3, [pc, #32]	; (4016b4 <osc_get_rate+0x68>)
  401694:	e008      	b.n	4016a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401696:	4b08      	ldr	r3, [pc, #32]	; (4016b8 <osc_get_rate+0x6c>)
  401698:	e006      	b.n	4016a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40169a:	4b08      	ldr	r3, [pc, #32]	; (4016bc <osc_get_rate+0x70>)
  40169c:	e004      	b.n	4016a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40169e:	4b07      	ldr	r3, [pc, #28]	; (4016bc <osc_get_rate+0x70>)
  4016a0:	e002      	b.n	4016a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4016a2:	4b06      	ldr	r3, [pc, #24]	; (4016bc <osc_get_rate+0x70>)
  4016a4:	e000      	b.n	4016a8 <osc_get_rate+0x5c>
	return 0;
  4016a6:	2300      	movs	r3, #0
}
  4016a8:	4618      	mov	r0, r3
  4016aa:	370c      	adds	r7, #12
  4016ac:	46bd      	mov	sp, r7
  4016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016b2:	4770      	bx	lr
  4016b4:	003d0900 	.word	0x003d0900
  4016b8:	007a1200 	.word	0x007a1200
  4016bc:	00b71b00 	.word	0x00b71b00

004016c0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4016c0:	b580      	push	{r7, lr}
  4016c2:	b082      	sub	sp, #8
  4016c4:	af00      	add	r7, sp, #0
  4016c6:	4603      	mov	r3, r0
  4016c8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4016ca:	bf00      	nop
  4016cc:	79fb      	ldrb	r3, [r7, #7]
  4016ce:	4618      	mov	r0, r3
  4016d0:	4b05      	ldr	r3, [pc, #20]	; (4016e8 <osc_wait_ready+0x28>)
  4016d2:	4798      	blx	r3
  4016d4:	4603      	mov	r3, r0
  4016d6:	f083 0301 	eor.w	r3, r3, #1
  4016da:	b2db      	uxtb	r3, r3
  4016dc:	2b00      	cmp	r3, #0
  4016de:	d1f5      	bne.n	4016cc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4016e0:	bf00      	nop
  4016e2:	3708      	adds	r7, #8
  4016e4:	46bd      	mov	sp, r7
  4016e6:	bd80      	pop	{r7, pc}
  4016e8:	004015dd 	.word	0x004015dd

004016ec <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4016ec:	b580      	push	{r7, lr}
  4016ee:	b086      	sub	sp, #24
  4016f0:	af00      	add	r7, sp, #0
  4016f2:	60f8      	str	r0, [r7, #12]
  4016f4:	607a      	str	r2, [r7, #4]
  4016f6:	603b      	str	r3, [r7, #0]
  4016f8:	460b      	mov	r3, r1
  4016fa:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  4016fc:	687b      	ldr	r3, [r7, #4]
  4016fe:	2b00      	cmp	r3, #0
  401700:	d107      	bne.n	401712 <pll_config_init+0x26>
  401702:	683b      	ldr	r3, [r7, #0]
  401704:	2b00      	cmp	r3, #0
  401706:	d104      	bne.n	401712 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  401708:	68fb      	ldr	r3, [r7, #12]
  40170a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40170e:	601a      	str	r2, [r3, #0]
  401710:	e019      	b.n	401746 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401712:	7afb      	ldrb	r3, [r7, #11]
  401714:	4618      	mov	r0, r3
  401716:	4b0e      	ldr	r3, [pc, #56]	; (401750 <pll_config_init+0x64>)
  401718:	4798      	blx	r3
  40171a:	4602      	mov	r2, r0
  40171c:	687b      	ldr	r3, [r7, #4]
  40171e:	fbb2 f3f3 	udiv	r3, r2, r3
  401722:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401724:	697b      	ldr	r3, [r7, #20]
  401726:	683a      	ldr	r2, [r7, #0]
  401728:	fb02 f303 	mul.w	r3, r2, r3
  40172c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40172e:	683b      	ldr	r3, [r7, #0]
  401730:	3b01      	subs	r3, #1
  401732:	041a      	lsls	r2, r3, #16
  401734:	4b07      	ldr	r3, [pc, #28]	; (401754 <pll_config_init+0x68>)
  401736:	4013      	ands	r3, r2
  401738:	687a      	ldr	r2, [r7, #4]
  40173a:	b2d2      	uxtb	r2, r2
  40173c:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40173e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401742:	68fb      	ldr	r3, [r7, #12]
  401744:	601a      	str	r2, [r3, #0]
	}
}
  401746:	bf00      	nop
  401748:	3718      	adds	r7, #24
  40174a:	46bd      	mov	sp, r7
  40174c:	bd80      	pop	{r7, pc}
  40174e:	bf00      	nop
  401750:	0040164d 	.word	0x0040164d
  401754:	07ff0000 	.word	0x07ff0000

00401758 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401758:	b580      	push	{r7, lr}
  40175a:	b082      	sub	sp, #8
  40175c:	af00      	add	r7, sp, #0
  40175e:	6078      	str	r0, [r7, #4]
  401760:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401762:	683b      	ldr	r3, [r7, #0]
  401764:	2b00      	cmp	r3, #0
  401766:	d108      	bne.n	40177a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401768:	4b09      	ldr	r3, [pc, #36]	; (401790 <pll_enable+0x38>)
  40176a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40176c:	4a09      	ldr	r2, [pc, #36]	; (401794 <pll_enable+0x3c>)
  40176e:	687b      	ldr	r3, [r7, #4]
  401770:	681b      	ldr	r3, [r3, #0]
  401772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401776:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  401778:	e005      	b.n	401786 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  40177a:	4a06      	ldr	r2, [pc, #24]	; (401794 <pll_enable+0x3c>)
  40177c:	687b      	ldr	r3, [r7, #4]
  40177e:	681b      	ldr	r3, [r3, #0]
  401780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401784:	61d3      	str	r3, [r2, #28]
}
  401786:	bf00      	nop
  401788:	3708      	adds	r7, #8
  40178a:	46bd      	mov	sp, r7
  40178c:	bd80      	pop	{r7, pc}
  40178e:	bf00      	nop
  401790:	00402869 	.word	0x00402869
  401794:	400e0600 	.word	0x400e0600

00401798 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401798:	b580      	push	{r7, lr}
  40179a:	b082      	sub	sp, #8
  40179c:	af00      	add	r7, sp, #0
  40179e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4017a0:	687b      	ldr	r3, [r7, #4]
  4017a2:	2b00      	cmp	r3, #0
  4017a4:	d103      	bne.n	4017ae <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4017a6:	4b05      	ldr	r3, [pc, #20]	; (4017bc <pll_is_locked+0x24>)
  4017a8:	4798      	blx	r3
  4017aa:	4603      	mov	r3, r0
  4017ac:	e002      	b.n	4017b4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4017ae:	4b04      	ldr	r3, [pc, #16]	; (4017c0 <pll_is_locked+0x28>)
  4017b0:	4798      	blx	r3
  4017b2:	4603      	mov	r3, r0
	}
}
  4017b4:	4618      	mov	r0, r3
  4017b6:	3708      	adds	r7, #8
  4017b8:	46bd      	mov	sp, r7
  4017ba:	bd80      	pop	{r7, pc}
  4017bc:	00402885 	.word	0x00402885
  4017c0:	004028a1 	.word	0x004028a1

004017c4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4017c4:	b580      	push	{r7, lr}
  4017c6:	b082      	sub	sp, #8
  4017c8:	af00      	add	r7, sp, #0
  4017ca:	4603      	mov	r3, r0
  4017cc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4017ce:	79fb      	ldrb	r3, [r7, #7]
  4017d0:	3b03      	subs	r3, #3
  4017d2:	2b04      	cmp	r3, #4
  4017d4:	d808      	bhi.n	4017e8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4017d6:	79fb      	ldrb	r3, [r7, #7]
  4017d8:	4618      	mov	r0, r3
  4017da:	4b06      	ldr	r3, [pc, #24]	; (4017f4 <pll_enable_source+0x30>)
  4017dc:	4798      	blx	r3
		osc_wait_ready(e_src);
  4017de:	79fb      	ldrb	r3, [r7, #7]
  4017e0:	4618      	mov	r0, r3
  4017e2:	4b05      	ldr	r3, [pc, #20]	; (4017f8 <pll_enable_source+0x34>)
  4017e4:	4798      	blx	r3
		break;
  4017e6:	e000      	b.n	4017ea <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4017e8:	bf00      	nop
	}
}
  4017ea:	bf00      	nop
  4017ec:	3708      	adds	r7, #8
  4017ee:	46bd      	mov	sp, r7
  4017f0:	bd80      	pop	{r7, pc}
  4017f2:	bf00      	nop
  4017f4:	00401555 	.word	0x00401555
  4017f8:	004016c1 	.word	0x004016c1

004017fc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4017fc:	b580      	push	{r7, lr}
  4017fe:	b082      	sub	sp, #8
  401800:	af00      	add	r7, sp, #0
  401802:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401804:	bf00      	nop
  401806:	6878      	ldr	r0, [r7, #4]
  401808:	4b04      	ldr	r3, [pc, #16]	; (40181c <pll_wait_for_lock+0x20>)
  40180a:	4798      	blx	r3
  40180c:	4603      	mov	r3, r0
  40180e:	2b00      	cmp	r3, #0
  401810:	d0f9      	beq.n	401806 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401812:	2300      	movs	r3, #0
}
  401814:	4618      	mov	r0, r3
  401816:	3708      	adds	r7, #8
  401818:	46bd      	mov	sp, r7
  40181a:	bd80      	pop	{r7, pc}
  40181c:	00401799 	.word	0x00401799

00401820 <sysclk_get_main_hz>:
{
  401820:	b580      	push	{r7, lr}
  401822:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401824:	2006      	movs	r0, #6
  401826:	4b05      	ldr	r3, [pc, #20]	; (40183c <sysclk_get_main_hz+0x1c>)
  401828:	4798      	blx	r3
  40182a:	4602      	mov	r2, r0
  40182c:	4613      	mov	r3, r2
  40182e:	009b      	lsls	r3, r3, #2
  401830:	4413      	add	r3, r2
  401832:	009a      	lsls	r2, r3, #2
  401834:	4413      	add	r3, r2
}
  401836:	4618      	mov	r0, r3
  401838:	bd80      	pop	{r7, pc}
  40183a:	bf00      	nop
  40183c:	0040164d 	.word	0x0040164d

00401840 <sysclk_get_cpu_hz>:
{
  401840:	b580      	push	{r7, lr}
  401842:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401844:	4b02      	ldr	r3, [pc, #8]	; (401850 <sysclk_get_cpu_hz+0x10>)
  401846:	4798      	blx	r3
  401848:	4603      	mov	r3, r0
}
  40184a:	4618      	mov	r0, r3
  40184c:	bd80      	pop	{r7, pc}
  40184e:	bf00      	nop
  401850:	00401821 	.word	0x00401821

00401854 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401854:	b590      	push	{r4, r7, lr}
  401856:	b083      	sub	sp, #12
  401858:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40185a:	4813      	ldr	r0, [pc, #76]	; (4018a8 <sysclk_init+0x54>)
  40185c:	4b13      	ldr	r3, [pc, #76]	; (4018ac <sysclk_init+0x58>)
  40185e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  401860:	2006      	movs	r0, #6
  401862:	4b13      	ldr	r3, [pc, #76]	; (4018b0 <sysclk_init+0x5c>)
  401864:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401866:	1d38      	adds	r0, r7, #4
  401868:	2319      	movs	r3, #25
  40186a:	2201      	movs	r2, #1
  40186c:	2106      	movs	r1, #6
  40186e:	4c11      	ldr	r4, [pc, #68]	; (4018b4 <sysclk_init+0x60>)
  401870:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401872:	1d3b      	adds	r3, r7, #4
  401874:	2100      	movs	r1, #0
  401876:	4618      	mov	r0, r3
  401878:	4b0f      	ldr	r3, [pc, #60]	; (4018b8 <sysclk_init+0x64>)
  40187a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40187c:	2000      	movs	r0, #0
  40187e:	4b0f      	ldr	r3, [pc, #60]	; (4018bc <sysclk_init+0x68>)
  401880:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401882:	2002      	movs	r0, #2
  401884:	4b0e      	ldr	r3, [pc, #56]	; (4018c0 <sysclk_init+0x6c>)
  401886:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401888:	2000      	movs	r0, #0
  40188a:	4b0e      	ldr	r3, [pc, #56]	; (4018c4 <sysclk_init+0x70>)
  40188c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40188e:	4b0e      	ldr	r3, [pc, #56]	; (4018c8 <sysclk_init+0x74>)
  401890:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401892:	4b0e      	ldr	r3, [pc, #56]	; (4018cc <sysclk_init+0x78>)
  401894:	4798      	blx	r3
  401896:	4603      	mov	r3, r0
  401898:	4618      	mov	r0, r3
  40189a:	4b04      	ldr	r3, [pc, #16]	; (4018ac <sysclk_init+0x58>)
  40189c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40189e:	bf00      	nop
  4018a0:	370c      	adds	r7, #12
  4018a2:	46bd      	mov	sp, r7
  4018a4:	bd90      	pop	{r4, r7, pc}
  4018a6:	bf00      	nop
  4018a8:	07270e00 	.word	0x07270e00
  4018ac:	00402fe9 	.word	0x00402fe9
  4018b0:	004017c5 	.word	0x004017c5
  4018b4:	004016ed 	.word	0x004016ed
  4018b8:	00401759 	.word	0x00401759
  4018bc:	004017fd 	.word	0x004017fd
  4018c0:	004025f9 	.word	0x004025f9
  4018c4:	00402675 	.word	0x00402675
  4018c8:	00402e81 	.word	0x00402e81
  4018cc:	00401841 	.word	0x00401841

004018d0 <sysclk_enable_peripheral_clock>:
{
  4018d0:	b580      	push	{r7, lr}
  4018d2:	b082      	sub	sp, #8
  4018d4:	af00      	add	r7, sp, #0
  4018d6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4018d8:	6878      	ldr	r0, [r7, #4]
  4018da:	4b03      	ldr	r3, [pc, #12]	; (4018e8 <sysclk_enable_peripheral_clock+0x18>)
  4018dc:	4798      	blx	r3
}
  4018de:	bf00      	nop
  4018e0:	3708      	adds	r7, #8
  4018e2:	46bd      	mov	sp, r7
  4018e4:	bd80      	pop	{r7, pc}
  4018e6:	bf00      	nop
  4018e8:	004028bd 	.word	0x004028bd

004018ec <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4018ec:	b580      	push	{r7, lr}
  4018ee:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4018f0:	200a      	movs	r0, #10
  4018f2:	4b08      	ldr	r3, [pc, #32]	; (401914 <ioport_init+0x28>)
  4018f4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4018f6:	200b      	movs	r0, #11
  4018f8:	4b06      	ldr	r3, [pc, #24]	; (401914 <ioport_init+0x28>)
  4018fa:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4018fc:	200c      	movs	r0, #12
  4018fe:	4b05      	ldr	r3, [pc, #20]	; (401914 <ioport_init+0x28>)
  401900:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  401902:	2010      	movs	r0, #16
  401904:	4b03      	ldr	r3, [pc, #12]	; (401914 <ioport_init+0x28>)
  401906:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  401908:	2011      	movs	r0, #17
  40190a:	4b02      	ldr	r3, [pc, #8]	; (401914 <ioport_init+0x28>)
  40190c:	4798      	blx	r3
	arch_ioport_init();
}
  40190e:	bf00      	nop
  401910:	bd80      	pop	{r7, pc}
  401912:	bf00      	nop
  401914:	004018d1 	.word	0x004018d1

00401918 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  401918:	b480      	push	{r7}
  40191a:	b089      	sub	sp, #36	; 0x24
  40191c:	af00      	add	r7, sp, #0
  40191e:	6078      	str	r0, [r7, #4]
  401920:	687b      	ldr	r3, [r7, #4]
  401922:	61fb      	str	r3, [r7, #28]
  401924:	69fb      	ldr	r3, [r7, #28]
  401926:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401928:	69bb      	ldr	r3, [r7, #24]
  40192a:	095a      	lsrs	r2, r3, #5
  40192c:	69fb      	ldr	r3, [r7, #28]
  40192e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401930:	697b      	ldr	r3, [r7, #20]
  401932:	f003 031f 	and.w	r3, r3, #31
  401936:	2101      	movs	r1, #1
  401938:	fa01 f303 	lsl.w	r3, r1, r3
  40193c:	613a      	str	r2, [r7, #16]
  40193e:	60fb      	str	r3, [r7, #12]
  401940:	693b      	ldr	r3, [r7, #16]
  401942:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401944:	68ba      	ldr	r2, [r7, #8]
  401946:	4b06      	ldr	r3, [pc, #24]	; (401960 <ioport_disable_pin+0x48>)
  401948:	4413      	add	r3, r2
  40194a:	025b      	lsls	r3, r3, #9
  40194c:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40194e:	68fb      	ldr	r3, [r7, #12]
  401950:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  401952:	bf00      	nop
  401954:	3724      	adds	r7, #36	; 0x24
  401956:	46bd      	mov	sp, r7
  401958:	f85d 7b04 	ldr.w	r7, [sp], #4
  40195c:	4770      	bx	lr
  40195e:	bf00      	nop
  401960:	00200707 	.word	0x00200707

00401964 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  401964:	b480      	push	{r7}
  401966:	b08d      	sub	sp, #52	; 0x34
  401968:	af00      	add	r7, sp, #0
  40196a:	6078      	str	r0, [r7, #4]
  40196c:	6039      	str	r1, [r7, #0]
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	62fb      	str	r3, [r7, #44]	; 0x2c
  401972:	683b      	ldr	r3, [r7, #0]
  401974:	62bb      	str	r3, [r7, #40]	; 0x28
  401976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401978:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40197c:	095a      	lsrs	r2, r3, #5
  40197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401980:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401982:	6a3b      	ldr	r3, [r7, #32]
  401984:	f003 031f 	and.w	r3, r3, #31
  401988:	2101      	movs	r1, #1
  40198a:	fa01 f303 	lsl.w	r3, r1, r3
  40198e:	61fa      	str	r2, [r7, #28]
  401990:	61bb      	str	r3, [r7, #24]
  401992:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401994:	617b      	str	r3, [r7, #20]
  401996:	69fb      	ldr	r3, [r7, #28]
  401998:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40199a:	693a      	ldr	r2, [r7, #16]
  40199c:	4b37      	ldr	r3, [pc, #220]	; (401a7c <ioport_set_pin_mode+0x118>)
  40199e:	4413      	add	r3, r2
  4019a0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4019a2:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4019a4:	697b      	ldr	r3, [r7, #20]
  4019a6:	f003 0308 	and.w	r3, r3, #8
  4019aa:	2b00      	cmp	r3, #0
  4019ac:	d003      	beq.n	4019b6 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4019ae:	68fb      	ldr	r3, [r7, #12]
  4019b0:	69ba      	ldr	r2, [r7, #24]
  4019b2:	665a      	str	r2, [r3, #100]	; 0x64
  4019b4:	e002      	b.n	4019bc <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4019b6:	68fb      	ldr	r3, [r7, #12]
  4019b8:	69ba      	ldr	r2, [r7, #24]
  4019ba:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4019bc:	697b      	ldr	r3, [r7, #20]
  4019be:	f003 0310 	and.w	r3, r3, #16
  4019c2:	2b00      	cmp	r3, #0
  4019c4:	d004      	beq.n	4019d0 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4019c6:	68fb      	ldr	r3, [r7, #12]
  4019c8:	69ba      	ldr	r2, [r7, #24]
  4019ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4019ce:	e003      	b.n	4019d8 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4019d0:	68fb      	ldr	r3, [r7, #12]
  4019d2:	69ba      	ldr	r2, [r7, #24]
  4019d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4019d8:	697b      	ldr	r3, [r7, #20]
  4019da:	f003 0320 	and.w	r3, r3, #32
  4019de:	2b00      	cmp	r3, #0
  4019e0:	d003      	beq.n	4019ea <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4019e2:	68fb      	ldr	r3, [r7, #12]
  4019e4:	69ba      	ldr	r2, [r7, #24]
  4019e6:	651a      	str	r2, [r3, #80]	; 0x50
  4019e8:	e002      	b.n	4019f0 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4019ea:	68fb      	ldr	r3, [r7, #12]
  4019ec:	69ba      	ldr	r2, [r7, #24]
  4019ee:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4019f0:	697b      	ldr	r3, [r7, #20]
  4019f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d003      	beq.n	401a02 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4019fa:	68fb      	ldr	r3, [r7, #12]
  4019fc:	69ba      	ldr	r2, [r7, #24]
  4019fe:	621a      	str	r2, [r3, #32]
  401a00:	e002      	b.n	401a08 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  401a02:	68fb      	ldr	r3, [r7, #12]
  401a04:	69ba      	ldr	r2, [r7, #24]
  401a06:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  401a08:	697b      	ldr	r3, [r7, #20]
  401a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a0e:	2b00      	cmp	r3, #0
  401a10:	d004      	beq.n	401a1c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	69ba      	ldr	r2, [r7, #24]
  401a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401a1a:	e003      	b.n	401a24 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401a1c:	68fb      	ldr	r3, [r7, #12]
  401a1e:	69ba      	ldr	r2, [r7, #24]
  401a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401a24:	697b      	ldr	r3, [r7, #20]
  401a26:	f003 0301 	and.w	r3, r3, #1
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	d006      	beq.n	401a3c <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401a2e:	68fb      	ldr	r3, [r7, #12]
  401a30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a32:	69bb      	ldr	r3, [r7, #24]
  401a34:	431a      	orrs	r2, r3
  401a36:	68fb      	ldr	r3, [r7, #12]
  401a38:	671a      	str	r2, [r3, #112]	; 0x70
  401a3a:	e006      	b.n	401a4a <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401a3c:	68fb      	ldr	r3, [r7, #12]
  401a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a40:	69bb      	ldr	r3, [r7, #24]
  401a42:	43db      	mvns	r3, r3
  401a44:	401a      	ands	r2, r3
  401a46:	68fb      	ldr	r3, [r7, #12]
  401a48:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  401a4a:	697b      	ldr	r3, [r7, #20]
  401a4c:	f003 0302 	and.w	r3, r3, #2
  401a50:	2b00      	cmp	r3, #0
  401a52:	d006      	beq.n	401a62 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401a54:	68fb      	ldr	r3, [r7, #12]
  401a56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a58:	69bb      	ldr	r3, [r7, #24]
  401a5a:	431a      	orrs	r2, r3
  401a5c:	68fb      	ldr	r3, [r7, #12]
  401a5e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  401a60:	e006      	b.n	401a70 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401a62:	68fb      	ldr	r3, [r7, #12]
  401a64:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a66:	69bb      	ldr	r3, [r7, #24]
  401a68:	43db      	mvns	r3, r3
  401a6a:	401a      	ands	r2, r3
  401a6c:	68fb      	ldr	r3, [r7, #12]
  401a6e:	675a      	str	r2, [r3, #116]	; 0x74
  401a70:	bf00      	nop
  401a72:	3734      	adds	r7, #52	; 0x34
  401a74:	46bd      	mov	sp, r7
  401a76:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a7a:	4770      	bx	lr
  401a7c:	00200707 	.word	0x00200707

00401a80 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401a80:	b480      	push	{r7}
  401a82:	b08d      	sub	sp, #52	; 0x34
  401a84:	af00      	add	r7, sp, #0
  401a86:	6078      	str	r0, [r7, #4]
  401a88:	460b      	mov	r3, r1
  401a8a:	70fb      	strb	r3, [r7, #3]
  401a8c:	687b      	ldr	r3, [r7, #4]
  401a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  401a90:	78fb      	ldrb	r3, [r7, #3]
  401a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a98:	627b      	str	r3, [r7, #36]	; 0x24
  401a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a9c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401a9e:	6a3b      	ldr	r3, [r7, #32]
  401aa0:	095b      	lsrs	r3, r3, #5
  401aa2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401aa4:	69fa      	ldr	r2, [r7, #28]
  401aa6:	4b17      	ldr	r3, [pc, #92]	; (401b04 <ioport_set_pin_dir+0x84>)
  401aa8:	4413      	add	r3, r2
  401aaa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401aac:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ab2:	2b01      	cmp	r3, #1
  401ab4:	d109      	bne.n	401aca <ioport_set_pin_dir+0x4a>
  401ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ab8:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401aba:	697b      	ldr	r3, [r7, #20]
  401abc:	f003 031f 	and.w	r3, r3, #31
  401ac0:	2201      	movs	r2, #1
  401ac2:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ac4:	69bb      	ldr	r3, [r7, #24]
  401ac6:	611a      	str	r2, [r3, #16]
  401ac8:	e00c      	b.n	401ae4 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401aca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ace:	2b00      	cmp	r3, #0
  401ad0:	d108      	bne.n	401ae4 <ioport_set_pin_dir+0x64>
  401ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ad4:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401ad6:	693b      	ldr	r3, [r7, #16]
  401ad8:	f003 031f 	and.w	r3, r3, #31
  401adc:	2201      	movs	r2, #1
  401ade:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ae0:	69bb      	ldr	r3, [r7, #24]
  401ae2:	615a      	str	r2, [r3, #20]
  401ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ae6:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401ae8:	68fb      	ldr	r3, [r7, #12]
  401aea:	f003 031f 	and.w	r3, r3, #31
  401aee:	2201      	movs	r2, #1
  401af0:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401af2:	69bb      	ldr	r3, [r7, #24]
  401af4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401af8:	bf00      	nop
  401afa:	3734      	adds	r7, #52	; 0x34
  401afc:	46bd      	mov	sp, r7
  401afe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b02:	4770      	bx	lr
  401b04:	00200707 	.word	0x00200707

00401b08 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401b08:	b480      	push	{r7}
  401b0a:	b08b      	sub	sp, #44	; 0x2c
  401b0c:	af00      	add	r7, sp, #0
  401b0e:	6078      	str	r0, [r7, #4]
  401b10:	460b      	mov	r3, r1
  401b12:	70fb      	strb	r3, [r7, #3]
  401b14:	687b      	ldr	r3, [r7, #4]
  401b16:	627b      	str	r3, [r7, #36]	; 0x24
  401b18:	78fb      	ldrb	r3, [r7, #3]
  401b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b20:	61fb      	str	r3, [r7, #28]
  401b22:	69fb      	ldr	r3, [r7, #28]
  401b24:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401b26:	69bb      	ldr	r3, [r7, #24]
  401b28:	095b      	lsrs	r3, r3, #5
  401b2a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b2c:	697a      	ldr	r2, [r7, #20]
  401b2e:	4b10      	ldr	r3, [pc, #64]	; (401b70 <ioport_set_pin_level+0x68>)
  401b30:	4413      	add	r3, r2
  401b32:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401b34:	613b      	str	r3, [r7, #16]

	if (level) {
  401b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401b3a:	2b00      	cmp	r3, #0
  401b3c:	d009      	beq.n	401b52 <ioport_set_pin_level+0x4a>
  401b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b40:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401b42:	68fb      	ldr	r3, [r7, #12]
  401b44:	f003 031f 	and.w	r3, r3, #31
  401b48:	2201      	movs	r2, #1
  401b4a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b4c:	693b      	ldr	r3, [r7, #16]
  401b4e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401b50:	e008      	b.n	401b64 <ioport_set_pin_level+0x5c>
  401b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b54:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401b56:	68bb      	ldr	r3, [r7, #8]
  401b58:	f003 031f 	and.w	r3, r3, #31
  401b5c:	2201      	movs	r2, #1
  401b5e:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b60:	693b      	ldr	r3, [r7, #16]
  401b62:	635a      	str	r2, [r3, #52]	; 0x34
  401b64:	bf00      	nop
  401b66:	372c      	adds	r7, #44	; 0x2c
  401b68:	46bd      	mov	sp, r7
  401b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b6e:	4770      	bx	lr
  401b70:	00200707 	.word	0x00200707

00401b74 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  401b74:	b480      	push	{r7}
  401b76:	b08d      	sub	sp, #52	; 0x34
  401b78:	af00      	add	r7, sp, #0
  401b7a:	6078      	str	r0, [r7, #4]
  401b7c:	460b      	mov	r3, r1
  401b7e:	70fb      	strb	r3, [r7, #3]
  401b80:	687b      	ldr	r3, [r7, #4]
  401b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b84:	78fb      	ldrb	r3, [r7, #3]
  401b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b8c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b90:	095a      	lsrs	r2, r3, #5
  401b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b94:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401b96:	6a3b      	ldr	r3, [r7, #32]
  401b98:	f003 031f 	and.w	r3, r3, #31
  401b9c:	2101      	movs	r1, #1
  401b9e:	fa01 f303 	lsl.w	r3, r1, r3
  401ba2:	61fa      	str	r2, [r7, #28]
  401ba4:	61bb      	str	r3, [r7, #24]
  401ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401baa:	75fb      	strb	r3, [r7, #23]
  401bac:	69fb      	ldr	r3, [r7, #28]
  401bae:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bb0:	693a      	ldr	r2, [r7, #16]
  401bb2:	4b23      	ldr	r3, [pc, #140]	; (401c40 <ioport_set_pin_sense_mode+0xcc>)
  401bb4:	4413      	add	r3, r2
  401bb6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  401bb8:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  401bba:	7dfb      	ldrb	r3, [r7, #23]
  401bbc:	3b01      	subs	r3, #1
  401bbe:	2b03      	cmp	r3, #3
  401bc0:	d82e      	bhi.n	401c20 <ioport_set_pin_sense_mode+0xac>
  401bc2:	a201      	add	r2, pc, #4	; (adr r2, 401bc8 <ioport_set_pin_sense_mode+0x54>)
  401bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401bc8:	00401bfd 	.word	0x00401bfd
  401bcc:	00401c0f 	.word	0x00401c0f
  401bd0:	00401bd9 	.word	0x00401bd9
  401bd4:	00401beb 	.word	0x00401beb
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401bd8:	68fb      	ldr	r3, [r7, #12]
  401bda:	69ba      	ldr	r2, [r7, #24]
  401bdc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401be0:	68fb      	ldr	r3, [r7, #12]
  401be2:	69ba      	ldr	r2, [r7, #24]
  401be4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401be8:	e01f      	b.n	401c2a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401bea:	68fb      	ldr	r3, [r7, #12]
  401bec:	69ba      	ldr	r2, [r7, #24]
  401bee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	69ba      	ldr	r2, [r7, #24]
  401bf6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401bfa:	e016      	b.n	401c2a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401bfc:	68fb      	ldr	r3, [r7, #12]
  401bfe:	69ba      	ldr	r2, [r7, #24]
  401c00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	69ba      	ldr	r2, [r7, #24]
  401c08:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401c0c:	e00d      	b.n	401c2a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401c0e:	68fb      	ldr	r3, [r7, #12]
  401c10:	69ba      	ldr	r2, [r7, #24]
  401c12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401c16:	68fb      	ldr	r3, [r7, #12]
  401c18:	69ba      	ldr	r2, [r7, #24]
  401c1a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401c1e:	e004      	b.n	401c2a <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401c20:	68fb      	ldr	r3, [r7, #12]
  401c22:	69ba      	ldr	r2, [r7, #24]
  401c24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401c28:	e003      	b.n	401c32 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401c2a:	68fb      	ldr	r3, [r7, #12]
  401c2c:	69ba      	ldr	r2, [r7, #24]
  401c2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401c32:	bf00      	nop
  401c34:	3734      	adds	r7, #52	; 0x34
  401c36:	46bd      	mov	sp, r7
  401c38:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c3c:	4770      	bx	lr
  401c3e:	bf00      	nop
  401c40:	00200707 	.word	0x00200707

00401c44 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401c44:	b480      	push	{r7}
  401c46:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401c48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c4c:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c50:	4a0c      	ldr	r2, [pc, #48]	; (401c84 <tcm_disable+0x40>)
  401c52:	4b0c      	ldr	r3, [pc, #48]	; (401c84 <tcm_disable+0x40>)
  401c54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401c58:	f023 0301 	bic.w	r3, r3, #1
  401c5c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401c60:	4a08      	ldr	r2, [pc, #32]	; (401c84 <tcm_disable+0x40>)
  401c62:	4b08      	ldr	r3, [pc, #32]	; (401c84 <tcm_disable+0x40>)
  401c64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401c68:	f023 0301 	bic.w	r3, r3, #1
  401c6c:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401c70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c74:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401c78:	bf00      	nop
  401c7a:	46bd      	mov	sp, r7
  401c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c80:	4770      	bx	lr
  401c82:	bf00      	nop
  401c84:	e000ed00 	.word	0xe000ed00

00401c88 <board_init>:
#endif

void board_init(void)
{
  401c88:	b598      	push	{r3, r4, r7, lr}
  401c8a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401c8c:	4b55      	ldr	r3, [pc, #340]	; (401de4 <board_init+0x15c>)
  401c8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c92:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c94:	4b54      	ldr	r3, [pc, #336]	; (401de8 <board_init+0x160>)
  401c96:	4a55      	ldr	r2, [pc, #340]	; (401dec <board_init+0x164>)
  401c98:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c9a:	4b53      	ldr	r3, [pc, #332]	; (401de8 <board_init+0x160>)
  401c9c:	4a54      	ldr	r2, [pc, #336]	; (401df0 <board_init+0x168>)
  401c9e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401ca0:	4b54      	ldr	r3, [pc, #336]	; (401df4 <board_init+0x16c>)
  401ca2:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401ca4:	4b54      	ldr	r3, [pc, #336]	; (401df8 <board_init+0x170>)
  401ca6:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401ca8:	2101      	movs	r1, #1
  401caa:	2048      	movs	r0, #72	; 0x48
  401cac:	4b53      	ldr	r3, [pc, #332]	; (401dfc <board_init+0x174>)
  401cae:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401cb0:	2101      	movs	r1, #1
  401cb2:	2048      	movs	r0, #72	; 0x48
  401cb4:	4b52      	ldr	r3, [pc, #328]	; (401e00 <board_init+0x178>)
  401cb6:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401cb8:	2100      	movs	r1, #0
  401cba:	200b      	movs	r0, #11
  401cbc:	4b4f      	ldr	r3, [pc, #316]	; (401dfc <board_init+0x174>)
  401cbe:	4798      	blx	r3
  401cc0:	2188      	movs	r1, #136	; 0x88
  401cc2:	200b      	movs	r0, #11
  401cc4:	4b4f      	ldr	r3, [pc, #316]	; (401e04 <board_init+0x17c>)
  401cc6:	4798      	blx	r3
  401cc8:	2102      	movs	r1, #2
  401cca:	200b      	movs	r0, #11
  401ccc:	4b4e      	ldr	r3, [pc, #312]	; (401e08 <board_init+0x180>)
  401cce:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  401cd0:	2100      	movs	r1, #0
  401cd2:	2015      	movs	r0, #21
  401cd4:	4b4b      	ldr	r3, [pc, #300]	; (401e04 <board_init+0x17c>)
  401cd6:	4798      	blx	r3
  401cd8:	2015      	movs	r0, #21
  401cda:	4b4c      	ldr	r3, [pc, #304]	; (401e0c <board_init+0x184>)
  401cdc:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401cde:	4a4c      	ldr	r2, [pc, #304]	; (401e10 <board_init+0x188>)
  401ce0:	4b4b      	ldr	r3, [pc, #300]	; (401e10 <board_init+0x188>)
  401ce2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  401ce6:	f043 0310 	orr.w	r3, r3, #16
  401cea:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  401cee:	2103      	movs	r1, #3
  401cf0:	2024      	movs	r0, #36	; 0x24
  401cf2:	4b44      	ldr	r3, [pc, #272]	; (401e04 <board_init+0x17c>)
  401cf4:	4798      	blx	r3
  401cf6:	2024      	movs	r0, #36	; 0x24
  401cf8:	4b44      	ldr	r3, [pc, #272]	; (401e0c <board_init+0x184>)
  401cfa:	4798      	blx	r3
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  401cfc:	2300      	movs	r3, #0
  401cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401d02:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d06:	4843      	ldr	r0, [pc, #268]	; (401e14 <board_init+0x18c>)
  401d08:	4c43      	ldr	r4, [pc, #268]	; (401e18 <board_init+0x190>)
  401d0a:	47a0      	blx	r4
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  401d0c:	2300      	movs	r3, #0
  401d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401d12:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d16:	483f      	ldr	r0, [pc, #252]	; (401e14 <board_init+0x18c>)
  401d18:	4c3f      	ldr	r4, [pc, #252]	; (401e18 <board_init+0x190>)
  401d1a:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  401d1c:	2301      	movs	r3, #1
  401d1e:	22ff      	movs	r2, #255	; 0xff
  401d20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d24:	483b      	ldr	r0, [pc, #236]	; (401e14 <board_init+0x18c>)
  401d26:	4c3c      	ldr	r4, [pc, #240]	; (401e18 <board_init+0x190>)
  401d28:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  401d2a:	2301      	movs	r3, #1
  401d2c:	223f      	movs	r2, #63	; 0x3f
  401d2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d32:	483a      	ldr	r0, [pc, #232]	; (401e1c <board_init+0x194>)
  401d34:	4c38      	ldr	r4, [pc, #224]	; (401e18 <board_init+0x190>)
  401d36:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  401d38:	2301      	movs	r3, #1
  401d3a:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  401d3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d42:	4837      	ldr	r0, [pc, #220]	; (401e20 <board_init+0x198>)
  401d44:	4c34      	ldr	r4, [pc, #208]	; (401e18 <board_init+0x190>)
  401d46:	47a0      	blx	r4
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  401d48:	2301      	movs	r3, #1
  401d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
  401d4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d52:	4830      	ldr	r0, [pc, #192]	; (401e14 <board_init+0x18c>)
  401d54:	4c30      	ldr	r4, [pc, #192]	; (401e18 <board_init+0x190>)
  401d56:	47a0      	blx	r4
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  401d58:	2301      	movs	r3, #1
  401d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401d5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d62:	482c      	ldr	r0, [pc, #176]	; (401e14 <board_init+0x18c>)
  401d64:	4c2c      	ldr	r4, [pc, #176]	; (401e18 <board_init+0x190>)
  401d66:	47a0      	blx	r4
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  401d68:	2301      	movs	r3, #1
  401d6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401d6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d72:	482c      	ldr	r0, [pc, #176]	; (401e24 <board_init+0x19c>)
  401d74:	4c28      	ldr	r4, [pc, #160]	; (401e18 <board_init+0x190>)
  401d76:	47a0      	blx	r4
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  401d78:	2300      	movs	r3, #0
  401d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
  401d7e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d82:	4824      	ldr	r0, [pc, #144]	; (401e14 <board_init+0x18c>)
  401d84:	4c24      	ldr	r4, [pc, #144]	; (401e18 <board_init+0x190>)
  401d86:	47a0      	blx	r4
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  401d88:	f44f 7100 	mov.w	r1, #512	; 0x200
  401d8c:	4821      	ldr	r0, [pc, #132]	; (401e14 <board_init+0x18c>)
  401d8e:	4b26      	ldr	r3, [pc, #152]	; (401e28 <board_init+0x1a0>)
  401d90:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  401d92:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d96:	2074      	movs	r0, #116	; 0x74
  401d98:	4b24      	ldr	r3, [pc, #144]	; (401e2c <board_init+0x1a4>)
  401d9a:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  401d9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401da0:	2075      	movs	r0, #117	; 0x75
  401da2:	4b22      	ldr	r3, [pc, #136]	; (401e2c <board_init+0x1a4>)
  401da4:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  401da6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401daa:	2076      	movs	r0, #118	; 0x76
  401dac:	4b1f      	ldr	r3, [pc, #124]	; (401e2c <board_init+0x1a4>)
  401dae:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  401db0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401db4:	207b      	movs	r0, #123	; 0x7b
  401db6:	4b1d      	ldr	r3, [pc, #116]	; (401e2c <board_init+0x1a4>)
  401db8:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  401dba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401dbe:	2018      	movs	r0, #24
  401dc0:	4b1a      	ldr	r3, [pc, #104]	; (401e2c <board_init+0x1a4>)
  401dc2:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  401dc4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401dc8:	2006      	movs	r0, #6
  401dca:	4b18      	ldr	r3, [pc, #96]	; (401e2c <board_init+0x1a4>)
  401dcc:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  401dce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401dd2:	2053      	movs	r0, #83	; 0x53
  401dd4:	4b15      	ldr	r3, [pc, #84]	; (401e2c <board_init+0x1a4>)
  401dd6:	4798      	blx	r3
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  401dd8:	2053      	movs	r0, #83	; 0x53
  401dda:	4b15      	ldr	r3, [pc, #84]	; (401e30 <board_init+0x1a8>)
  401ddc:	4798      	blx	r3

#endif
}
  401dde:	bf00      	nop
  401de0:	bd98      	pop	{r3, r4, r7, pc}
  401de2:	bf00      	nop
  401de4:	400e1850 	.word	0x400e1850
  401de8:	400e0c00 	.word	0x400e0c00
  401dec:	5a00080c 	.word	0x5a00080c
  401df0:	5a00070c 	.word	0x5a00070c
  401df4:	00401c45 	.word	0x00401c45
  401df8:	004018ed 	.word	0x004018ed
  401dfc:	00401a81 	.word	0x00401a81
  401e00:	00401b09 	.word	0x00401b09
  401e04:	00401965 	.word	0x00401965
  401e08:	00401b75 	.word	0x00401b75
  401e0c:	00401919 	.word	0x00401919
  401e10:	40088000 	.word	0x40088000
  401e14:	400e1200 	.word	0x400e1200
  401e18:	00402071 	.word	0x00402071
  401e1c:	400e1600 	.word	0x400e1600
  401e20:	400e0e00 	.word	0x400e0e00
  401e24:	400e1400 	.word	0x400e1400
  401e28:	00401e61 	.word	0x00401e61
  401e2c:	00402255 	.word	0x00402255
  401e30:	004021f5 	.word	0x004021f5

00401e34 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401e34:	b480      	push	{r7}
  401e36:	b085      	sub	sp, #20
  401e38:	af00      	add	r7, sp, #0
  401e3a:	60f8      	str	r0, [r7, #12]
  401e3c:	60b9      	str	r1, [r7, #8]
  401e3e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e40:	687b      	ldr	r3, [r7, #4]
  401e42:	2b00      	cmp	r3, #0
  401e44:	d003      	beq.n	401e4e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401e46:	68fb      	ldr	r3, [r7, #12]
  401e48:	68ba      	ldr	r2, [r7, #8]
  401e4a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401e4c:	e002      	b.n	401e54 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401e4e:	68fb      	ldr	r3, [r7, #12]
  401e50:	68ba      	ldr	r2, [r7, #8]
  401e52:	661a      	str	r2, [r3, #96]	; 0x60
}
  401e54:	bf00      	nop
  401e56:	3714      	adds	r7, #20
  401e58:	46bd      	mov	sp, r7
  401e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e5e:	4770      	bx	lr

00401e60 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401e60:	b480      	push	{r7}
  401e62:	b083      	sub	sp, #12
  401e64:	af00      	add	r7, sp, #0
  401e66:	6078      	str	r0, [r7, #4]
  401e68:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401e6a:	687b      	ldr	r3, [r7, #4]
  401e6c:	683a      	ldr	r2, [r7, #0]
  401e6e:	631a      	str	r2, [r3, #48]	; 0x30
}
  401e70:	bf00      	nop
  401e72:	370c      	adds	r7, #12
  401e74:	46bd      	mov	sp, r7
  401e76:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e7a:	4770      	bx	lr

00401e7c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401e7c:	b480      	push	{r7}
  401e7e:	b087      	sub	sp, #28
  401e80:	af00      	add	r7, sp, #0
  401e82:	60f8      	str	r0, [r7, #12]
  401e84:	60b9      	str	r1, [r7, #8]
  401e86:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401e88:	68fb      	ldr	r3, [r7, #12]
  401e8a:	687a      	ldr	r2, [r7, #4]
  401e8c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401e8e:	68bb      	ldr	r3, [r7, #8]
  401e90:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401e94:	d04a      	beq.n	401f2c <pio_set_peripheral+0xb0>
  401e96:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401e9a:	d808      	bhi.n	401eae <pio_set_peripheral+0x32>
  401e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401ea0:	d016      	beq.n	401ed0 <pio_set_peripheral+0x54>
  401ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401ea6:	d02c      	beq.n	401f02 <pio_set_peripheral+0x86>
  401ea8:	2b00      	cmp	r3, #0
  401eaa:	d069      	beq.n	401f80 <pio_set_peripheral+0x104>
  401eac:	e064      	b.n	401f78 <pio_set_peripheral+0xfc>
  401eae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401eb2:	d065      	beq.n	401f80 <pio_set_peripheral+0x104>
  401eb4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401eb8:	d803      	bhi.n	401ec2 <pio_set_peripheral+0x46>
  401eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401ebe:	d04a      	beq.n	401f56 <pio_set_peripheral+0xda>
  401ec0:	e05a      	b.n	401f78 <pio_set_peripheral+0xfc>
  401ec2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401ec6:	d05b      	beq.n	401f80 <pio_set_peripheral+0x104>
  401ec8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401ecc:	d058      	beq.n	401f80 <pio_set_peripheral+0x104>
  401ece:	e053      	b.n	401f78 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ed0:	68fb      	ldr	r3, [r7, #12]
  401ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401ed4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401ed6:	68fb      	ldr	r3, [r7, #12]
  401ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401eda:	687b      	ldr	r3, [r7, #4]
  401edc:	43d9      	mvns	r1, r3
  401ede:	697b      	ldr	r3, [r7, #20]
  401ee0:	400b      	ands	r3, r1
  401ee2:	401a      	ands	r2, r3
  401ee4:	68fb      	ldr	r3, [r7, #12]
  401ee6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ee8:	68fb      	ldr	r3, [r7, #12]
  401eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401eec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401eee:	68fb      	ldr	r3, [r7, #12]
  401ef0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ef2:	687b      	ldr	r3, [r7, #4]
  401ef4:	43d9      	mvns	r1, r3
  401ef6:	697b      	ldr	r3, [r7, #20]
  401ef8:	400b      	ands	r3, r1
  401efa:	401a      	ands	r2, r3
  401efc:	68fb      	ldr	r3, [r7, #12]
  401efe:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401f00:	e03a      	b.n	401f78 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f02:	68fb      	ldr	r3, [r7, #12]
  401f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401f06:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401f08:	687a      	ldr	r2, [r7, #4]
  401f0a:	697b      	ldr	r3, [r7, #20]
  401f0c:	431a      	orrs	r2, r3
  401f0e:	68fb      	ldr	r3, [r7, #12]
  401f10:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f12:	68fb      	ldr	r3, [r7, #12]
  401f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401f16:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401f18:	68fb      	ldr	r3, [r7, #12]
  401f1a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401f1c:	687b      	ldr	r3, [r7, #4]
  401f1e:	43d9      	mvns	r1, r3
  401f20:	697b      	ldr	r3, [r7, #20]
  401f22:	400b      	ands	r3, r1
  401f24:	401a      	ands	r2, r3
  401f26:	68fb      	ldr	r3, [r7, #12]
  401f28:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401f2a:	e025      	b.n	401f78 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f2c:	68fb      	ldr	r3, [r7, #12]
  401f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401f30:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401f32:	68fb      	ldr	r3, [r7, #12]
  401f34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401f36:	687b      	ldr	r3, [r7, #4]
  401f38:	43d9      	mvns	r1, r3
  401f3a:	697b      	ldr	r3, [r7, #20]
  401f3c:	400b      	ands	r3, r1
  401f3e:	401a      	ands	r2, r3
  401f40:	68fb      	ldr	r3, [r7, #12]
  401f42:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f44:	68fb      	ldr	r3, [r7, #12]
  401f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401f48:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401f4a:	687a      	ldr	r2, [r7, #4]
  401f4c:	697b      	ldr	r3, [r7, #20]
  401f4e:	431a      	orrs	r2, r3
  401f50:	68fb      	ldr	r3, [r7, #12]
  401f52:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401f54:	e010      	b.n	401f78 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401f56:	68fb      	ldr	r3, [r7, #12]
  401f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401f5a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401f5c:	687a      	ldr	r2, [r7, #4]
  401f5e:	697b      	ldr	r3, [r7, #20]
  401f60:	431a      	orrs	r2, r3
  401f62:	68fb      	ldr	r3, [r7, #12]
  401f64:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401f66:	68fb      	ldr	r3, [r7, #12]
  401f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401f6a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401f6c:	687a      	ldr	r2, [r7, #4]
  401f6e:	697b      	ldr	r3, [r7, #20]
  401f70:	431a      	orrs	r2, r3
  401f72:	68fb      	ldr	r3, [r7, #12]
  401f74:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401f76:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401f78:	68fb      	ldr	r3, [r7, #12]
  401f7a:	687a      	ldr	r2, [r7, #4]
  401f7c:	605a      	str	r2, [r3, #4]
  401f7e:	e000      	b.n	401f82 <pio_set_peripheral+0x106>
		return;
  401f80:	bf00      	nop
}
  401f82:	371c      	adds	r7, #28
  401f84:	46bd      	mov	sp, r7
  401f86:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f8a:	4770      	bx	lr

00401f8c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401f8c:	b580      	push	{r7, lr}
  401f8e:	b084      	sub	sp, #16
  401f90:	af00      	add	r7, sp, #0
  401f92:	60f8      	str	r0, [r7, #12]
  401f94:	60b9      	str	r1, [r7, #8]
  401f96:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401f98:	68b9      	ldr	r1, [r7, #8]
  401f9a:	68f8      	ldr	r0, [r7, #12]
  401f9c:	4b19      	ldr	r3, [pc, #100]	; (402004 <pio_set_input+0x78>)
  401f9e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401fa0:	687b      	ldr	r3, [r7, #4]
  401fa2:	f003 0301 	and.w	r3, r3, #1
  401fa6:	461a      	mov	r2, r3
  401fa8:	68b9      	ldr	r1, [r7, #8]
  401faa:	68f8      	ldr	r0, [r7, #12]
  401fac:	4b16      	ldr	r3, [pc, #88]	; (402008 <pio_set_input+0x7c>)
  401fae:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401fb0:	687b      	ldr	r3, [r7, #4]
  401fb2:	f003 030a 	and.w	r3, r3, #10
  401fb6:	2b00      	cmp	r3, #0
  401fb8:	d003      	beq.n	401fc2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401fba:	68fb      	ldr	r3, [r7, #12]
  401fbc:	68ba      	ldr	r2, [r7, #8]
  401fbe:	621a      	str	r2, [r3, #32]
  401fc0:	e002      	b.n	401fc8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401fc2:	68fb      	ldr	r3, [r7, #12]
  401fc4:	68ba      	ldr	r2, [r7, #8]
  401fc6:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401fc8:	687b      	ldr	r3, [r7, #4]
  401fca:	f003 0302 	and.w	r3, r3, #2
  401fce:	2b00      	cmp	r3, #0
  401fd0:	d004      	beq.n	401fdc <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401fd2:	68fb      	ldr	r3, [r7, #12]
  401fd4:	68ba      	ldr	r2, [r7, #8]
  401fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401fda:	e008      	b.n	401fee <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401fdc:	687b      	ldr	r3, [r7, #4]
  401fde:	f003 0308 	and.w	r3, r3, #8
  401fe2:	2b00      	cmp	r3, #0
  401fe4:	d003      	beq.n	401fee <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401fe6:	68fb      	ldr	r3, [r7, #12]
  401fe8:	68ba      	ldr	r2, [r7, #8]
  401fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401fee:	68fb      	ldr	r3, [r7, #12]
  401ff0:	68ba      	ldr	r2, [r7, #8]
  401ff2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401ff4:	68fb      	ldr	r3, [r7, #12]
  401ff6:	68ba      	ldr	r2, [r7, #8]
  401ff8:	601a      	str	r2, [r3, #0]
}
  401ffa:	bf00      	nop
  401ffc:	3710      	adds	r7, #16
  401ffe:	46bd      	mov	sp, r7
  402000:	bd80      	pop	{r7, pc}
  402002:	bf00      	nop
  402004:	004021a9 	.word	0x004021a9
  402008:	00401e35 	.word	0x00401e35

0040200c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40200c:	b580      	push	{r7, lr}
  40200e:	b084      	sub	sp, #16
  402010:	af00      	add	r7, sp, #0
  402012:	60f8      	str	r0, [r7, #12]
  402014:	60b9      	str	r1, [r7, #8]
  402016:	607a      	str	r2, [r7, #4]
  402018:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40201a:	68b9      	ldr	r1, [r7, #8]
  40201c:	68f8      	ldr	r0, [r7, #12]
  40201e:	4b12      	ldr	r3, [pc, #72]	; (402068 <pio_set_output+0x5c>)
  402020:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  402022:	69ba      	ldr	r2, [r7, #24]
  402024:	68b9      	ldr	r1, [r7, #8]
  402026:	68f8      	ldr	r0, [r7, #12]
  402028:	4b10      	ldr	r3, [pc, #64]	; (40206c <pio_set_output+0x60>)
  40202a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40202c:	683b      	ldr	r3, [r7, #0]
  40202e:	2b00      	cmp	r3, #0
  402030:	d003      	beq.n	40203a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  402032:	68fb      	ldr	r3, [r7, #12]
  402034:	68ba      	ldr	r2, [r7, #8]
  402036:	651a      	str	r2, [r3, #80]	; 0x50
  402038:	e002      	b.n	402040 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40203a:	68fb      	ldr	r3, [r7, #12]
  40203c:	68ba      	ldr	r2, [r7, #8]
  40203e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402040:	687b      	ldr	r3, [r7, #4]
  402042:	2b00      	cmp	r3, #0
  402044:	d003      	beq.n	40204e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  402046:	68fb      	ldr	r3, [r7, #12]
  402048:	68ba      	ldr	r2, [r7, #8]
  40204a:	631a      	str	r2, [r3, #48]	; 0x30
  40204c:	e002      	b.n	402054 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40204e:	68fb      	ldr	r3, [r7, #12]
  402050:	68ba      	ldr	r2, [r7, #8]
  402052:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402054:	68fb      	ldr	r3, [r7, #12]
  402056:	68ba      	ldr	r2, [r7, #8]
  402058:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40205a:	68fb      	ldr	r3, [r7, #12]
  40205c:	68ba      	ldr	r2, [r7, #8]
  40205e:	601a      	str	r2, [r3, #0]
}
  402060:	bf00      	nop
  402062:	3710      	adds	r7, #16
  402064:	46bd      	mov	sp, r7
  402066:	bd80      	pop	{r7, pc}
  402068:	004021a9 	.word	0x004021a9
  40206c:	00401e35 	.word	0x00401e35

00402070 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  402070:	b590      	push	{r4, r7, lr}
  402072:	b087      	sub	sp, #28
  402074:	af02      	add	r7, sp, #8
  402076:	60f8      	str	r0, [r7, #12]
  402078:	60b9      	str	r1, [r7, #8]
  40207a:	607a      	str	r2, [r7, #4]
  40207c:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40207e:	68bb      	ldr	r3, [r7, #8]
  402080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402084:	d016      	beq.n	4020b4 <pio_configure+0x44>
  402086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40208a:	d809      	bhi.n	4020a0 <pio_configure+0x30>
  40208c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402090:	d010      	beq.n	4020b4 <pio_configure+0x44>
  402092:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402096:	d00d      	beq.n	4020b4 <pio_configure+0x44>
  402098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40209c:	d00a      	beq.n	4020b4 <pio_configure+0x44>
  40209e:	e03d      	b.n	40211c <pio_configure+0xac>
  4020a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4020a4:	d01a      	beq.n	4020dc <pio_configure+0x6c>
  4020a6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4020aa:	d017      	beq.n	4020dc <pio_configure+0x6c>
  4020ac:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4020b0:	d00e      	beq.n	4020d0 <pio_configure+0x60>
  4020b2:	e033      	b.n	40211c <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4020b4:	687a      	ldr	r2, [r7, #4]
  4020b6:	68b9      	ldr	r1, [r7, #8]
  4020b8:	68f8      	ldr	r0, [r7, #12]
  4020ba:	4b1c      	ldr	r3, [pc, #112]	; (40212c <pio_configure+0xbc>)
  4020bc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  4020be:	683b      	ldr	r3, [r7, #0]
  4020c0:	f003 0301 	and.w	r3, r3, #1
  4020c4:	461a      	mov	r2, r3
  4020c6:	6879      	ldr	r1, [r7, #4]
  4020c8:	68f8      	ldr	r0, [r7, #12]
  4020ca:	4b19      	ldr	r3, [pc, #100]	; (402130 <pio_configure+0xc0>)
  4020cc:	4798      	blx	r3
		break;
  4020ce:	e027      	b.n	402120 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4020d0:	683a      	ldr	r2, [r7, #0]
  4020d2:	6879      	ldr	r1, [r7, #4]
  4020d4:	68f8      	ldr	r0, [r7, #12]
  4020d6:	4b17      	ldr	r3, [pc, #92]	; (402134 <pio_configure+0xc4>)
  4020d8:	4798      	blx	r3
		break;
  4020da:	e021      	b.n	402120 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4020dc:	68bb      	ldr	r3, [r7, #8]
  4020de:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4020e2:	bf0c      	ite	eq
  4020e4:	2301      	moveq	r3, #1
  4020e6:	2300      	movne	r3, #0
  4020e8:	b2db      	uxtb	r3, r3
  4020ea:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4020ec:	683b      	ldr	r3, [r7, #0]
  4020ee:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4020f2:	2b00      	cmp	r3, #0
  4020f4:	bf14      	ite	ne
  4020f6:	2301      	movne	r3, #1
  4020f8:	2300      	moveq	r3, #0
  4020fa:	b2db      	uxtb	r3, r3
  4020fc:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  4020fe:	683b      	ldr	r3, [r7, #0]
  402100:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402104:	2b00      	cmp	r3, #0
  402106:	bf14      	ite	ne
  402108:	2301      	movne	r3, #1
  40210a:	2300      	moveq	r3, #0
  40210c:	b2db      	uxtb	r3, r3
  40210e:	9300      	str	r3, [sp, #0]
  402110:	460b      	mov	r3, r1
  402112:	6879      	ldr	r1, [r7, #4]
  402114:	68f8      	ldr	r0, [r7, #12]
  402116:	4c08      	ldr	r4, [pc, #32]	; (402138 <pio_configure+0xc8>)
  402118:	47a0      	blx	r4
		break;
  40211a:	e001      	b.n	402120 <pio_configure+0xb0>

	default:
		return 0;
  40211c:	2300      	movs	r3, #0
  40211e:	e000      	b.n	402122 <pio_configure+0xb2>
	}

	return 1;
  402120:	2301      	movs	r3, #1
}
  402122:	4618      	mov	r0, r3
  402124:	3714      	adds	r7, #20
  402126:	46bd      	mov	sp, r7
  402128:	bd90      	pop	{r4, r7, pc}
  40212a:	bf00      	nop
  40212c:	00401e7d 	.word	0x00401e7d
  402130:	00401e35 	.word	0x00401e35
  402134:	00401f8d 	.word	0x00401f8d
  402138:	0040200d 	.word	0x0040200d

0040213c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40213c:	b480      	push	{r7}
  40213e:	b085      	sub	sp, #20
  402140:	af00      	add	r7, sp, #0
  402142:	60f8      	str	r0, [r7, #12]
  402144:	60b9      	str	r1, [r7, #8]
  402146:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402148:	687b      	ldr	r3, [r7, #4]
  40214a:	f003 0310 	and.w	r3, r3, #16
  40214e:	2b00      	cmp	r3, #0
  402150:	d020      	beq.n	402194 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402152:	68fb      	ldr	r3, [r7, #12]
  402154:	68ba      	ldr	r2, [r7, #8]
  402156:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40215a:	687b      	ldr	r3, [r7, #4]
  40215c:	f003 0320 	and.w	r3, r3, #32
  402160:	2b00      	cmp	r3, #0
  402162:	d004      	beq.n	40216e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402164:	68fb      	ldr	r3, [r7, #12]
  402166:	68ba      	ldr	r2, [r7, #8]
  402168:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40216c:	e003      	b.n	402176 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40216e:	68fb      	ldr	r3, [r7, #12]
  402170:	68ba      	ldr	r2, [r7, #8]
  402172:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402176:	687b      	ldr	r3, [r7, #4]
  402178:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40217c:	2b00      	cmp	r3, #0
  40217e:	d004      	beq.n	40218a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402180:	68fb      	ldr	r3, [r7, #12]
  402182:	68ba      	ldr	r2, [r7, #8]
  402184:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402188:	e008      	b.n	40219c <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  40218a:	68fb      	ldr	r3, [r7, #12]
  40218c:	68ba      	ldr	r2, [r7, #8]
  40218e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  402192:	e003      	b.n	40219c <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  402194:	68fb      	ldr	r3, [r7, #12]
  402196:	68ba      	ldr	r2, [r7, #8]
  402198:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  40219c:	bf00      	nop
  40219e:	3714      	adds	r7, #20
  4021a0:	46bd      	mov	sp, r7
  4021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021a6:	4770      	bx	lr

004021a8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4021a8:	b480      	push	{r7}
  4021aa:	b083      	sub	sp, #12
  4021ac:	af00      	add	r7, sp, #0
  4021ae:	6078      	str	r0, [r7, #4]
  4021b0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4021b2:	687b      	ldr	r3, [r7, #4]
  4021b4:	683a      	ldr	r2, [r7, #0]
  4021b6:	645a      	str	r2, [r3, #68]	; 0x44
}
  4021b8:	bf00      	nop
  4021ba:	370c      	adds	r7, #12
  4021bc:	46bd      	mov	sp, r7
  4021be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021c2:	4770      	bx	lr

004021c4 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4021c4:	b480      	push	{r7}
  4021c6:	b083      	sub	sp, #12
  4021c8:	af00      	add	r7, sp, #0
  4021ca:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4021cc:	687b      	ldr	r3, [r7, #4]
  4021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4021d0:	4618      	mov	r0, r3
  4021d2:	370c      	adds	r7, #12
  4021d4:	46bd      	mov	sp, r7
  4021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021da:	4770      	bx	lr

004021dc <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4021dc:	b480      	push	{r7}
  4021de:	b083      	sub	sp, #12
  4021e0:	af00      	add	r7, sp, #0
  4021e2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4021e4:	687b      	ldr	r3, [r7, #4]
  4021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4021e8:	4618      	mov	r0, r3
  4021ea:	370c      	adds	r7, #12
  4021ec:	46bd      	mov	sp, r7
  4021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021f2:	4770      	bx	lr

004021f4 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  4021f4:	b580      	push	{r7, lr}
  4021f6:	b084      	sub	sp, #16
  4021f8:	af00      	add	r7, sp, #0
  4021fa:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4021fc:	6878      	ldr	r0, [r7, #4]
  4021fe:	4b08      	ldr	r3, [pc, #32]	; (402220 <pio_set_pin_high+0x2c>)
  402200:	4798      	blx	r3
  402202:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402204:	687b      	ldr	r3, [r7, #4]
  402206:	f003 031f 	and.w	r3, r3, #31
  40220a:	2201      	movs	r2, #1
  40220c:	fa02 f303 	lsl.w	r3, r2, r3
  402210:	461a      	mov	r2, r3
  402212:	68fb      	ldr	r3, [r7, #12]
  402214:	631a      	str	r2, [r3, #48]	; 0x30
}
  402216:	bf00      	nop
  402218:	3710      	adds	r7, #16
  40221a:	46bd      	mov	sp, r7
  40221c:	bd80      	pop	{r7, pc}
  40221e:	bf00      	nop
  402220:	00402405 	.word	0x00402405

00402224 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  402224:	b580      	push	{r7, lr}
  402226:	b084      	sub	sp, #16
  402228:	af00      	add	r7, sp, #0
  40222a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40222c:	6878      	ldr	r0, [r7, #4]
  40222e:	4b08      	ldr	r3, [pc, #32]	; (402250 <pio_set_pin_low+0x2c>)
  402230:	4798      	blx	r3
  402232:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402234:	687b      	ldr	r3, [r7, #4]
  402236:	f003 031f 	and.w	r3, r3, #31
  40223a:	2201      	movs	r2, #1
  40223c:	fa02 f303 	lsl.w	r3, r2, r3
  402240:	461a      	mov	r2, r3
  402242:	68fb      	ldr	r3, [r7, #12]
  402244:	635a      	str	r2, [r3, #52]	; 0x34
}
  402246:	bf00      	nop
  402248:	3710      	adds	r7, #16
  40224a:	46bd      	mov	sp, r7
  40224c:	bd80      	pop	{r7, pc}
  40224e:	bf00      	nop
  402250:	00402405 	.word	0x00402405

00402254 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402254:	b590      	push	{r4, r7, lr}
  402256:	b087      	sub	sp, #28
  402258:	af02      	add	r7, sp, #8
  40225a:	6078      	str	r0, [r7, #4]
  40225c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40225e:	6878      	ldr	r0, [r7, #4]
  402260:	4b63      	ldr	r3, [pc, #396]	; (4023f0 <pio_configure_pin+0x19c>)
  402262:	4798      	blx	r3
  402264:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402266:	683b      	ldr	r3, [r7, #0]
  402268:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40226c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402270:	d067      	beq.n	402342 <pio_configure_pin+0xee>
  402272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402276:	d809      	bhi.n	40228c <pio_configure_pin+0x38>
  402278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40227c:	d02b      	beq.n	4022d6 <pio_configure_pin+0x82>
  40227e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402282:	d043      	beq.n	40230c <pio_configure_pin+0xb8>
  402284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402288:	d00a      	beq.n	4022a0 <pio_configure_pin+0x4c>
  40228a:	e0a9      	b.n	4023e0 <pio_configure_pin+0x18c>
  40228c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402290:	d07e      	beq.n	402390 <pio_configure_pin+0x13c>
  402292:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402296:	d07b      	beq.n	402390 <pio_configure_pin+0x13c>
  402298:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40229c:	d06c      	beq.n	402378 <pio_configure_pin+0x124>
  40229e:	e09f      	b.n	4023e0 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4022a0:	687b      	ldr	r3, [r7, #4]
  4022a2:	f003 031f 	and.w	r3, r3, #31
  4022a6:	2201      	movs	r2, #1
  4022a8:	fa02 f303 	lsl.w	r3, r2, r3
  4022ac:	461a      	mov	r2, r3
  4022ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4022b2:	68f8      	ldr	r0, [r7, #12]
  4022b4:	4b4f      	ldr	r3, [pc, #316]	; (4023f4 <pio_configure_pin+0x1a0>)
  4022b6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4022b8:	687b      	ldr	r3, [r7, #4]
  4022ba:	f003 031f 	and.w	r3, r3, #31
  4022be:	2201      	movs	r2, #1
  4022c0:	fa02 f303 	lsl.w	r3, r2, r3
  4022c4:	4619      	mov	r1, r3
  4022c6:	683b      	ldr	r3, [r7, #0]
  4022c8:	f003 0301 	and.w	r3, r3, #1
  4022cc:	461a      	mov	r2, r3
  4022ce:	68f8      	ldr	r0, [r7, #12]
  4022d0:	4b49      	ldr	r3, [pc, #292]	; (4023f8 <pio_configure_pin+0x1a4>)
  4022d2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4022d4:	e086      	b.n	4023e4 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4022d6:	687b      	ldr	r3, [r7, #4]
  4022d8:	f003 031f 	and.w	r3, r3, #31
  4022dc:	2201      	movs	r2, #1
  4022de:	fa02 f303 	lsl.w	r3, r2, r3
  4022e2:	461a      	mov	r2, r3
  4022e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4022e8:	68f8      	ldr	r0, [r7, #12]
  4022ea:	4b42      	ldr	r3, [pc, #264]	; (4023f4 <pio_configure_pin+0x1a0>)
  4022ec:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4022ee:	687b      	ldr	r3, [r7, #4]
  4022f0:	f003 031f 	and.w	r3, r3, #31
  4022f4:	2201      	movs	r2, #1
  4022f6:	fa02 f303 	lsl.w	r3, r2, r3
  4022fa:	4619      	mov	r1, r3
  4022fc:	683b      	ldr	r3, [r7, #0]
  4022fe:	f003 0301 	and.w	r3, r3, #1
  402302:	461a      	mov	r2, r3
  402304:	68f8      	ldr	r0, [r7, #12]
  402306:	4b3c      	ldr	r3, [pc, #240]	; (4023f8 <pio_configure_pin+0x1a4>)
  402308:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40230a:	e06b      	b.n	4023e4 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40230c:	687b      	ldr	r3, [r7, #4]
  40230e:	f003 031f 	and.w	r3, r3, #31
  402312:	2201      	movs	r2, #1
  402314:	fa02 f303 	lsl.w	r3, r2, r3
  402318:	461a      	mov	r2, r3
  40231a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40231e:	68f8      	ldr	r0, [r7, #12]
  402320:	4b34      	ldr	r3, [pc, #208]	; (4023f4 <pio_configure_pin+0x1a0>)
  402322:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402324:	687b      	ldr	r3, [r7, #4]
  402326:	f003 031f 	and.w	r3, r3, #31
  40232a:	2201      	movs	r2, #1
  40232c:	fa02 f303 	lsl.w	r3, r2, r3
  402330:	4619      	mov	r1, r3
  402332:	683b      	ldr	r3, [r7, #0]
  402334:	f003 0301 	and.w	r3, r3, #1
  402338:	461a      	mov	r2, r3
  40233a:	68f8      	ldr	r0, [r7, #12]
  40233c:	4b2e      	ldr	r3, [pc, #184]	; (4023f8 <pio_configure_pin+0x1a4>)
  40233e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402340:	e050      	b.n	4023e4 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402342:	687b      	ldr	r3, [r7, #4]
  402344:	f003 031f 	and.w	r3, r3, #31
  402348:	2201      	movs	r2, #1
  40234a:	fa02 f303 	lsl.w	r3, r2, r3
  40234e:	461a      	mov	r2, r3
  402350:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402354:	68f8      	ldr	r0, [r7, #12]
  402356:	4b27      	ldr	r3, [pc, #156]	; (4023f4 <pio_configure_pin+0x1a0>)
  402358:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40235a:	687b      	ldr	r3, [r7, #4]
  40235c:	f003 031f 	and.w	r3, r3, #31
  402360:	2201      	movs	r2, #1
  402362:	fa02 f303 	lsl.w	r3, r2, r3
  402366:	4619      	mov	r1, r3
  402368:	683b      	ldr	r3, [r7, #0]
  40236a:	f003 0301 	and.w	r3, r3, #1
  40236e:	461a      	mov	r2, r3
  402370:	68f8      	ldr	r0, [r7, #12]
  402372:	4b21      	ldr	r3, [pc, #132]	; (4023f8 <pio_configure_pin+0x1a4>)
  402374:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402376:	e035      	b.n	4023e4 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402378:	687b      	ldr	r3, [r7, #4]
  40237a:	f003 031f 	and.w	r3, r3, #31
  40237e:	2201      	movs	r2, #1
  402380:	fa02 f303 	lsl.w	r3, r2, r3
  402384:	683a      	ldr	r2, [r7, #0]
  402386:	4619      	mov	r1, r3
  402388:	68f8      	ldr	r0, [r7, #12]
  40238a:	4b1c      	ldr	r3, [pc, #112]	; (4023fc <pio_configure_pin+0x1a8>)
  40238c:	4798      	blx	r3
		break;
  40238e:	e029      	b.n	4023e4 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402390:	687b      	ldr	r3, [r7, #4]
  402392:	f003 031f 	and.w	r3, r3, #31
  402396:	2201      	movs	r2, #1
  402398:	fa02 f303 	lsl.w	r3, r2, r3
  40239c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40239e:	683b      	ldr	r3, [r7, #0]
  4023a0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4023a4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4023a8:	bf0c      	ite	eq
  4023aa:	2301      	moveq	r3, #1
  4023ac:	2300      	movne	r3, #0
  4023ae:	b2db      	uxtb	r3, r3
  4023b0:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4023b2:	683b      	ldr	r3, [r7, #0]
  4023b4:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4023b8:	2b00      	cmp	r3, #0
  4023ba:	bf14      	ite	ne
  4023bc:	2301      	movne	r3, #1
  4023be:	2300      	moveq	r3, #0
  4023c0:	b2db      	uxtb	r3, r3
  4023c2:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4023c4:	683b      	ldr	r3, [r7, #0]
  4023c6:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4023ca:	2b00      	cmp	r3, #0
  4023cc:	bf14      	ite	ne
  4023ce:	2301      	movne	r3, #1
  4023d0:	2300      	moveq	r3, #0
  4023d2:	b2db      	uxtb	r3, r3
  4023d4:	9300      	str	r3, [sp, #0]
  4023d6:	4603      	mov	r3, r0
  4023d8:	68f8      	ldr	r0, [r7, #12]
  4023da:	4c09      	ldr	r4, [pc, #36]	; (402400 <pio_configure_pin+0x1ac>)
  4023dc:	47a0      	blx	r4
		break;
  4023de:	e001      	b.n	4023e4 <pio_configure_pin+0x190>

	default:
		return 0;
  4023e0:	2300      	movs	r3, #0
  4023e2:	e000      	b.n	4023e6 <pio_configure_pin+0x192>
	}

	return 1;
  4023e4:	2301      	movs	r3, #1
}
  4023e6:	4618      	mov	r0, r3
  4023e8:	3714      	adds	r7, #20
  4023ea:	46bd      	mov	sp, r7
  4023ec:	bd90      	pop	{r4, r7, pc}
  4023ee:	bf00      	nop
  4023f0:	00402405 	.word	0x00402405
  4023f4:	00401e7d 	.word	0x00401e7d
  4023f8:	00401e35 	.word	0x00401e35
  4023fc:	00401f8d 	.word	0x00401f8d
  402400:	0040200d 	.word	0x0040200d

00402404 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  402404:	b480      	push	{r7}
  402406:	b085      	sub	sp, #20
  402408:	af00      	add	r7, sp, #0
  40240a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40240c:	687b      	ldr	r3, [r7, #4]
  40240e:	095a      	lsrs	r2, r3, #5
  402410:	4b05      	ldr	r3, [pc, #20]	; (402428 <pio_get_pin_group+0x24>)
  402412:	4413      	add	r3, r2
  402414:	025b      	lsls	r3, r3, #9
  402416:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  402418:	68fb      	ldr	r3, [r7, #12]
}
  40241a:	4618      	mov	r0, r3
  40241c:	3714      	adds	r7, #20
  40241e:	46bd      	mov	sp, r7
  402420:	f85d 7b04 	ldr.w	r7, [sp], #4
  402424:	4770      	bx	lr
  402426:	bf00      	nop
  402428:	00200707 	.word	0x00200707

0040242c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40242c:	b580      	push	{r7, lr}
  40242e:	b084      	sub	sp, #16
  402430:	af00      	add	r7, sp, #0
  402432:	6078      	str	r0, [r7, #4]
  402434:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402436:	6878      	ldr	r0, [r7, #4]
  402438:	4b26      	ldr	r3, [pc, #152]	; (4024d4 <pio_handler_process+0xa8>)
  40243a:	4798      	blx	r3
  40243c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40243e:	6878      	ldr	r0, [r7, #4]
  402440:	4b25      	ldr	r3, [pc, #148]	; (4024d8 <pio_handler_process+0xac>)
  402442:	4798      	blx	r3
  402444:	4602      	mov	r2, r0
  402446:	68fb      	ldr	r3, [r7, #12]
  402448:	4013      	ands	r3, r2
  40244a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40244c:	68fb      	ldr	r3, [r7, #12]
  40244e:	2b00      	cmp	r3, #0
  402450:	d03c      	beq.n	4024cc <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  402452:	2300      	movs	r3, #0
  402454:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  402456:	e034      	b.n	4024c2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402458:	4a20      	ldr	r2, [pc, #128]	; (4024dc <pio_handler_process+0xb0>)
  40245a:	68bb      	ldr	r3, [r7, #8]
  40245c:	011b      	lsls	r3, r3, #4
  40245e:	4413      	add	r3, r2
  402460:	681a      	ldr	r2, [r3, #0]
  402462:	683b      	ldr	r3, [r7, #0]
  402464:	429a      	cmp	r2, r3
  402466:	d126      	bne.n	4024b6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402468:	4a1c      	ldr	r2, [pc, #112]	; (4024dc <pio_handler_process+0xb0>)
  40246a:	68bb      	ldr	r3, [r7, #8]
  40246c:	011b      	lsls	r3, r3, #4
  40246e:	4413      	add	r3, r2
  402470:	3304      	adds	r3, #4
  402472:	681a      	ldr	r2, [r3, #0]
  402474:	68fb      	ldr	r3, [r7, #12]
  402476:	4013      	ands	r3, r2
  402478:	2b00      	cmp	r3, #0
  40247a:	d01c      	beq.n	4024b6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40247c:	4a17      	ldr	r2, [pc, #92]	; (4024dc <pio_handler_process+0xb0>)
  40247e:	68bb      	ldr	r3, [r7, #8]
  402480:	011b      	lsls	r3, r3, #4
  402482:	4413      	add	r3, r2
  402484:	330c      	adds	r3, #12
  402486:	681b      	ldr	r3, [r3, #0]
  402488:	4914      	ldr	r1, [pc, #80]	; (4024dc <pio_handler_process+0xb0>)
  40248a:	68ba      	ldr	r2, [r7, #8]
  40248c:	0112      	lsls	r2, r2, #4
  40248e:	440a      	add	r2, r1
  402490:	6810      	ldr	r0, [r2, #0]
  402492:	4912      	ldr	r1, [pc, #72]	; (4024dc <pio_handler_process+0xb0>)
  402494:	68ba      	ldr	r2, [r7, #8]
  402496:	0112      	lsls	r2, r2, #4
  402498:	440a      	add	r2, r1
  40249a:	3204      	adds	r2, #4
  40249c:	6812      	ldr	r2, [r2, #0]
  40249e:	4611      	mov	r1, r2
  4024a0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4024a2:	4a0e      	ldr	r2, [pc, #56]	; (4024dc <pio_handler_process+0xb0>)
  4024a4:	68bb      	ldr	r3, [r7, #8]
  4024a6:	011b      	lsls	r3, r3, #4
  4024a8:	4413      	add	r3, r2
  4024aa:	3304      	adds	r3, #4
  4024ac:	681b      	ldr	r3, [r3, #0]
  4024ae:	43db      	mvns	r3, r3
  4024b0:	68fa      	ldr	r2, [r7, #12]
  4024b2:	4013      	ands	r3, r2
  4024b4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4024b6:	68bb      	ldr	r3, [r7, #8]
  4024b8:	3301      	adds	r3, #1
  4024ba:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4024bc:	68bb      	ldr	r3, [r7, #8]
  4024be:	2b06      	cmp	r3, #6
  4024c0:	d803      	bhi.n	4024ca <pio_handler_process+0x9e>
		while (status != 0) {
  4024c2:	68fb      	ldr	r3, [r7, #12]
  4024c4:	2b00      	cmp	r3, #0
  4024c6:	d1c7      	bne.n	402458 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4024c8:	e000      	b.n	4024cc <pio_handler_process+0xa0>
				break;
  4024ca:	bf00      	nop
}
  4024cc:	bf00      	nop
  4024ce:	3710      	adds	r7, #16
  4024d0:	46bd      	mov	sp, r7
  4024d2:	bd80      	pop	{r7, pc}
  4024d4:	004021c5 	.word	0x004021c5
  4024d8:	004021dd 	.word	0x004021dd
  4024dc:	20400818 	.word	0x20400818

004024e0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4024e0:	b580      	push	{r7, lr}
  4024e2:	b086      	sub	sp, #24
  4024e4:	af00      	add	r7, sp, #0
  4024e6:	60f8      	str	r0, [r7, #12]
  4024e8:	60b9      	str	r1, [r7, #8]
  4024ea:	607a      	str	r2, [r7, #4]
  4024ec:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4024ee:	4b21      	ldr	r3, [pc, #132]	; (402574 <pio_handler_set+0x94>)
  4024f0:	681b      	ldr	r3, [r3, #0]
  4024f2:	2b06      	cmp	r3, #6
  4024f4:	d901      	bls.n	4024fa <pio_handler_set+0x1a>
		return 1;
  4024f6:	2301      	movs	r3, #1
  4024f8:	e038      	b.n	40256c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4024fa:	2300      	movs	r3, #0
  4024fc:	75fb      	strb	r3, [r7, #23]
  4024fe:	e011      	b.n	402524 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  402500:	7dfb      	ldrb	r3, [r7, #23]
  402502:	011b      	lsls	r3, r3, #4
  402504:	4a1c      	ldr	r2, [pc, #112]	; (402578 <pio_handler_set+0x98>)
  402506:	4413      	add	r3, r2
  402508:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40250a:	693b      	ldr	r3, [r7, #16]
  40250c:	681a      	ldr	r2, [r3, #0]
  40250e:	68bb      	ldr	r3, [r7, #8]
  402510:	429a      	cmp	r2, r3
  402512:	d104      	bne.n	40251e <pio_handler_set+0x3e>
  402514:	693b      	ldr	r3, [r7, #16]
  402516:	685a      	ldr	r2, [r3, #4]
  402518:	687b      	ldr	r3, [r7, #4]
  40251a:	429a      	cmp	r2, r3
  40251c:	d008      	beq.n	402530 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40251e:	7dfb      	ldrb	r3, [r7, #23]
  402520:	3301      	adds	r3, #1
  402522:	75fb      	strb	r3, [r7, #23]
  402524:	7dfa      	ldrb	r2, [r7, #23]
  402526:	4b13      	ldr	r3, [pc, #76]	; (402574 <pio_handler_set+0x94>)
  402528:	681b      	ldr	r3, [r3, #0]
  40252a:	429a      	cmp	r2, r3
  40252c:	d9e8      	bls.n	402500 <pio_handler_set+0x20>
  40252e:	e000      	b.n	402532 <pio_handler_set+0x52>
			break;
  402530:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  402532:	693b      	ldr	r3, [r7, #16]
  402534:	68ba      	ldr	r2, [r7, #8]
  402536:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  402538:	693b      	ldr	r3, [r7, #16]
  40253a:	687a      	ldr	r2, [r7, #4]
  40253c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40253e:	693b      	ldr	r3, [r7, #16]
  402540:	683a      	ldr	r2, [r7, #0]
  402542:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  402544:	693b      	ldr	r3, [r7, #16]
  402546:	6a3a      	ldr	r2, [r7, #32]
  402548:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40254a:	7dfa      	ldrb	r2, [r7, #23]
  40254c:	4b09      	ldr	r3, [pc, #36]	; (402574 <pio_handler_set+0x94>)
  40254e:	681b      	ldr	r3, [r3, #0]
  402550:	3301      	adds	r3, #1
  402552:	429a      	cmp	r2, r3
  402554:	d104      	bne.n	402560 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  402556:	4b07      	ldr	r3, [pc, #28]	; (402574 <pio_handler_set+0x94>)
  402558:	681b      	ldr	r3, [r3, #0]
  40255a:	3301      	adds	r3, #1
  40255c:	4a05      	ldr	r2, [pc, #20]	; (402574 <pio_handler_set+0x94>)
  40255e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402560:	683a      	ldr	r2, [r7, #0]
  402562:	6879      	ldr	r1, [r7, #4]
  402564:	68f8      	ldr	r0, [r7, #12]
  402566:	4b05      	ldr	r3, [pc, #20]	; (40257c <pio_handler_set+0x9c>)
  402568:	4798      	blx	r3

	return 0;
  40256a:	2300      	movs	r3, #0
}
  40256c:	4618      	mov	r0, r3
  40256e:	3718      	adds	r7, #24
  402570:	46bd      	mov	sp, r7
  402572:	bd80      	pop	{r7, pc}
  402574:	20400888 	.word	0x20400888
  402578:	20400818 	.word	0x20400818
  40257c:	0040213d 	.word	0x0040213d

00402580 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402580:	b580      	push	{r7, lr}
  402582:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  402584:	210a      	movs	r1, #10
  402586:	4802      	ldr	r0, [pc, #8]	; (402590 <PIOA_Handler+0x10>)
  402588:	4b02      	ldr	r3, [pc, #8]	; (402594 <PIOA_Handler+0x14>)
  40258a:	4798      	blx	r3
}
  40258c:	bf00      	nop
  40258e:	bd80      	pop	{r7, pc}
  402590:	400e0e00 	.word	0x400e0e00
  402594:	0040242d 	.word	0x0040242d

00402598 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402598:	b580      	push	{r7, lr}
  40259a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40259c:	210b      	movs	r1, #11
  40259e:	4802      	ldr	r0, [pc, #8]	; (4025a8 <PIOB_Handler+0x10>)
  4025a0:	4b02      	ldr	r3, [pc, #8]	; (4025ac <PIOB_Handler+0x14>)
  4025a2:	4798      	blx	r3
}
  4025a4:	bf00      	nop
  4025a6:	bd80      	pop	{r7, pc}
  4025a8:	400e1000 	.word	0x400e1000
  4025ac:	0040242d 	.word	0x0040242d

004025b0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4025b0:	b580      	push	{r7, lr}
  4025b2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4025b4:	210c      	movs	r1, #12
  4025b6:	4802      	ldr	r0, [pc, #8]	; (4025c0 <PIOC_Handler+0x10>)
  4025b8:	4b02      	ldr	r3, [pc, #8]	; (4025c4 <PIOC_Handler+0x14>)
  4025ba:	4798      	blx	r3
}
  4025bc:	bf00      	nop
  4025be:	bd80      	pop	{r7, pc}
  4025c0:	400e1200 	.word	0x400e1200
  4025c4:	0040242d 	.word	0x0040242d

004025c8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4025c8:	b580      	push	{r7, lr}
  4025ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4025cc:	2110      	movs	r1, #16
  4025ce:	4802      	ldr	r0, [pc, #8]	; (4025d8 <PIOD_Handler+0x10>)
  4025d0:	4b02      	ldr	r3, [pc, #8]	; (4025dc <PIOD_Handler+0x14>)
  4025d2:	4798      	blx	r3
}
  4025d4:	bf00      	nop
  4025d6:	bd80      	pop	{r7, pc}
  4025d8:	400e1400 	.word	0x400e1400
  4025dc:	0040242d 	.word	0x0040242d

004025e0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4025e0:	b580      	push	{r7, lr}
  4025e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4025e4:	2111      	movs	r1, #17
  4025e6:	4802      	ldr	r0, [pc, #8]	; (4025f0 <PIOE_Handler+0x10>)
  4025e8:	4b02      	ldr	r3, [pc, #8]	; (4025f4 <PIOE_Handler+0x14>)
  4025ea:	4798      	blx	r3
}
  4025ec:	bf00      	nop
  4025ee:	bd80      	pop	{r7, pc}
  4025f0:	400e1600 	.word	0x400e1600
  4025f4:	0040242d 	.word	0x0040242d

004025f8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4025f8:	b480      	push	{r7}
  4025fa:	b083      	sub	sp, #12
  4025fc:	af00      	add	r7, sp, #0
  4025fe:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  402600:	687b      	ldr	r3, [r7, #4]
  402602:	3b01      	subs	r3, #1
  402604:	2b03      	cmp	r3, #3
  402606:	d81a      	bhi.n	40263e <pmc_mck_set_division+0x46>
  402608:	a201      	add	r2, pc, #4	; (adr r2, 402610 <pmc_mck_set_division+0x18>)
  40260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40260e:	bf00      	nop
  402610:	00402621 	.word	0x00402621
  402614:	00402627 	.word	0x00402627
  402618:	0040262f 	.word	0x0040262f
  40261c:	00402637 	.word	0x00402637
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402620:	2300      	movs	r3, #0
  402622:	607b      	str	r3, [r7, #4]
			break;
  402624:	e00e      	b.n	402644 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  402626:	f44f 7380 	mov.w	r3, #256	; 0x100
  40262a:	607b      	str	r3, [r7, #4]
			break;
  40262c:	e00a      	b.n	402644 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40262e:	f44f 7340 	mov.w	r3, #768	; 0x300
  402632:	607b      	str	r3, [r7, #4]
			break;
  402634:	e006      	b.n	402644 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402636:	f44f 7300 	mov.w	r3, #512	; 0x200
  40263a:	607b      	str	r3, [r7, #4]
			break;
  40263c:	e002      	b.n	402644 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40263e:	2300      	movs	r3, #0
  402640:	607b      	str	r3, [r7, #4]
			break;
  402642:	bf00      	nop
	}
	PMC->PMC_MCKR =
  402644:	490a      	ldr	r1, [pc, #40]	; (402670 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402646:	4b0a      	ldr	r3, [pc, #40]	; (402670 <pmc_mck_set_division+0x78>)
  402648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40264a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40264e:	687b      	ldr	r3, [r7, #4]
  402650:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  402652:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402654:	bf00      	nop
  402656:	4b06      	ldr	r3, [pc, #24]	; (402670 <pmc_mck_set_division+0x78>)
  402658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40265a:	f003 0308 	and.w	r3, r3, #8
  40265e:	2b00      	cmp	r3, #0
  402660:	d0f9      	beq.n	402656 <pmc_mck_set_division+0x5e>
}
  402662:	bf00      	nop
  402664:	370c      	adds	r7, #12
  402666:	46bd      	mov	sp, r7
  402668:	f85d 7b04 	ldr.w	r7, [sp], #4
  40266c:	4770      	bx	lr
  40266e:	bf00      	nop
  402670:	400e0600 	.word	0x400e0600

00402674 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402674:	b480      	push	{r7}
  402676:	b085      	sub	sp, #20
  402678:	af00      	add	r7, sp, #0
  40267a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40267c:	491d      	ldr	r1, [pc, #116]	; (4026f4 <pmc_switch_mck_to_pllack+0x80>)
  40267e:	4b1d      	ldr	r3, [pc, #116]	; (4026f4 <pmc_switch_mck_to_pllack+0x80>)
  402680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402686:	687b      	ldr	r3, [r7, #4]
  402688:	4313      	orrs	r3, r2
  40268a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402690:	60fb      	str	r3, [r7, #12]
  402692:	e007      	b.n	4026a4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402694:	68fb      	ldr	r3, [r7, #12]
  402696:	2b00      	cmp	r3, #0
  402698:	d101      	bne.n	40269e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40269a:	2301      	movs	r3, #1
  40269c:	e023      	b.n	4026e6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40269e:	68fb      	ldr	r3, [r7, #12]
  4026a0:	3b01      	subs	r3, #1
  4026a2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026a4:	4b13      	ldr	r3, [pc, #76]	; (4026f4 <pmc_switch_mck_to_pllack+0x80>)
  4026a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4026a8:	f003 0308 	and.w	r3, r3, #8
  4026ac:	2b00      	cmp	r3, #0
  4026ae:	d0f1      	beq.n	402694 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4026b0:	4a10      	ldr	r2, [pc, #64]	; (4026f4 <pmc_switch_mck_to_pllack+0x80>)
  4026b2:	4b10      	ldr	r3, [pc, #64]	; (4026f4 <pmc_switch_mck_to_pllack+0x80>)
  4026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026b6:	f023 0303 	bic.w	r3, r3, #3
  4026ba:	f043 0302 	orr.w	r3, r3, #2
  4026be:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4026c4:	60fb      	str	r3, [r7, #12]
  4026c6:	e007      	b.n	4026d8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4026c8:	68fb      	ldr	r3, [r7, #12]
  4026ca:	2b00      	cmp	r3, #0
  4026cc:	d101      	bne.n	4026d2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4026ce:	2301      	movs	r3, #1
  4026d0:	e009      	b.n	4026e6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4026d2:	68fb      	ldr	r3, [r7, #12]
  4026d4:	3b01      	subs	r3, #1
  4026d6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026d8:	4b06      	ldr	r3, [pc, #24]	; (4026f4 <pmc_switch_mck_to_pllack+0x80>)
  4026da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4026dc:	f003 0308 	and.w	r3, r3, #8
  4026e0:	2b00      	cmp	r3, #0
  4026e2:	d0f1      	beq.n	4026c8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4026e4:	2300      	movs	r3, #0
}
  4026e6:	4618      	mov	r0, r3
  4026e8:	3714      	adds	r7, #20
  4026ea:	46bd      	mov	sp, r7
  4026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026f0:	4770      	bx	lr
  4026f2:	bf00      	nop
  4026f4:	400e0600 	.word	0x400e0600

004026f8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4026f8:	b480      	push	{r7}
  4026fa:	b083      	sub	sp, #12
  4026fc:	af00      	add	r7, sp, #0
  4026fe:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402700:	687b      	ldr	r3, [r7, #4]
  402702:	2b01      	cmp	r3, #1
  402704:	d105      	bne.n	402712 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  402706:	4907      	ldr	r1, [pc, #28]	; (402724 <pmc_switch_sclk_to_32kxtal+0x2c>)
  402708:	4b06      	ldr	r3, [pc, #24]	; (402724 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40270a:	689a      	ldr	r2, [r3, #8]
  40270c:	4b06      	ldr	r3, [pc, #24]	; (402728 <pmc_switch_sclk_to_32kxtal+0x30>)
  40270e:	4313      	orrs	r3, r2
  402710:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  402712:	4b04      	ldr	r3, [pc, #16]	; (402724 <pmc_switch_sclk_to_32kxtal+0x2c>)
  402714:	4a05      	ldr	r2, [pc, #20]	; (40272c <pmc_switch_sclk_to_32kxtal+0x34>)
  402716:	601a      	str	r2, [r3, #0]
}
  402718:	bf00      	nop
  40271a:	370c      	adds	r7, #12
  40271c:	46bd      	mov	sp, r7
  40271e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402722:	4770      	bx	lr
  402724:	400e1810 	.word	0x400e1810
  402728:	a5100000 	.word	0xa5100000
  40272c:	a5000008 	.word	0xa5000008

00402730 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402730:	b480      	push	{r7}
  402732:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  402734:	4b09      	ldr	r3, [pc, #36]	; (40275c <pmc_osc_is_ready_32kxtal+0x2c>)
  402736:	695b      	ldr	r3, [r3, #20]
  402738:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40273c:	2b00      	cmp	r3, #0
  40273e:	d007      	beq.n	402750 <pmc_osc_is_ready_32kxtal+0x20>
  402740:	4b07      	ldr	r3, [pc, #28]	; (402760 <pmc_osc_is_ready_32kxtal+0x30>)
  402742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402744:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402748:	2b00      	cmp	r3, #0
  40274a:	d001      	beq.n	402750 <pmc_osc_is_ready_32kxtal+0x20>
  40274c:	2301      	movs	r3, #1
  40274e:	e000      	b.n	402752 <pmc_osc_is_ready_32kxtal+0x22>
  402750:	2300      	movs	r3, #0
}
  402752:	4618      	mov	r0, r3
  402754:	46bd      	mov	sp, r7
  402756:	f85d 7b04 	ldr.w	r7, [sp], #4
  40275a:	4770      	bx	lr
  40275c:	400e1810 	.word	0x400e1810
  402760:	400e0600 	.word	0x400e0600

00402764 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  402764:	b480      	push	{r7}
  402766:	b083      	sub	sp, #12
  402768:	af00      	add	r7, sp, #0
  40276a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40276c:	4915      	ldr	r1, [pc, #84]	; (4027c4 <pmc_switch_mainck_to_fastrc+0x60>)
  40276e:	4b15      	ldr	r3, [pc, #84]	; (4027c4 <pmc_switch_mainck_to_fastrc+0x60>)
  402770:	6a1a      	ldr	r2, [r3, #32]
  402772:	4b15      	ldr	r3, [pc, #84]	; (4027c8 <pmc_switch_mainck_to_fastrc+0x64>)
  402774:	4313      	orrs	r3, r2
  402776:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402778:	bf00      	nop
  40277a:	4b12      	ldr	r3, [pc, #72]	; (4027c4 <pmc_switch_mainck_to_fastrc+0x60>)
  40277c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402782:	2b00      	cmp	r3, #0
  402784:	d0f9      	beq.n	40277a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402786:	490f      	ldr	r1, [pc, #60]	; (4027c4 <pmc_switch_mainck_to_fastrc+0x60>)
  402788:	4b0e      	ldr	r3, [pc, #56]	; (4027c4 <pmc_switch_mainck_to_fastrc+0x60>)
  40278a:	6a1a      	ldr	r2, [r3, #32]
  40278c:	4b0f      	ldr	r3, [pc, #60]	; (4027cc <pmc_switch_mainck_to_fastrc+0x68>)
  40278e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402790:	687a      	ldr	r2, [r7, #4]
  402792:	4313      	orrs	r3, r2
  402794:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402798:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40279a:	bf00      	nop
  40279c:	4b09      	ldr	r3, [pc, #36]	; (4027c4 <pmc_switch_mainck_to_fastrc+0x60>)
  40279e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4027a4:	2b00      	cmp	r3, #0
  4027a6:	d0f9      	beq.n	40279c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4027a8:	4906      	ldr	r1, [pc, #24]	; (4027c4 <pmc_switch_mainck_to_fastrc+0x60>)
  4027aa:	4b06      	ldr	r3, [pc, #24]	; (4027c4 <pmc_switch_mainck_to_fastrc+0x60>)
  4027ac:	6a1a      	ldr	r2, [r3, #32]
  4027ae:	4b08      	ldr	r3, [pc, #32]	; (4027d0 <pmc_switch_mainck_to_fastrc+0x6c>)
  4027b0:	4013      	ands	r3, r2
  4027b2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4027b6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4027b8:	bf00      	nop
  4027ba:	370c      	adds	r7, #12
  4027bc:	46bd      	mov	sp, r7
  4027be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027c2:	4770      	bx	lr
  4027c4:	400e0600 	.word	0x400e0600
  4027c8:	00370008 	.word	0x00370008
  4027cc:	ffc8ff8f 	.word	0xffc8ff8f
  4027d0:	fec8ffff 	.word	0xfec8ffff

004027d4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4027d4:	b480      	push	{r7}
  4027d6:	b083      	sub	sp, #12
  4027d8:	af00      	add	r7, sp, #0
  4027da:	6078      	str	r0, [r7, #4]
  4027dc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4027de:	687b      	ldr	r3, [r7, #4]
  4027e0:	2b00      	cmp	r3, #0
  4027e2:	d008      	beq.n	4027f6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4027e4:	4913      	ldr	r1, [pc, #76]	; (402834 <pmc_switch_mainck_to_xtal+0x60>)
  4027e6:	4b13      	ldr	r3, [pc, #76]	; (402834 <pmc_switch_mainck_to_xtal+0x60>)
  4027e8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4027ea:	4a13      	ldr	r2, [pc, #76]	; (402838 <pmc_switch_mainck_to_xtal+0x64>)
  4027ec:	401a      	ands	r2, r3
  4027ee:	4b13      	ldr	r3, [pc, #76]	; (40283c <pmc_switch_mainck_to_xtal+0x68>)
  4027f0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4027f2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4027f4:	e018      	b.n	402828 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4027f6:	490f      	ldr	r1, [pc, #60]	; (402834 <pmc_switch_mainck_to_xtal+0x60>)
  4027f8:	4b0e      	ldr	r3, [pc, #56]	; (402834 <pmc_switch_mainck_to_xtal+0x60>)
  4027fa:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4027fc:	4b10      	ldr	r3, [pc, #64]	; (402840 <pmc_switch_mainck_to_xtal+0x6c>)
  4027fe:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402800:	683a      	ldr	r2, [r7, #0]
  402802:	0212      	lsls	r2, r2, #8
  402804:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402806:	431a      	orrs	r2, r3
  402808:	4b0e      	ldr	r3, [pc, #56]	; (402844 <pmc_switch_mainck_to_xtal+0x70>)
  40280a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40280c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40280e:	bf00      	nop
  402810:	4b08      	ldr	r3, [pc, #32]	; (402834 <pmc_switch_mainck_to_xtal+0x60>)
  402812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402814:	f003 0301 	and.w	r3, r3, #1
  402818:	2b00      	cmp	r3, #0
  40281a:	d0f9      	beq.n	402810 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40281c:	4905      	ldr	r1, [pc, #20]	; (402834 <pmc_switch_mainck_to_xtal+0x60>)
  40281e:	4b05      	ldr	r3, [pc, #20]	; (402834 <pmc_switch_mainck_to_xtal+0x60>)
  402820:	6a1a      	ldr	r2, [r3, #32]
  402822:	4b09      	ldr	r3, [pc, #36]	; (402848 <pmc_switch_mainck_to_xtal+0x74>)
  402824:	4313      	orrs	r3, r2
  402826:	620b      	str	r3, [r1, #32]
}
  402828:	bf00      	nop
  40282a:	370c      	adds	r7, #12
  40282c:	46bd      	mov	sp, r7
  40282e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402832:	4770      	bx	lr
  402834:	400e0600 	.word	0x400e0600
  402838:	fec8fffc 	.word	0xfec8fffc
  40283c:	01370002 	.word	0x01370002
  402840:	ffc8fffc 	.word	0xffc8fffc
  402844:	00370001 	.word	0x00370001
  402848:	01370000 	.word	0x01370000

0040284c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40284c:	b480      	push	{r7}
  40284e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402850:	4b04      	ldr	r3, [pc, #16]	; (402864 <pmc_osc_is_ready_mainck+0x18>)
  402852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402858:	4618      	mov	r0, r3
  40285a:	46bd      	mov	sp, r7
  40285c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402860:	4770      	bx	lr
  402862:	bf00      	nop
  402864:	400e0600 	.word	0x400e0600

00402868 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402868:	b480      	push	{r7}
  40286a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40286c:	4b04      	ldr	r3, [pc, #16]	; (402880 <pmc_disable_pllack+0x18>)
  40286e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402872:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402874:	bf00      	nop
  402876:	46bd      	mov	sp, r7
  402878:	f85d 7b04 	ldr.w	r7, [sp], #4
  40287c:	4770      	bx	lr
  40287e:	bf00      	nop
  402880:	400e0600 	.word	0x400e0600

00402884 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402884:	b480      	push	{r7}
  402886:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402888:	4b04      	ldr	r3, [pc, #16]	; (40289c <pmc_is_locked_pllack+0x18>)
  40288a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40288c:	f003 0302 	and.w	r3, r3, #2
}
  402890:	4618      	mov	r0, r3
  402892:	46bd      	mov	sp, r7
  402894:	f85d 7b04 	ldr.w	r7, [sp], #4
  402898:	4770      	bx	lr
  40289a:	bf00      	nop
  40289c:	400e0600 	.word	0x400e0600

004028a0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4028a0:	b480      	push	{r7}
  4028a2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4028a4:	4b04      	ldr	r3, [pc, #16]	; (4028b8 <pmc_is_locked_upll+0x18>)
  4028a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4028ac:	4618      	mov	r0, r3
  4028ae:	46bd      	mov	sp, r7
  4028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028b4:	4770      	bx	lr
  4028b6:	bf00      	nop
  4028b8:	400e0600 	.word	0x400e0600

004028bc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4028bc:	b480      	push	{r7}
  4028be:	b085      	sub	sp, #20
  4028c0:	af00      	add	r7, sp, #0
  4028c2:	6078      	str	r0, [r7, #4]
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4028c4:	4a0b      	ldr	r2, [pc, #44]	; (4028f4 <pmc_enable_periph_clk+0x38>)
  4028c6:	687b      	ldr	r3, [r7, #4]
  4028c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4028cc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4028d0:	4b08      	ldr	r3, [pc, #32]	; (4028f4 <pmc_enable_periph_clk+0x38>)
  4028d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  4028d6:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  4028da:	60fb      	str	r3, [r7, #12]
	PMC->PMC_PCR = pcr;
  4028dc:	4a05      	ldr	r2, [pc, #20]	; (4028f4 <pmc_enable_periph_clk+0x38>)
  4028de:	68fb      	ldr	r3, [r7, #12]
  4028e0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	return 0;
  4028e4:	2300      	movs	r3, #0
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4028e6:	4618      	mov	r0, r3
  4028e8:	3714      	adds	r7, #20
  4028ea:	46bd      	mov	sp, r7
  4028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028f0:	4770      	bx	lr
  4028f2:	bf00      	nop
  4028f4:	400e0600 	.word	0x400e0600

004028f8 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4028f8:	b480      	push	{r7}
  4028fa:	b083      	sub	sp, #12
  4028fc:	af00      	add	r7, sp, #0
  4028fe:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  402900:	4a04      	ldr	r2, [pc, #16]	; (402914 <pmc_set_flash_in_wait_mode+0x1c>)
  402902:	687b      	ldr	r3, [r7, #4]
  402904:	6013      	str	r3, [r2, #0]
}
  402906:	bf00      	nop
  402908:	370c      	adds	r7, #12
  40290a:	46bd      	mov	sp, r7
  40290c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402910:	4770      	bx	lr
  402912:	bf00      	nop
  402914:	20400004 	.word	0x20400004

00402918 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  402918:	b480      	push	{r7}
  40291a:	b083      	sub	sp, #12
  40291c:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40291e:	4b20      	ldr	r3, [pc, #128]	; (4029a0 <pmc_enable_waitmode+0x88>)
  402920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402922:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  402924:	687b      	ldr	r3, [r7, #4]
  402926:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  40292a:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40292c:	687b      	ldr	r3, [r7, #4]
  40292e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402932:	607b      	str	r3, [r7, #4]
#endif
	PMC->PMC_FSMR = i;
  402934:	4a1a      	ldr	r2, [pc, #104]	; (4029a0 <pmc_enable_waitmode+0x88>)
  402936:	687b      	ldr	r3, [r7, #4]
  402938:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40293a:	4919      	ldr	r1, [pc, #100]	; (4029a0 <pmc_enable_waitmode+0x88>)
  40293c:	4b18      	ldr	r3, [pc, #96]	; (4029a0 <pmc_enable_waitmode+0x88>)
  40293e:	6a1a      	ldr	r2, [r3, #32]
  402940:	4b18      	ldr	r3, [pc, #96]	; (4029a4 <pmc_enable_waitmode+0x8c>)
  402942:	4313      	orrs	r3, r2
  402944:	620b      	str	r3, [r1, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402946:	bf00      	nop
  402948:	4b15      	ldr	r3, [pc, #84]	; (4029a0 <pmc_enable_waitmode+0x88>)
  40294a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40294c:	f003 0308 	and.w	r3, r3, #8
  402950:	2b00      	cmp	r3, #0
  402952:	d0f9      	beq.n	402948 <pmc_enable_waitmode+0x30>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  402954:	2300      	movs	r3, #0
  402956:	607b      	str	r3, [r7, #4]
  402958:	e003      	b.n	402962 <pmc_enable_waitmode+0x4a>
  __ASM volatile ("nop");
  40295a:	bf00      	nop
  40295c:	687b      	ldr	r3, [r7, #4]
  40295e:	3301      	adds	r3, #1
  402960:	607b      	str	r3, [r7, #4]
  402962:	687b      	ldr	r3, [r7, #4]
  402964:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  402968:	d3f7      	bcc.n	40295a <pmc_enable_waitmode+0x42>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  40296a:	bf00      	nop
  40296c:	4b0c      	ldr	r3, [pc, #48]	; (4029a0 <pmc_enable_waitmode+0x88>)
  40296e:	6a1b      	ldr	r3, [r3, #32]
  402970:	f003 0308 	and.w	r3, r3, #8
  402974:	2b00      	cmp	r3, #0
  402976:	d0f9      	beq.n	40296c <pmc_enable_waitmode+0x54>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  402978:	4b09      	ldr	r3, [pc, #36]	; (4029a0 <pmc_enable_waitmode+0x88>)
  40297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40297c:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  40297e:	687b      	ldr	r3, [r7, #4]
  402980:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  402984:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  402986:	687b      	ldr	r3, [r7, #4]
  402988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40298c:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  40298e:	4a04      	ldr	r2, [pc, #16]	; (4029a0 <pmc_enable_waitmode+0x88>)
  402990:	687b      	ldr	r3, [r7, #4]
  402992:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  402994:	bf00      	nop
  402996:	370c      	adds	r7, #12
  402998:	46bd      	mov	sp, r7
  40299a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40299e:	4770      	bx	lr
  4029a0:	400e0600 	.word	0x400e0600
  4029a4:	00370004 	.word	0x00370004

004029a8 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4029a8:	b590      	push	{r4, r7, lr}
  4029aa:	b099      	sub	sp, #100	; 0x64
  4029ac:	af00      	add	r7, sp, #0
  4029ae:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  4029b0:	687b      	ldr	r3, [r7, #4]
  4029b2:	3b01      	subs	r3, #1
  4029b4:	2b04      	cmp	r3, #4
  4029b6:	f200 81a5 	bhi.w	402d04 <pmc_sleep+0x35c>
  4029ba:	a201      	add	r2, pc, #4	; (adr r2, 4029c0 <pmc_sleep+0x18>)
  4029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4029c0:	004029d5 	.word	0x004029d5
  4029c4:	004029d5 	.word	0x004029d5
  4029c8:	004029f5 	.word	0x004029f5
  4029cc:	004029f5 	.word	0x004029f5
  4029d0:	00402ce3 	.word	0x00402ce3
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4029d4:	4a72      	ldr	r2, [pc, #456]	; (402ba0 <pmc_sleep+0x1f8>)
  4029d6:	4b72      	ldr	r3, [pc, #456]	; (402ba0 <pmc_sleep+0x1f8>)
  4029d8:	691b      	ldr	r3, [r3, #16]
  4029da:	f023 0304 	bic.w	r3, r3, #4
  4029de:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4029e0:	4b70      	ldr	r3, [pc, #448]	; (402ba4 <pmc_sleep+0x1fc>)
  4029e2:	2201      	movs	r2, #1
  4029e4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4029e6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4029ea:	b662      	cpsie	i
  __ASM volatile ("dsb");
  4029ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  4029f0:	bf30      	wfi
		__DSB();
		__WFI();
		break;
  4029f2:	e187      	b.n	402d04 <pmc_sleep+0x35c>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4029f4:	687b      	ldr	r3, [r7, #4]
  4029f6:	2b03      	cmp	r3, #3
  4029f8:	d103      	bne.n	402a02 <pmc_sleep+0x5a>
  4029fa:	2000      	movs	r0, #0
  4029fc:	4b6a      	ldr	r3, [pc, #424]	; (402ba8 <pmc_sleep+0x200>)
  4029fe:	4798      	blx	r3
  402a00:	e003      	b.n	402a0a <pmc_sleep+0x62>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  402a02:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  402a06:	4b68      	ldr	r3, [pc, #416]	; (402ba8 <pmc_sleep+0x200>)
  402a08:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402a0a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402a0c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  402a10:	4b64      	ldr	r3, [pc, #400]	; (402ba4 <pmc_sleep+0x1fc>)
  402a12:	2200      	movs	r2, #0
  402a14:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  402a16:	4b65      	ldr	r3, [pc, #404]	; (402bac <pmc_sleep+0x204>)
  402a18:	2201      	movs	r2, #1
  402a1a:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  402a1c:	687b      	ldr	r3, [r7, #4]
  402a1e:	2b04      	cmp	r3, #4
  402a20:	bf0c      	ite	eq
  402a22:	2301      	moveq	r3, #1
  402a24:	2300      	movne	r3, #0
  402a26:	b2da      	uxtb	r2, r3
  402a28:	f107 031c 	add.w	r3, r7, #28
  402a2c:	643b      	str	r3, [r7, #64]	; 0x40
  402a2e:	f107 0318 	add.w	r3, r7, #24
  402a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  402a34:	f107 0314 	add.w	r3, r7, #20
  402a38:	63bb      	str	r3, [r7, #56]	; 0x38
  402a3a:	f107 0310 	add.w	r3, r7, #16
  402a3e:	637b      	str	r3, [r7, #52]	; 0x34
  402a40:	f107 030c 	add.w	r3, r7, #12
  402a44:	633b      	str	r3, [r7, #48]	; 0x30
  402a46:	4613      	mov	r3, r2
  402a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t mor  = PMC->CKGR_MOR;
  402a4c:	4b58      	ldr	r3, [pc, #352]	; (402bb0 <pmc_sleep+0x208>)
  402a4e:	6a1b      	ldr	r3, [r3, #32]
  402a50:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  402a52:	4b57      	ldr	r3, [pc, #348]	; (402bb0 <pmc_sleep+0x208>)
  402a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a56:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  402a58:	4b56      	ldr	r3, [pc, #344]	; (402bb4 <pmc_sleep+0x20c>)
  402a5a:	681b      	ldr	r3, [r3, #0]
  402a5c:	623b      	str	r3, [r7, #32]
	if (p_osc_setting) {
  402a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  402a60:	2b00      	cmp	r3, #0
  402a62:	d002      	beq.n	402a6a <pmc_sleep+0xc2>
		*p_osc_setting = mor;
  402a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  402a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402a68:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
  402a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402a6c:	2b00      	cmp	r3, #0
  402a6e:	d003      	beq.n	402a78 <pmc_sleep+0xd0>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  402a70:	4b4f      	ldr	r3, [pc, #316]	; (402bb0 <pmc_sleep+0x208>)
  402a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402a76:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
  402a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  402a7a:	2b00      	cmp	r3, #0
  402a7c:	d002      	beq.n	402a84 <pmc_sleep+0xdc>
		*p_pll1_setting = 0;
  402a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  402a80:	2200      	movs	r2, #0
  402a82:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
  402a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402a86:	2b00      	cmp	r3, #0
  402a88:	d002      	beq.n	402a90 <pmc_sleep+0xe8>
		*p_mck_setting  = mckr;
  402a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  402a8e:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
  402a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402a92:	2b00      	cmp	r3, #0
  402a94:	d002      	beq.n	402a9c <pmc_sleep+0xf4>
		*p_fmr_setting  = fmr;
  402a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402a98:	6a3a      	ldr	r2, [r7, #32]
  402a9a:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  402a9c:	4944      	ldr	r1, [pc, #272]	; (402bb0 <pmc_sleep+0x208>)
  402a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402aa0:	4b45      	ldr	r3, [pc, #276]	; (402bb8 <pmc_sleep+0x210>)
  402aa2:	4313      	orrs	r3, r2
  402aa4:	620b      	str	r3, [r1, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  402aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402aa8:	f003 0303 	and.w	r3, r3, #3
  402aac:	2b01      	cmp	r3, #1
  402aae:	d90e      	bls.n	402ace <pmc_sleep+0x126>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  402ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ab2:	f023 0303 	bic.w	r3, r3, #3
  402ab6:	f043 0301 	orr.w	r3, r3, #1
  402aba:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  402abc:	4a3c      	ldr	r2, [pc, #240]	; (402bb0 <pmc_sleep+0x208>)
  402abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ac0:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402ac2:	4b3b      	ldr	r3, [pc, #236]	; (402bb0 <pmc_sleep+0x208>)
  402ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402ac6:	f003 0308 	and.w	r3, r3, #8
  402aca:	2b00      	cmp	r3, #0
  402acc:	d0f9      	beq.n	402ac2 <pmc_sleep+0x11a>
	if (mckr & PMC_MCKR_PRES_Msk) {
  402ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402ad4:	2b00      	cmp	r3, #0
  402ad6:	d00c      	beq.n	402af2 <pmc_sleep+0x14a>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  402ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402ade:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  402ae0:	4a33      	ldr	r2, [pc, #204]	; (402bb0 <pmc_sleep+0x208>)
  402ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ae4:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402ae6:	4b32      	ldr	r3, [pc, #200]	; (402bb0 <pmc_sleep+0x208>)
  402ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402aea:	f003 0308 	and.w	r3, r3, #8
  402aee:	2b00      	cmp	r3, #0
  402af0:	d0f9      	beq.n	402ae6 <pmc_sleep+0x13e>
	pmc_disable_pllack();
  402af2:	4b32      	ldr	r3, [pc, #200]	; (402bbc <pmc_sleep+0x214>)
  402af4:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402af6:	4b2e      	ldr	r3, [pc, #184]	; (402bb0 <pmc_sleep+0x208>)
  402af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402afe:	2b00      	cmp	r3, #0
  402b00:	d0f9      	beq.n	402af6 <pmc_sleep+0x14e>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402b02:	492b      	ldr	r1, [pc, #172]	; (402bb0 <pmc_sleep+0x208>)
  402b04:	4b2a      	ldr	r3, [pc, #168]	; (402bb0 <pmc_sleep+0x208>)
  402b06:	6a1a      	ldr	r2, [r3, #32]
  402b08:	4b2d      	ldr	r3, [pc, #180]	; (402bc0 <pmc_sleep+0x218>)
  402b0a:	4013      	ands	r3, r2
  402b0c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402b10:	620b      	str	r3, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  402b12:	4b27      	ldr	r3, [pc, #156]	; (402bb0 <pmc_sleep+0x208>)
  402b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402b1a:	2b00      	cmp	r3, #0
  402b1c:	d0f9      	beq.n	402b12 <pmc_sleep+0x16a>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  402b1e:	4a25      	ldr	r2, [pc, #148]	; (402bb4 <pmc_sleep+0x20c>)
  402b20:	6a3b      	ldr	r3, [r7, #32]
  402b22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  402b26:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  402b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402b2c:	2b00      	cmp	r3, #0
  402b2e:	d007      	beq.n	402b40 <pmc_sleep+0x198>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402b30:	491f      	ldr	r1, [pc, #124]	; (402bb0 <pmc_sleep+0x208>)
  402b32:	4b1f      	ldr	r3, [pc, #124]	; (402bb0 <pmc_sleep+0x208>)
  402b34:	6a1a      	ldr	r2, [r3, #32]
  402b36:	4b23      	ldr	r3, [pc, #140]	; (402bc4 <pmc_sleep+0x21c>)
  402b38:	4013      	ands	r3, r2
  402b3a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402b3e:	620b      	str	r3, [r1, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  402b40:	4b18      	ldr	r3, [pc, #96]	; (402ba4 <pmc_sleep+0x1fc>)
  402b42:	2201      	movs	r2, #1
  402b44:	701a      	strb	r2, [r3, #0]
  402b46:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402b4a:	b662      	cpsie	i

		pmc_enable_waitmode();
  402b4c:	4b1e      	ldr	r3, [pc, #120]	; (402bc8 <pmc_sleep+0x220>)
  402b4e:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  402b50:	b672      	cpsid	i
  402b52:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  402b56:	4b13      	ldr	r3, [pc, #76]	; (402ba4 <pmc_sleep+0x1fc>)
  402b58:	2200      	movs	r2, #0
  402b5a:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  402b5c:	69fc      	ldr	r4, [r7, #28]
  402b5e:	69b8      	ldr	r0, [r7, #24]
  402b60:	6979      	ldr	r1, [r7, #20]
  402b62:	693a      	ldr	r2, [r7, #16]
  402b64:	68fb      	ldr	r3, [r7, #12]
  402b66:	65fc      	str	r4, [r7, #92]	; 0x5c
  402b68:	65b8      	str	r0, [r7, #88]	; 0x58
  402b6a:	6579      	str	r1, [r7, #84]	; 0x54
  402b6c:	653a      	str	r2, [r7, #80]	; 0x50
  402b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t pll_sr = 0;
  402b70:	2300      	movs	r3, #0
  402b72:	64bb      	str	r3, [r7, #72]	; 0x48
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  402b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  402b76:	f003 0302 	and.w	r3, r3, #2
  402b7a:	2b00      	cmp	r3, #0
  402b7c:	d02c      	beq.n	402bd8 <pmc_sleep+0x230>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402b7e:	490c      	ldr	r1, [pc, #48]	; (402bb0 <pmc_sleep+0x208>)
  402b80:	4b0b      	ldr	r3, [pc, #44]	; (402bb0 <pmc_sleep+0x208>)
  402b82:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402b84:	4a11      	ldr	r2, [pc, #68]	; (402bcc <pmc_sleep+0x224>)
  402b86:	401a      	ands	r2, r3
  402b88:	4b11      	ldr	r3, [pc, #68]	; (402bd0 <pmc_sleep+0x228>)
  402b8a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402b8c:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402b8e:	4908      	ldr	r1, [pc, #32]	; (402bb0 <pmc_sleep+0x208>)
  402b90:	4b07      	ldr	r3, [pc, #28]	; (402bb0 <pmc_sleep+0x208>)
  402b92:	6a1a      	ldr	r2, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
  402b94:	4b0f      	ldr	r3, [pc, #60]	; (402bd4 <pmc_sleep+0x22c>)
  402b96:	4013      	ands	r3, r2
  402b98:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402b9c:	620b      	str	r3, [r1, #32]
  402b9e:	e04e      	b.n	402c3e <pmc_sleep+0x296>
  402ba0:	e000ed00 	.word	0xe000ed00
  402ba4:	20400000 	.word	0x20400000
  402ba8:	004028f9 	.word	0x004028f9
  402bac:	2040088c 	.word	0x2040088c
  402bb0:	400e0600 	.word	0x400e0600
  402bb4:	400e0c00 	.word	0x400e0c00
  402bb8:	00370008 	.word	0x00370008
  402bbc:	00402869 	.word	0x00402869
  402bc0:	fec8ffff 	.word	0xfec8ffff
  402bc4:	ffc8fffe 	.word	0xffc8fffe
  402bc8:	00402919 	.word	0x00402919
  402bcc:	fec8fffc 	.word	0xfec8fffc
  402bd0:	01370002 	.word	0x01370002
  402bd4:	ffc8ff87 	.word	0xffc8ff87
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  402bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  402bda:	f003 0301 	and.w	r3, r3, #1
  402bde:	2b00      	cmp	r3, #0
  402be0:	d02d      	beq.n	402c3e <pmc_sleep+0x296>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  402be2:	4b4a      	ldr	r3, [pc, #296]	; (402d0c <pmc_sleep+0x364>)
  402be4:	6a1b      	ldr	r3, [r3, #32]
  402be6:	f003 0301 	and.w	r3, r3, #1
  402bea:	2b00      	cmp	r3, #0
  402bec:	d10d      	bne.n	402c0a <pmc_sleep+0x262>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402bee:	4947      	ldr	r1, [pc, #284]	; (402d0c <pmc_sleep+0x364>)
  402bf0:	4b46      	ldr	r3, [pc, #280]	; (402d0c <pmc_sleep+0x364>)
  402bf2:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  402bf4:	4a46      	ldr	r2, [pc, #280]	; (402d10 <pmc_sleep+0x368>)
  402bf6:	401a      	ands	r2, r3
  402bf8:	4b46      	ldr	r3, [pc, #280]	; (402d14 <pmc_sleep+0x36c>)
  402bfa:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402bfc:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402bfe:	4b43      	ldr	r3, [pc, #268]	; (402d0c <pmc_sleep+0x364>)
  402c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402c02:	f003 0301 	and.w	r3, r3, #1
  402c06:	2b00      	cmp	r3, #0
  402c08:	d0f9      	beq.n	402bfe <pmc_sleep+0x256>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  402c0a:	4b40      	ldr	r3, [pc, #256]	; (402d0c <pmc_sleep+0x364>)
  402c0c:	6a1b      	ldr	r3, [r3, #32]
  402c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402c12:	2b00      	cmp	r3, #0
  402c14:	d10b      	bne.n	402c2e <pmc_sleep+0x286>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402c16:	493d      	ldr	r1, [pc, #244]	; (402d0c <pmc_sleep+0x364>)
  402c18:	4b3c      	ldr	r3, [pc, #240]	; (402d0c <pmc_sleep+0x364>)
  402c1a:	6a1a      	ldr	r2, [r3, #32]
  402c1c:	4b3e      	ldr	r3, [pc, #248]	; (402d18 <pmc_sleep+0x370>)
  402c1e:	4313      	orrs	r3, r2
  402c20:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  402c22:	4b3a      	ldr	r3, [pc, #232]	; (402d0c <pmc_sleep+0x364>)
  402c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402c2a:	2b00      	cmp	r3, #0
  402c2c:	d0f9      	beq.n	402c22 <pmc_sleep+0x27a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402c2e:	4937      	ldr	r1, [pc, #220]	; (402d0c <pmc_sleep+0x364>)
  402c30:	4b36      	ldr	r3, [pc, #216]	; (402d0c <pmc_sleep+0x364>)
  402c32:	6a1a      	ldr	r2, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
  402c34:	4b39      	ldr	r3, [pc, #228]	; (402d1c <pmc_sleep+0x374>)
  402c36:	4013      	ands	r3, r2
  402c38:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402c3c:	620b      	str	r3, [r1, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  402c3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
  402c40:	4b37      	ldr	r3, [pc, #220]	; (402d20 <pmc_sleep+0x378>)
  402c42:	4013      	ands	r3, r2
  402c44:	2b00      	cmp	r3, #0
  402c46:	d008      	beq.n	402c5a <pmc_sleep+0x2b2>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  402c48:	4a30      	ldr	r2, [pc, #192]	; (402d0c <pmc_sleep+0x364>)
  402c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  402c4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402c50:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  402c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  402c54:	f043 0302 	orr.w	r3, r3, #2
  402c58:	64bb      	str	r3, [r7, #72]	; 0x48
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  402c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402c5c:	f003 0303 	and.w	r3, r3, #3
  402c60:	2b02      	cmp	r3, #2
  402c62:	d105      	bne.n	402c70 <pmc_sleep+0x2c8>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  402c64:	4b29      	ldr	r3, [pc, #164]	; (402d0c <pmc_sleep+0x364>)
  402c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402c68:	f003 0302 	and.w	r3, r3, #2
  402c6c:	2b00      	cmp	r3, #0
  402c6e:	d0f9      	beq.n	402c64 <pmc_sleep+0x2bc>
	mckr = PMC->PMC_MCKR;
  402c70:	4b26      	ldr	r3, [pc, #152]	; (402d0c <pmc_sleep+0x364>)
  402c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c74:	647b      	str	r3, [r7, #68]	; 0x44
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  402c76:	4925      	ldr	r1, [pc, #148]	; (402d0c <pmc_sleep+0x364>)
  402c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  402c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  402c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c84:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  402c86:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402c88:	4b20      	ldr	r3, [pc, #128]	; (402d0c <pmc_sleep+0x364>)
  402c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402c8c:	f003 0308 	and.w	r3, r3, #8
  402c90:	2b00      	cmp	r3, #0
  402c92:	d0f9      	beq.n	402c88 <pmc_sleep+0x2e0>
	EFC0->EEFC_FMR = fmr_setting;
  402c94:	4a23      	ldr	r2, [pc, #140]	; (402d24 <pmc_sleep+0x37c>)
  402c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  402c98:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
  402c9a:	4a1c      	ldr	r2, [pc, #112]	; (402d0c <pmc_sleep+0x364>)
  402c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402c9e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402ca0:	4b1a      	ldr	r3, [pc, #104]	; (402d0c <pmc_sleep+0x364>)
  402ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402ca4:	f003 0308 	and.w	r3, r3, #8
  402ca8:	2b00      	cmp	r3, #0
  402caa:	d0f9      	beq.n	402ca0 <pmc_sleep+0x2f8>
	while (!(PMC->PMC_SR & pll_sr));
  402cac:	4b17      	ldr	r3, [pc, #92]	; (402d0c <pmc_sleep+0x364>)
  402cae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  402cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  402cb2:	4013      	ands	r3, r2
  402cb4:	2b00      	cmp	r3, #0
  402cb6:	d0f9      	beq.n	402cac <pmc_sleep+0x304>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  402cb8:	4b1b      	ldr	r3, [pc, #108]	; (402d28 <pmc_sleep+0x380>)
  402cba:	2200      	movs	r2, #0
  402cbc:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  402cbe:	4b1b      	ldr	r3, [pc, #108]	; (402d2c <pmc_sleep+0x384>)
  402cc0:	681b      	ldr	r3, [r3, #0]
  402cc2:	2b00      	cmp	r3, #0
  402cc4:	d005      	beq.n	402cd2 <pmc_sleep+0x32a>
			callback_clocks_restored();
  402cc6:	4b19      	ldr	r3, [pc, #100]	; (402d2c <pmc_sleep+0x384>)
  402cc8:	681b      	ldr	r3, [r3, #0]
  402cca:	4798      	blx	r3
			callback_clocks_restored = NULL;
  402ccc:	4b17      	ldr	r3, [pc, #92]	; (402d2c <pmc_sleep+0x384>)
  402cce:	2200      	movs	r2, #0
  402cd0:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  402cd2:	4b17      	ldr	r3, [pc, #92]	; (402d30 <pmc_sleep+0x388>)
  402cd4:	2201      	movs	r2, #1
  402cd6:	701a      	strb	r2, [r3, #0]
  402cd8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402cdc:	b662      	cpsie	i

		break;
  402cde:	bf00      	nop
  402ce0:	e010      	b.n	402d04 <pmc_sleep+0x35c>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  402ce2:	4a14      	ldr	r2, [pc, #80]	; (402d34 <pmc_sleep+0x38c>)
  402ce4:	4b13      	ldr	r3, [pc, #76]	; (402d34 <pmc_sleep+0x38c>)
  402ce6:	691b      	ldr	r3, [r3, #16]
  402ce8:	f043 0304 	orr.w	r3, r3, #4
  402cec:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  402cee:	4b12      	ldr	r3, [pc, #72]	; (402d38 <pmc_sleep+0x390>)
  402cf0:	4a12      	ldr	r2, [pc, #72]	; (402d3c <pmc_sleep+0x394>)
  402cf2:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  402cf4:	4b0e      	ldr	r3, [pc, #56]	; (402d30 <pmc_sleep+0x388>)
  402cf6:	2201      	movs	r2, #1
  402cf8:	701a      	strb	r2, [r3, #0]
  402cfa:	f3bf 8f5f 	dmb	sy
  402cfe:	b662      	cpsie	i
  __ASM volatile ("wfi");
  402d00:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  402d02:	bf00      	nop
#endif
	}
}
  402d04:	bf00      	nop
  402d06:	3764      	adds	r7, #100	; 0x64
  402d08:	46bd      	mov	sp, r7
  402d0a:	bd90      	pop	{r4, r7, pc}
  402d0c:	400e0600 	.word	0x400e0600
  402d10:	ffc8fffc 	.word	0xffc8fffc
  402d14:	00370001 	.word	0x00370001
  402d18:	01370000 	.word	0x01370000
  402d1c:	ffc8ff87 	.word	0xffc8ff87
  402d20:	07ff0000 	.word	0x07ff0000
  402d24:	400e0c00 	.word	0x400e0c00
  402d28:	2040088c 	.word	0x2040088c
  402d2c:	20400890 	.word	0x20400890
  402d30:	20400000 	.word	0x20400000
  402d34:	e000ed00 	.word	0xe000ed00
  402d38:	400e1810 	.word	0x400e1810
  402d3c:	a5000004 	.word	0xa5000004

00402d40 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  402d40:	b480      	push	{r7}
  402d42:	b083      	sub	sp, #12
  402d44:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402d46:	f3ef 8310 	mrs	r3, PRIMASK
  402d4a:	607b      	str	r3, [r7, #4]
  return(result);
  402d4c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402d4e:	2b00      	cmp	r3, #0
  402d50:	bf0c      	ite	eq
  402d52:	2301      	moveq	r3, #1
  402d54:	2300      	movne	r3, #0
  402d56:	b2db      	uxtb	r3, r3
  402d58:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402d5a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402d5c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402d60:	4b04      	ldr	r3, [pc, #16]	; (402d74 <cpu_irq_save+0x34>)
  402d62:	2200      	movs	r2, #0
  402d64:	701a      	strb	r2, [r3, #0]
	return flags;
  402d66:	683b      	ldr	r3, [r7, #0]
}
  402d68:	4618      	mov	r0, r3
  402d6a:	370c      	adds	r7, #12
  402d6c:	46bd      	mov	sp, r7
  402d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d72:	4770      	bx	lr
  402d74:	20400000 	.word	0x20400000

00402d78 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402d78:	b480      	push	{r7}
  402d7a:	b083      	sub	sp, #12
  402d7c:	af00      	add	r7, sp, #0
  402d7e:	6078      	str	r0, [r7, #4]
	return (flags);
  402d80:	687b      	ldr	r3, [r7, #4]
  402d82:	2b00      	cmp	r3, #0
  402d84:	bf14      	ite	ne
  402d86:	2301      	movne	r3, #1
  402d88:	2300      	moveq	r3, #0
  402d8a:	b2db      	uxtb	r3, r3
}
  402d8c:	4618      	mov	r0, r3
  402d8e:	370c      	adds	r7, #12
  402d90:	46bd      	mov	sp, r7
  402d92:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d96:	4770      	bx	lr

00402d98 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  402d98:	b580      	push	{r7, lr}
  402d9a:	b082      	sub	sp, #8
  402d9c:	af00      	add	r7, sp, #0
  402d9e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  402da0:	6878      	ldr	r0, [r7, #4]
  402da2:	4b07      	ldr	r3, [pc, #28]	; (402dc0 <cpu_irq_restore+0x28>)
  402da4:	4798      	blx	r3
  402da6:	4603      	mov	r3, r0
  402da8:	2b00      	cmp	r3, #0
  402daa:	d005      	beq.n	402db8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  402dac:	4b05      	ldr	r3, [pc, #20]	; (402dc4 <cpu_irq_restore+0x2c>)
  402dae:	2201      	movs	r2, #1
  402db0:	701a      	strb	r2, [r3, #0]
  402db2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402db6:	b662      	cpsie	i
}
  402db8:	bf00      	nop
  402dba:	3708      	adds	r7, #8
  402dbc:	46bd      	mov	sp, r7
  402dbe:	bd80      	pop	{r7, pc}
  402dc0:	00402d79 	.word	0x00402d79
  402dc4:	20400000 	.word	0x20400000

00402dc8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402dc8:	b580      	push	{r7, lr}
  402dca:	b084      	sub	sp, #16
  402dcc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  402dce:	4b1e      	ldr	r3, [pc, #120]	; (402e48 <Reset_Handler+0x80>)
  402dd0:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  402dd2:	4b1e      	ldr	r3, [pc, #120]	; (402e4c <Reset_Handler+0x84>)
  402dd4:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402dd6:	68fa      	ldr	r2, [r7, #12]
  402dd8:	68bb      	ldr	r3, [r7, #8]
  402dda:	429a      	cmp	r2, r3
  402ddc:	d00c      	beq.n	402df8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  402dde:	e007      	b.n	402df0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  402de0:	68bb      	ldr	r3, [r7, #8]
  402de2:	1d1a      	adds	r2, r3, #4
  402de4:	60ba      	str	r2, [r7, #8]
  402de6:	68fa      	ldr	r2, [r7, #12]
  402de8:	1d11      	adds	r1, r2, #4
  402dea:	60f9      	str	r1, [r7, #12]
  402dec:	6812      	ldr	r2, [r2, #0]
  402dee:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  402df0:	68bb      	ldr	r3, [r7, #8]
  402df2:	4a17      	ldr	r2, [pc, #92]	; (402e50 <Reset_Handler+0x88>)
  402df4:	4293      	cmp	r3, r2
  402df6:	d3f3      	bcc.n	402de0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402df8:	4b16      	ldr	r3, [pc, #88]	; (402e54 <Reset_Handler+0x8c>)
  402dfa:	60bb      	str	r3, [r7, #8]
  402dfc:	e004      	b.n	402e08 <Reset_Handler+0x40>
                *pDest++ = 0;
  402dfe:	68bb      	ldr	r3, [r7, #8]
  402e00:	1d1a      	adds	r2, r3, #4
  402e02:	60ba      	str	r2, [r7, #8]
  402e04:	2200      	movs	r2, #0
  402e06:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  402e08:	68bb      	ldr	r3, [r7, #8]
  402e0a:	4a13      	ldr	r2, [pc, #76]	; (402e58 <Reset_Handler+0x90>)
  402e0c:	4293      	cmp	r3, r2
  402e0e:	d3f6      	bcc.n	402dfe <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  402e10:	4b12      	ldr	r3, [pc, #72]	; (402e5c <Reset_Handler+0x94>)
  402e12:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402e14:	4a12      	ldr	r2, [pc, #72]	; (402e60 <Reset_Handler+0x98>)
  402e16:	68fb      	ldr	r3, [r7, #12]
  402e18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402e1c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  402e1e:	4b11      	ldr	r3, [pc, #68]	; (402e64 <Reset_Handler+0x9c>)
  402e20:	4798      	blx	r3
  402e22:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  402e24:	4a10      	ldr	r2, [pc, #64]	; (402e68 <Reset_Handler+0xa0>)
  402e26:	4b10      	ldr	r3, [pc, #64]	; (402e68 <Reset_Handler+0xa0>)
  402e28:	681b      	ldr	r3, [r3, #0]
  402e2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402e2e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402e30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402e34:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  402e38:	6878      	ldr	r0, [r7, #4]
  402e3a:	4b0c      	ldr	r3, [pc, #48]	; (402e6c <Reset_Handler+0xa4>)
  402e3c:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  402e3e:	4b0c      	ldr	r3, [pc, #48]	; (402e70 <Reset_Handler+0xa8>)
  402e40:	4798      	blx	r3

        /* Branch to main function */
        main();
  402e42:	4b0c      	ldr	r3, [pc, #48]	; (402e74 <Reset_Handler+0xac>)
  402e44:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402e46:	e7fe      	b.n	402e46 <Reset_Handler+0x7e>
  402e48:	0040565c 	.word	0x0040565c
  402e4c:	20400000 	.word	0x20400000
  402e50:	2040043c 	.word	0x2040043c
  402e54:	2040043c 	.word	0x2040043c
  402e58:	204008c8 	.word	0x204008c8
  402e5c:	00400000 	.word	0x00400000
  402e60:	e000ed00 	.word	0xe000ed00
  402e64:	00402d41 	.word	0x00402d41
  402e68:	e000ed88 	.word	0xe000ed88
  402e6c:	00402d99 	.word	0x00402d99
  402e70:	00403099 	.word	0x00403099
  402e74:	00400455 	.word	0x00400455

00402e78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402e78:	b480      	push	{r7}
  402e7a:	af00      	add	r7, sp, #0
        while (1) {
  402e7c:	e7fe      	b.n	402e7c <Dummy_Handler+0x4>
	...

00402e80 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  402e80:	b480      	push	{r7}
  402e82:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402e84:	4b52      	ldr	r3, [pc, #328]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e88:	f003 0303 	and.w	r3, r3, #3
  402e8c:	2b01      	cmp	r3, #1
  402e8e:	d014      	beq.n	402eba <SystemCoreClockUpdate+0x3a>
  402e90:	2b01      	cmp	r3, #1
  402e92:	d302      	bcc.n	402e9a <SystemCoreClockUpdate+0x1a>
  402e94:	2b02      	cmp	r3, #2
  402e96:	d038      	beq.n	402f0a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402e98:	e07a      	b.n	402f90 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402e9a:	4b4e      	ldr	r3, [pc, #312]	; (402fd4 <SystemCoreClockUpdate+0x154>)
  402e9c:	695b      	ldr	r3, [r3, #20]
  402e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402ea2:	2b00      	cmp	r3, #0
  402ea4:	d004      	beq.n	402eb0 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402ea6:	4b4c      	ldr	r3, [pc, #304]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402ea8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402eac:	601a      	str	r2, [r3, #0]
    break;
  402eae:	e06f      	b.n	402f90 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402eb0:	4b49      	ldr	r3, [pc, #292]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402eb2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402eb6:	601a      	str	r2, [r3, #0]
    break;
  402eb8:	e06a      	b.n	402f90 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402eba:	4b45      	ldr	r3, [pc, #276]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402ebc:	6a1b      	ldr	r3, [r3, #32]
  402ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402ec2:	2b00      	cmp	r3, #0
  402ec4:	d003      	beq.n	402ece <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402ec6:	4b44      	ldr	r3, [pc, #272]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402ec8:	4a44      	ldr	r2, [pc, #272]	; (402fdc <SystemCoreClockUpdate+0x15c>)
  402eca:	601a      	str	r2, [r3, #0]
    break;
  402ecc:	e060      	b.n	402f90 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402ece:	4b42      	ldr	r3, [pc, #264]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402ed0:	4a43      	ldr	r2, [pc, #268]	; (402fe0 <SystemCoreClockUpdate+0x160>)
  402ed2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402ed4:	4b3e      	ldr	r3, [pc, #248]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402ed6:	6a1b      	ldr	r3, [r3, #32]
  402ed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402edc:	2b10      	cmp	r3, #16
  402ede:	d004      	beq.n	402eea <SystemCoreClockUpdate+0x6a>
  402ee0:	2b20      	cmp	r3, #32
  402ee2:	d008      	beq.n	402ef6 <SystemCoreClockUpdate+0x76>
  402ee4:	2b00      	cmp	r3, #0
  402ee6:	d00e      	beq.n	402f06 <SystemCoreClockUpdate+0x86>
          break;
  402ee8:	e00e      	b.n	402f08 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  402eea:	4b3b      	ldr	r3, [pc, #236]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402eec:	681b      	ldr	r3, [r3, #0]
  402eee:	005b      	lsls	r3, r3, #1
  402ef0:	4a39      	ldr	r2, [pc, #228]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402ef2:	6013      	str	r3, [r2, #0]
          break;
  402ef4:	e008      	b.n	402f08 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  402ef6:	4b38      	ldr	r3, [pc, #224]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402ef8:	681a      	ldr	r2, [r3, #0]
  402efa:	4613      	mov	r3, r2
  402efc:	005b      	lsls	r3, r3, #1
  402efe:	4413      	add	r3, r2
  402f00:	4a35      	ldr	r2, [pc, #212]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f02:	6013      	str	r3, [r2, #0]
          break;
  402f04:	e000      	b.n	402f08 <SystemCoreClockUpdate+0x88>
          break;
  402f06:	bf00      	nop
    break;
  402f08:	e042      	b.n	402f90 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402f0a:	4b31      	ldr	r3, [pc, #196]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402f0c:	6a1b      	ldr	r3, [r3, #32]
  402f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402f12:	2b00      	cmp	r3, #0
  402f14:	d003      	beq.n	402f1e <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402f16:	4b30      	ldr	r3, [pc, #192]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f18:	4a30      	ldr	r2, [pc, #192]	; (402fdc <SystemCoreClockUpdate+0x15c>)
  402f1a:	601a      	str	r2, [r3, #0]
  402f1c:	e01c      	b.n	402f58 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402f1e:	4b2e      	ldr	r3, [pc, #184]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f20:	4a2f      	ldr	r2, [pc, #188]	; (402fe0 <SystemCoreClockUpdate+0x160>)
  402f22:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402f24:	4b2a      	ldr	r3, [pc, #168]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402f26:	6a1b      	ldr	r3, [r3, #32]
  402f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402f2c:	2b10      	cmp	r3, #16
  402f2e:	d004      	beq.n	402f3a <SystemCoreClockUpdate+0xba>
  402f30:	2b20      	cmp	r3, #32
  402f32:	d008      	beq.n	402f46 <SystemCoreClockUpdate+0xc6>
  402f34:	2b00      	cmp	r3, #0
  402f36:	d00e      	beq.n	402f56 <SystemCoreClockUpdate+0xd6>
          break;
  402f38:	e00e      	b.n	402f58 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  402f3a:	4b27      	ldr	r3, [pc, #156]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f3c:	681b      	ldr	r3, [r3, #0]
  402f3e:	005b      	lsls	r3, r3, #1
  402f40:	4a25      	ldr	r2, [pc, #148]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f42:	6013      	str	r3, [r2, #0]
          break;
  402f44:	e008      	b.n	402f58 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402f46:	4b24      	ldr	r3, [pc, #144]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f48:	681a      	ldr	r2, [r3, #0]
  402f4a:	4613      	mov	r3, r2
  402f4c:	005b      	lsls	r3, r3, #1
  402f4e:	4413      	add	r3, r2
  402f50:	4a21      	ldr	r2, [pc, #132]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f52:	6013      	str	r3, [r2, #0]
          break;
  402f54:	e000      	b.n	402f58 <SystemCoreClockUpdate+0xd8>
          break;
  402f56:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402f58:	4b1d      	ldr	r3, [pc, #116]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f5c:	f003 0303 	and.w	r3, r3, #3
  402f60:	2b02      	cmp	r3, #2
  402f62:	d114      	bne.n	402f8e <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402f64:	4b1a      	ldr	r3, [pc, #104]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402f68:	0c1b      	lsrs	r3, r3, #16
  402f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402f6e:	3301      	adds	r3, #1
  402f70:	4a19      	ldr	r2, [pc, #100]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f72:	6812      	ldr	r2, [r2, #0]
  402f74:	fb02 f303 	mul.w	r3, r2, r3
  402f78:	4a17      	ldr	r2, [pc, #92]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f7a:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402f7c:	4b14      	ldr	r3, [pc, #80]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402f80:	b2db      	uxtb	r3, r3
  402f82:	4a15      	ldr	r2, [pc, #84]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f84:	6812      	ldr	r2, [r2, #0]
  402f86:	fbb2 f3f3 	udiv	r3, r2, r3
  402f8a:	4a13      	ldr	r2, [pc, #76]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f8c:	6013      	str	r3, [r2, #0]
    break;
  402f8e:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402f90:	4b0f      	ldr	r3, [pc, #60]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402f98:	2b70      	cmp	r3, #112	; 0x70
  402f9a:	d108      	bne.n	402fae <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402f9c:	4b0e      	ldr	r3, [pc, #56]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402f9e:	681b      	ldr	r3, [r3, #0]
  402fa0:	4a10      	ldr	r2, [pc, #64]	; (402fe4 <SystemCoreClockUpdate+0x164>)
  402fa2:	fba2 2303 	umull	r2, r3, r2, r3
  402fa6:	085b      	lsrs	r3, r3, #1
  402fa8:	4a0b      	ldr	r2, [pc, #44]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402faa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402fac:	e00a      	b.n	402fc4 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402fae:	4b08      	ldr	r3, [pc, #32]	; (402fd0 <SystemCoreClockUpdate+0x150>)
  402fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402fb2:	091b      	lsrs	r3, r3, #4
  402fb4:	f003 0307 	and.w	r3, r3, #7
  402fb8:	4a07      	ldr	r2, [pc, #28]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402fba:	6812      	ldr	r2, [r2, #0]
  402fbc:	fa22 f303 	lsr.w	r3, r2, r3
  402fc0:	4a05      	ldr	r2, [pc, #20]	; (402fd8 <SystemCoreClockUpdate+0x158>)
  402fc2:	6013      	str	r3, [r2, #0]
}
  402fc4:	bf00      	nop
  402fc6:	46bd      	mov	sp, r7
  402fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fcc:	4770      	bx	lr
  402fce:	bf00      	nop
  402fd0:	400e0600 	.word	0x400e0600
  402fd4:	400e1810 	.word	0x400e1810
  402fd8:	20400008 	.word	0x20400008
  402fdc:	00b71b00 	.word	0x00b71b00
  402fe0:	003d0900 	.word	0x003d0900
  402fe4:	aaaaaaab 	.word	0xaaaaaaab

00402fe8 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402fe8:	b480      	push	{r7}
  402fea:	b083      	sub	sp, #12
  402fec:	af00      	add	r7, sp, #0
  402fee:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402ff0:	687b      	ldr	r3, [r7, #4]
  402ff2:	4a1d      	ldr	r2, [pc, #116]	; (403068 <system_init_flash+0x80>)
  402ff4:	4293      	cmp	r3, r2
  402ff6:	d804      	bhi.n	403002 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402ff8:	4b1c      	ldr	r3, [pc, #112]	; (40306c <system_init_flash+0x84>)
  402ffa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402ffe:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  403000:	e02b      	b.n	40305a <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  403002:	687b      	ldr	r3, [r7, #4]
  403004:	4a1a      	ldr	r2, [pc, #104]	; (403070 <system_init_flash+0x88>)
  403006:	4293      	cmp	r3, r2
  403008:	d803      	bhi.n	403012 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40300a:	4b18      	ldr	r3, [pc, #96]	; (40306c <system_init_flash+0x84>)
  40300c:	4a19      	ldr	r2, [pc, #100]	; (403074 <system_init_flash+0x8c>)
  40300e:	601a      	str	r2, [r3, #0]
}
  403010:	e023      	b.n	40305a <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  403012:	687b      	ldr	r3, [r7, #4]
  403014:	4a18      	ldr	r2, [pc, #96]	; (403078 <system_init_flash+0x90>)
  403016:	4293      	cmp	r3, r2
  403018:	d803      	bhi.n	403022 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40301a:	4b14      	ldr	r3, [pc, #80]	; (40306c <system_init_flash+0x84>)
  40301c:	4a17      	ldr	r2, [pc, #92]	; (40307c <system_init_flash+0x94>)
  40301e:	601a      	str	r2, [r3, #0]
}
  403020:	e01b      	b.n	40305a <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403022:	687b      	ldr	r3, [r7, #4]
  403024:	4a16      	ldr	r2, [pc, #88]	; (403080 <system_init_flash+0x98>)
  403026:	4293      	cmp	r3, r2
  403028:	d803      	bhi.n	403032 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40302a:	4b10      	ldr	r3, [pc, #64]	; (40306c <system_init_flash+0x84>)
  40302c:	4a15      	ldr	r2, [pc, #84]	; (403084 <system_init_flash+0x9c>)
  40302e:	601a      	str	r2, [r3, #0]
}
  403030:	e013      	b.n	40305a <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403032:	687b      	ldr	r3, [r7, #4]
  403034:	4a14      	ldr	r2, [pc, #80]	; (403088 <system_init_flash+0xa0>)
  403036:	4293      	cmp	r3, r2
  403038:	d804      	bhi.n	403044 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40303a:	4b0c      	ldr	r3, [pc, #48]	; (40306c <system_init_flash+0x84>)
  40303c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403040:	601a      	str	r2, [r3, #0]
}
  403042:	e00a      	b.n	40305a <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  403044:	687b      	ldr	r3, [r7, #4]
  403046:	4a11      	ldr	r2, [pc, #68]	; (40308c <system_init_flash+0xa4>)
  403048:	4293      	cmp	r3, r2
  40304a:	d803      	bhi.n	403054 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40304c:	4b07      	ldr	r3, [pc, #28]	; (40306c <system_init_flash+0x84>)
  40304e:	4a10      	ldr	r2, [pc, #64]	; (403090 <system_init_flash+0xa8>)
  403050:	601a      	str	r2, [r3, #0]
}
  403052:	e002      	b.n	40305a <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  403054:	4b05      	ldr	r3, [pc, #20]	; (40306c <system_init_flash+0x84>)
  403056:	4a0f      	ldr	r2, [pc, #60]	; (403094 <system_init_flash+0xac>)
  403058:	601a      	str	r2, [r3, #0]
}
  40305a:	bf00      	nop
  40305c:	370c      	adds	r7, #12
  40305e:	46bd      	mov	sp, r7
  403060:	f85d 7b04 	ldr.w	r7, [sp], #4
  403064:	4770      	bx	lr
  403066:	bf00      	nop
  403068:	015ef3bf 	.word	0x015ef3bf
  40306c:	400e0c00 	.word	0x400e0c00
  403070:	02bde77f 	.word	0x02bde77f
  403074:	04000100 	.word	0x04000100
  403078:	041cdb3f 	.word	0x041cdb3f
  40307c:	04000200 	.word	0x04000200
  403080:	057bceff 	.word	0x057bceff
  403084:	04000300 	.word	0x04000300
  403088:	06dac2bf 	.word	0x06dac2bf
  40308c:	0839b67f 	.word	0x0839b67f
  403090:	04000500 	.word	0x04000500
  403094:	04000600 	.word	0x04000600

00403098 <__libc_init_array>:
  403098:	b570      	push	{r4, r5, r6, lr}
  40309a:	4e0f      	ldr	r6, [pc, #60]	; (4030d8 <__libc_init_array+0x40>)
  40309c:	4d0f      	ldr	r5, [pc, #60]	; (4030dc <__libc_init_array+0x44>)
  40309e:	1b76      	subs	r6, r6, r5
  4030a0:	10b6      	asrs	r6, r6, #2
  4030a2:	bf18      	it	ne
  4030a4:	2400      	movne	r4, #0
  4030a6:	d005      	beq.n	4030b4 <__libc_init_array+0x1c>
  4030a8:	3401      	adds	r4, #1
  4030aa:	f855 3b04 	ldr.w	r3, [r5], #4
  4030ae:	4798      	blx	r3
  4030b0:	42a6      	cmp	r6, r4
  4030b2:	d1f9      	bne.n	4030a8 <__libc_init_array+0x10>
  4030b4:	4e0a      	ldr	r6, [pc, #40]	; (4030e0 <__libc_init_array+0x48>)
  4030b6:	4d0b      	ldr	r5, [pc, #44]	; (4030e4 <__libc_init_array+0x4c>)
  4030b8:	1b76      	subs	r6, r6, r5
  4030ba:	f002 fabd 	bl	405638 <_init>
  4030be:	10b6      	asrs	r6, r6, #2
  4030c0:	bf18      	it	ne
  4030c2:	2400      	movne	r4, #0
  4030c4:	d006      	beq.n	4030d4 <__libc_init_array+0x3c>
  4030c6:	3401      	adds	r4, #1
  4030c8:	f855 3b04 	ldr.w	r3, [r5], #4
  4030cc:	4798      	blx	r3
  4030ce:	42a6      	cmp	r6, r4
  4030d0:	d1f9      	bne.n	4030c6 <__libc_init_array+0x2e>
  4030d2:	bd70      	pop	{r4, r5, r6, pc}
  4030d4:	bd70      	pop	{r4, r5, r6, pc}
  4030d6:	bf00      	nop
  4030d8:	00405644 	.word	0x00405644
  4030dc:	00405644 	.word	0x00405644
  4030e0:	0040564c 	.word	0x0040564c
  4030e4:	00405644 	.word	0x00405644

004030e8 <register_fini>:
  4030e8:	4b02      	ldr	r3, [pc, #8]	; (4030f4 <register_fini+0xc>)
  4030ea:	b113      	cbz	r3, 4030f2 <register_fini+0xa>
  4030ec:	4802      	ldr	r0, [pc, #8]	; (4030f8 <register_fini+0x10>)
  4030ee:	f000 b805 	b.w	4030fc <atexit>
  4030f2:	4770      	bx	lr
  4030f4:	00000000 	.word	0x00000000
  4030f8:	00403109 	.word	0x00403109

004030fc <atexit>:
  4030fc:	2300      	movs	r3, #0
  4030fe:	4601      	mov	r1, r0
  403100:	461a      	mov	r2, r3
  403102:	4618      	mov	r0, r3
  403104:	f000 b81e 	b.w	403144 <__register_exitproc>

00403108 <__libc_fini_array>:
  403108:	b538      	push	{r3, r4, r5, lr}
  40310a:	4c0a      	ldr	r4, [pc, #40]	; (403134 <__libc_fini_array+0x2c>)
  40310c:	4d0a      	ldr	r5, [pc, #40]	; (403138 <__libc_fini_array+0x30>)
  40310e:	1b64      	subs	r4, r4, r5
  403110:	10a4      	asrs	r4, r4, #2
  403112:	d00a      	beq.n	40312a <__libc_fini_array+0x22>
  403114:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403118:	3b01      	subs	r3, #1
  40311a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40311e:	3c01      	subs	r4, #1
  403120:	f855 3904 	ldr.w	r3, [r5], #-4
  403124:	4798      	blx	r3
  403126:	2c00      	cmp	r4, #0
  403128:	d1f9      	bne.n	40311e <__libc_fini_array+0x16>
  40312a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40312e:	f002 ba8d 	b.w	40564c <_fini>
  403132:	bf00      	nop
  403134:	0040565c 	.word	0x0040565c
  403138:	00405658 	.word	0x00405658

0040313c <__retarget_lock_acquire_recursive>:
  40313c:	4770      	bx	lr
  40313e:	bf00      	nop

00403140 <__retarget_lock_release_recursive>:
  403140:	4770      	bx	lr
  403142:	bf00      	nop

00403144 <__register_exitproc>:
  403144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403148:	4d2c      	ldr	r5, [pc, #176]	; (4031fc <__register_exitproc+0xb8>)
  40314a:	4606      	mov	r6, r0
  40314c:	6828      	ldr	r0, [r5, #0]
  40314e:	4698      	mov	r8, r3
  403150:	460f      	mov	r7, r1
  403152:	4691      	mov	r9, r2
  403154:	f7ff fff2 	bl	40313c <__retarget_lock_acquire_recursive>
  403158:	4b29      	ldr	r3, [pc, #164]	; (403200 <__register_exitproc+0xbc>)
  40315a:	681c      	ldr	r4, [r3, #0]
  40315c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403160:	2b00      	cmp	r3, #0
  403162:	d03e      	beq.n	4031e2 <__register_exitproc+0x9e>
  403164:	685a      	ldr	r2, [r3, #4]
  403166:	2a1f      	cmp	r2, #31
  403168:	dc1c      	bgt.n	4031a4 <__register_exitproc+0x60>
  40316a:	f102 0e01 	add.w	lr, r2, #1
  40316e:	b176      	cbz	r6, 40318e <__register_exitproc+0x4a>
  403170:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403174:	2401      	movs	r4, #1
  403176:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40317a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40317e:	4094      	lsls	r4, r2
  403180:	4320      	orrs	r0, r4
  403182:	2e02      	cmp	r6, #2
  403184:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403188:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40318c:	d023      	beq.n	4031d6 <__register_exitproc+0x92>
  40318e:	3202      	adds	r2, #2
  403190:	f8c3 e004 	str.w	lr, [r3, #4]
  403194:	6828      	ldr	r0, [r5, #0]
  403196:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40319a:	f7ff ffd1 	bl	403140 <__retarget_lock_release_recursive>
  40319e:	2000      	movs	r0, #0
  4031a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4031a4:	4b17      	ldr	r3, [pc, #92]	; (403204 <__register_exitproc+0xc0>)
  4031a6:	b30b      	cbz	r3, 4031ec <__register_exitproc+0xa8>
  4031a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4031ac:	f3af 8000 	nop.w
  4031b0:	4603      	mov	r3, r0
  4031b2:	b1d8      	cbz	r0, 4031ec <__register_exitproc+0xa8>
  4031b4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4031b8:	6002      	str	r2, [r0, #0]
  4031ba:	2100      	movs	r1, #0
  4031bc:	6041      	str	r1, [r0, #4]
  4031be:	460a      	mov	r2, r1
  4031c0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4031c4:	f04f 0e01 	mov.w	lr, #1
  4031c8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4031cc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4031d0:	2e00      	cmp	r6, #0
  4031d2:	d0dc      	beq.n	40318e <__register_exitproc+0x4a>
  4031d4:	e7cc      	b.n	403170 <__register_exitproc+0x2c>
  4031d6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4031da:	430c      	orrs	r4, r1
  4031dc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4031e0:	e7d5      	b.n	40318e <__register_exitproc+0x4a>
  4031e2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4031e6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4031ea:	e7bb      	b.n	403164 <__register_exitproc+0x20>
  4031ec:	6828      	ldr	r0, [r5, #0]
  4031ee:	f7ff ffa7 	bl	403140 <__retarget_lock_release_recursive>
  4031f2:	f04f 30ff 	mov.w	r0, #4294967295
  4031f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4031fa:	bf00      	nop
  4031fc:	20400438 	.word	0x20400438
  403200:	00405634 	.word	0x00405634
  403204:	00000000 	.word	0x00000000

00403208 <image_data_sourcecodepro_28_0x41>:
  403208:	ffffffff ffffffff 000000ff ffffffff     ................
  403218:	ffffffff ffffffff ffffffff 0000ffff     ................
  403228:	ffffff00 ff000000 ffffffff ffffffff     ................
  403238:	ffffffff 0000ffff ffffff00 ff000000     ................
  403248:	ffffffff ffffffff ffffffff 0000ffff     ................
  403258:	ffffff00 ff000000 ffffffff ffffffff     ................
  403268:	ffffffff 0000ffff ffffff00 ff000000     ................
  403278:	ffffffff ffffffff 00ffffff ffff0000     ................
  403288:	ffffffff 00ffffff ffff0000 ffffffff     ................
  403298:	00ffffff 00000000 00000000 00000000     ................
  4032a8:	ffff0000 ffffffff 00ffffff ffff0000     ................
  4032b8:	ffffffff 00ffffff ffff0000 ffffffff     ................
  4032c8:	ff000000 ffffffff ffffffff ffffffff     ................
  4032d8:	0000ffff ffffff00 ff000000 ffffffff     ................
  4032e8:	ffffffff ffffffff 0000ffff ffffff00     ................
  4032f8:	ffffffff ffffffff ffffffff ffffffff     ................
  403308:	ffffffff ffffffff ffffffff ffffffff     ................
  403318:	ffffffff ffffffff ffffffff ffffffff     ................
  403328:	ffffffff ffffffff ffffffff ffffffff     ................
  403338:	ffffffff ffffffff                       ........

00403340 <sourcecodepro_28_0x41>:
  403340:	00403208 00000008 0000000d 00000008     .2@.............

00403350 <image_data_sourcecodepro_28_0x42>:
	...
  40335c:	ff000000 ffffffff ffffffff ff000000     ................
  40336c:	ffffffff ffffffff 00ffffff ffff0000     ................
  40337c:	ffffffff ff000000 ffffffff ffffffff     ................
  40338c:	00ffffff ffff0000 ffffffff ff000000     ................
  40339c:	ffffffff ffffffff 00ffffff ffff0000     ................
  4033ac:	ffffffff 00000000 00000000 00000000     ................
  4033bc:	ff000000 ffffffff ffffffff ff000000     ................
  4033cc:	ffffffff ffffffff 00ffffff ffff0000     ................
  4033dc:	ffffffff ff000000 ffffffff ffffffff     ................
  4033ec:	ffffffff 0000ffff ffffff00 ff000000     ................
  4033fc:	ffffffff ffffffff ffffffff 0000ffff     ................
  40340c:	ffffff00 ff000000 ffffffff ffffffff     ................
  40341c:	00ffffff ffff0000 ffffffff 00000000     ................
	...
  403434:	ff000000 ffffffff ffffffff ffffffff     ................
  403444:	ffffffff ffffffff ffffffff ffffffff     ................
  403454:	ffffffff ffffffff ffffffff ffffffff     ................
  403464:	ffffffff ffffffff ffffffff ffffffff     ................
  403474:	ffffffff ffffffff ffffffff ffffffff     ................
  403484:	ffffffff                                ....

00403488 <sourcecodepro_28_0x42>:
  403488:	00403350 00000008 0000000d 00000008     P3@.............

00403498 <image_data_sourcecodepro_28_0x43>:
  403498:	ffffffff ffffffff 000000ff 00000000     ................
  4034a8:	00000000 ffffff00 ffffffff 0000ffff     ................
  4034b8:	00000000 ffffffff ffffffff ffffffff     ................
  4034c8:	ff000000 ffffffff 000000ff ffffffff     ................
  4034d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4034e8:	000000ff ffffffff ffffffff ffffffff     ................
  4034f8:	ffffffff ffffffff ffffffff ff000000     ................
  403508:	ffffffff ffffffff ffffffff ffffffff     ................
  403518:	ffffffff 00ffffff ffff0000 ffffffff     ................
  403528:	ffffffff ffffffff ffffffff ffffffff     ................
  403538:	0000ffff ffffff00 ffffffff ffffffff     ................
  403548:	ffffffff ffffffff ffffffff ffffffff     ................
  403558:	ff000000 ffffffff ffffffff ffffffff     ................
  403568:	ffffffff ffffffff 00ffffff 00000000     ................
  403578:	ffffff00 ffffffff ffffffff 000000ff     ................
  403588:	ffffffff ffffffff ffffffff 00000000     ................
	...
  4035a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4035b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4035c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4035d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4035e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4035f0:	ffffffff 00ffffff                       ........

004035f8 <sourcecodepro_28_0x43>:
  4035f8:	00403498 00000009 0000000d 00000008     .4@.............

00403608 <image_data_sourcecodepro_28_0x44>:
	...
  403618:	ffff0000 ffffffff ffffffff 0000ffff     ................
  403628:	ffffff00 ffffffff ffffffff ffffffff     ................
  403638:	00000000 ffff0000 ffffffff ff000000     ................
  403648:	ffffffff ffffffff ffffffff ffffffff     ................
  403658:	000000ff ffffffff 0000ffff ffffff00     ................
  403668:	ffffffff ffffffff ffffffff ffffffff     ................
  403678:	0000ffff ffffff00 ff000000 ffffffff     ................
  403688:	ffffffff ffffffff ffffffff ffffffff     ................
  403698:	ff000000 0000ffff ffffff00 ffffffff     ................
  4036a8:	ffffffff ffffffff ffffffff 0000ffff     ................
  4036b8:	ffffff00 ff000000 ffffffff ffffffff     ................
  4036c8:	ffffffff ffffffff ffffffff ff000000     ................
  4036d8:	0000ffff ffffff00 ffffffff ffffffff     ................
  4036e8:	ffffffff 00ffffff ffff0000 ffffffff     ................
  4036f8:	ff000000 ffffffff ffffffff ffffffff     ................
  403708:	0000ffff 00000000 ffffffff 0000ffff     ................
	...
  403728:	ffffffff ffffffff ffffffff ffffffff     ................
  403738:	ffffffff ffffffff ffffffff ffffffff     ................
  403748:	ffffffff ffffffff ffffffff ffffffff     ................
  403758:	ffffffff ffffffff ffffffff ffffffff     ................
  403768:	ffffffff ffffffff ffffffff ffffffff     ................
  403778:	ffffffff ffffffff ffffffff ffffffff     ................
  403788:	ffffffff 0000ffff                       ........

00403790 <sourcecodepro_28_0x44>:
  403790:	00403608 0000000a 0000000d 00000008     .6@.............

004037a0 <image_data_sourcecodepro_28_0x45>:
	...
  4037b4:	ffffff00 ff000000 ffffffff ffffffff     ................
  4037c4:	ffffffff ffffffff ffffffff ff000000     ................
  4037d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4037e4:	ffffffff ff000000 ffffffff ffffffff     ................
  4037f4:	ffffffff ffffffff ffffffff 00000000     ................
	...
  403814:	ffffff00 ff000000 ffffffff ffffffff     ................
  403824:	ffffffff ffffffff ffffffff ff000000     ................
  403834:	ffffffff ffffffff ffffffff ffffffff     ................
  403844:	ffffffff ff000000 ffffffff ffffffff     ................
  403854:	ffffffff ffffffff ffffffff ff000000     ................
  403864:	ffffffff ffffffff ffffffff ffffffff     ................
  403874:	ffffffff 00000000 00000000 00000000     ................
	...
  40388c:	ffffff00 ffffffff ffffffff ffffffff     ................
  40389c:	ffffffff ffffffff ffffffff ffffffff     ................
  4038ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4038bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4038cc:	ffffffff ffffffff ffffffff              ............

004038d8 <sourcecodepro_28_0x45>:
  4038d8:	004037a0 00000008 0000000d 00000008     .7@.............

004038e8 <image_data_sourcecodepro_28_0x46>:
	...
  4038f8:	ffff0000 000000ff ffffffff ffffffff     ................
  403908:	ffffffff ffffffff 0000ffff ffffff00     ................
  403918:	ffffffff ffffffff ffffffff 00ffffff     ................
  403928:	ffff0000 ffffffff ffffffff ffffffff     ................
  403938:	ffffffff 00000000 00000000 00000000     ................
  403948:	00000000 ffff0000 000000ff ffffffff     ................
  403958:	ffffffff ffffffff ffffffff 0000ffff     ................
  403968:	ffffff00 ffffffff ffffffff ffffffff     ................
  403978:	00ffffff ffff0000 ffffffff ffffffff     ................
  403988:	ffffffff ffffffff ff000000 ffffffff     ................
  403998:	ffffffff ffffffff ffffffff 000000ff     ................
  4039a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4039b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4039c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4039d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4039e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4039f8:	000000ff                                ....

004039fc <sourcecodepro_28_0x46>:
  4039fc:	004038e8 00000007 0000000d 00000008     .8@.............

00403a0c <image_data_sourcecodepro_28_0x47>:
  403a0c:	ffffffff ffffffff 000000ff 00000000     ................
  403a1c:	00000000 ffffff00 ffffffff 0000ffff     ................
  403a2c:	00000000 ffffffff ffffffff ffffffff     ................
  403a3c:	ff000000 ffffffff 000000ff ffffffff     ................
  403a4c:	ffffffff ffffffff ffffffff ffffffff     ................
  403a5c:	000000ff ffffffff ffffffff ffffffff     ................
  403a6c:	ffffffff ffffffff ffffffff ff000000     ................
  403a7c:	ffffffff ffffffff ffffffff ffffffff     ................
  403a8c:	ffffffff 00ffffff ffff0000 ffffffff     ................
  403a9c:	00ffffff 00000000 00000000 ff000000     ................
  403aac:	0000ffff ffffff00 ffffffff ffffffff     ................
  403abc:	ffffffff 00ffffff ffff0000 ffffffff     ................
  403acc:	ff000000 ffffffff ffffffff ffffffff     ................
  403adc:	0000ffff ffffff00 00ffffff 00000000     ................
  403aec:	ffffff00 ffffffff ffffffff 000000ff     ................
  403afc:	ffffffff ffffffff ffffffff 00000000     ................
	...
  403b14:	ffffffff ffffffff ffffffff ffffffff     ................
  403b24:	ffffffff ffffffff ffffffff ffffffff     ................
  403b34:	ffffffff ffffffff ffffffff ffffffff     ................
  403b44:	ffffffff ffffffff ffffffff ffffffff     ................
  403b54:	ffffffff ffffffff ffffffff ffffffff     ................
  403b64:	ffffffff 00ffffff                       ........

00403b6c <sourcecodepro_28_0x47>:
  403b6c:	00403a0c 00000009 0000000d 00000008     .:@.............

00403b7c <image_data_sourcecodepro_28_0x48>:
  403b7c:	ff000000 ffffffff ffffffff ffffffff     ................
  403b8c:	ffffffff 000000ff 00ffffff ffff0000     ................
  403b9c:	ffffffff ffffffff ffffffff ffffffff     ................
  403bac:	ff000000 0000ffff ffffff00 ffffffff     ................
  403bbc:	ffffffff ffffffff 00ffffff ffff0000     ................
  403bcc:	000000ff ffffffff ffffffff ffffffff     ................
  403bdc:	ffffffff 0000ffff ffffff00 00000000     ................
	...
  403c00:	00ffffff ffff0000 ffffffff ffffffff     ................
  403c10:	ffffffff ffffffff ff000000 0000ffff     ................
  403c20:	ffffff00 ffffffff ffffffff ffffffff     ................
  403c30:	00ffffff ffff0000 000000ff ffffffff     ................
  403c40:	ffffffff ffffffff ffffffff 0000ffff     ................
  403c50:	ffffff00 ff000000 ffffffff ffffffff     ................
  403c60:	ffffffff ffffffff 000000ff 00ffffff     ................
  403c70:	ffff0000 ffffffff ffffffff ffffffff     ................
  403c80:	ffffffff ff000000 ffffffff ffffffff     ................
  403c90:	ffffffff ffffffff ffffffff ffffffff     ................
  403ca0:	ffffffff ffffffff ffffffff ffffffff     ................
  403cb0:	ffffffff ffffffff ffffffff ffffffff     ................
  403cc0:	ffffffff ffffffff ffffffff ffffffff     ................
  403cd0:	ffffffff ffffffff 00ffffff              ............

00403cdc <sourcecodepro_28_0x48>:
  403cdc:	00403b7c 00000009 0000000d 00000008     |;@.............

00403cec <image_data_sourcecodepro_28_0x49>:
	...
  403cf4:	ffffff00 00ffffff ffff0000 ffffffff     ................
  403d04:	00ffffff ffff0000 ffffffff 00ffffff     ................
  403d14:	ffff0000 ffffffff 00ffffff ffff0000     ................
  403d24:	ffffffff 00ffffff ffff0000 ffffffff     ................
  403d34:	00ffffff ffff0000 ffffffff 00ffffff     ................
  403d44:	ffff0000 ffffffff 00ffffff ffff0000     ................
  403d54:	ffffffff 00000000 00000000 ffffff00     ................
  403d64:	ffffffff ffffffff ffffffff ffffffff     ................
  403d74:	ffffffff ffffffff ffffffff ffffffff     ................
  403d84:	ffffffff                                ....

00403d88 <sourcecodepro_28_0x49>:
  403d88:	00403cec 00000004 0000000d 00000008     .<@.............

00403d98 <image_data_sourcecodepro_28_0x4a>:
  403d98:	00ffffff 00000000 00000000 ff000000     ................
  403da8:	ffffffff ffffffff ffffffff 0000ffff     ................
  403db8:	ffffff00 ffffffff ffffffff ffffffff     ................
  403dc8:	ff000000 ffffffff ffffffff ffffffff     ................
  403dd8:	0000ffff ffffff00 ffffffff ffffffff     ................
  403de8:	ffffffff ff000000 ffffffff ffffffff     ................
  403df8:	ffffffff 0000ffff ffffff00 ffffffff     ................
  403e08:	ffffffff ffffffff ff000000 ffffffff     ................
  403e18:	ffffffff ffffffff 0000ffff ffffff00     ................
  403e28:	ffffffff ffffffff ffffffff ff000000     ................
  403e38:	0000ffff 00000000 00000000 ffff0000     ................
  403e48:	ffffffff ffffffff ffffffff ffffffff     ................
  403e58:	ffffffff ffffffff ffffffff ffffffff     ................
  403e68:	ffffffff ffffffff ffffffff ffffffff     ................
  403e78:	ffffffff ffffffff 0000ffff              ............

00403e84 <sourcecodepro_28_0x4a>:
  403e84:	00403d98 00000006 0000000d 00000008     .=@.............

00403e94 <image_data_sourcecodepro_28_0x4b>:
  403e94:	ff000000 ffffffff ffffffff ffffffff     ................
  403ea4:	0000ffff ffffff00 ff000000 ffffffff     ................
  403eb4:	ffffffff 00ffffff ffff0000 ffffffff     ................
  403ec4:	ff000000 ffffffff ffffffff ff000000     ................
  403ed4:	ffffffff ffffffff ff000000 ffffffff     ................
  403ee4:	000000ff ffffffff ffffffff ffffffff     ................
  403ef4:	ff000000 0000ffff ffffff00 ffffffff     ................
  403f04:	ffffffff ffffffff 00000000 00000000     ................
  403f14:	ffffff00 ffffffff ffffffff ffffffff     ................
  403f24:	ff000000 ffffffff 000000ff ffffffff     ................
  403f34:	ffffffff ffffffff ff000000 ffffffff     ................
  403f44:	ffffffff ff000000 ffffffff ffffffff     ................
  403f54:	ff000000 ffffffff ffffffff 00ffffff     ................
  403f64:	ffff0000 ffffffff ff000000 ffffffff     ................
  403f74:	ffffffff ffffffff 0000ffff ffffff00     ................
  403f84:	ffffffff ffffffff ffffffff ffffffff     ................
  403f94:	ffffffff ffffffff ffffffff ffffffff     ................
  403fa4:	ffffffff ffffffff ffffffff ffffffff     ................
  403fb4:	ffffffff ffffffff ffffffff ffffffff     ................
  403fc4:	ffffffff ffffffff                       ........

00403fcc <sourcecodepro_28_0x4b>:
  403fcc:	00403e94 00000008 0000000d 00000008     .>@.............

00403fdc <image_data_sourcecodepro_28_0x4c>:
  403fdc:	ff000000 ffffffff ffffffff ffffffff     ................
  403fec:	ffffffff 000000ff ffffffff ffffffff     ................
  403ffc:	ffffffff ffffffff 0000ffff ffffff00     ................
  40400c:	ffffffff ffffffff ffffffff 00ffffff     ................
  40401c:	ffff0000 ffffffff ffffffff ffffffff     ................
  40402c:	ffffffff ff000000 ffffffff ffffffff     ................
  40403c:	ffffffff ffffffff 000000ff ffffffff     ................
  40404c:	ffffffff ffffffff ffffffff 0000ffff     ................
  40405c:	ffffff00 ffffffff ffffffff ffffffff     ................
  40406c:	00ffffff ffff0000 ffffffff ffffffff     ................
  40407c:	ffffffff ffffffff ff000000 ffffffff     ................
  40408c:	ffffffff ffffffff ffffffff 000000ff     ................
	...
  4040a8:	ff000000 ffffffff ffffffff ffffffff     ................
  4040b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4040c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4040d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4040e8:	ffffffff 000000ff                       ........

004040f0 <sourcecodepro_28_0x4c>:
  4040f0:	00403fdc 00000007 0000000d 00000008     .?@.............

00404100 <image_data_sourcecodepro_28_0x4d>:
  404100:	00000000 ffff0000 ffffffff ffffffff     ................
  404110:	ffffffff 000000ff ff000000 0000ffff     ................
  404120:	00000000 ffffffff ffffffff ffffffff     ................
  404130:	00ffffff 00000000 ffffff00 ff000000     ................
  404140:	0000ffff ffffff00 ffffffff 0000ffff     ................
  404150:	ffffff00 ff000000 0000ffff ffffff00     ................
  404160:	ff000000 ffffffff ffffffff ff000000     ................
  404170:	0000ffff ffffff00 ff000000 ffffffff     ................
  404180:	000000ff 00ffffff ffff0000 ffffffff     ................
  404190:	ff000000 0000ffff ffffff00 00ffffff     ................
  4041a0:	ffff0000 000000ff ffffffff 0000ffff     ................
  4041b0:	ffffff00 ff000000 ffffffff ffffffff     ................
  4041c0:	ff000000 ffffffff ffffffff ff000000     ................
  4041d0:	0000ffff ffffff00 ffffffff 0000ffff     ................
  4041e0:	ffffff00 ffffffff 0000ffff ffffff00     ................
  4041f0:	ff000000 ffffffff ffffffff ffffffff     ................
  404200:	ffffffff ffffffff ff000000 0000ffff     ................
  404210:	ffffff00 ffffffff ffffffff ffffffff     ................
  404220:	ffffffff 0000ffff ffffff00 ffffffff     ................
  404230:	ffffffff ffffffff ffffffff ffffffff     ................
  404240:	ffffffff ffffffff ffffffff ffffffff     ................
  404250:	ffffffff ffffffff ffffffff ffffffff     ................
  404260:	ffffffff ffffffff ffffffff ffffffff     ................
  404270:	ffffffff ffffffff ffffffff ffffffff     ................
  404280:	ffffffff 0000ffff                       ........

00404288 <sourcecodepro_28_0x4d>:
  404288:	00404100 0000000a 0000000d 00000008     .A@.............

00404298 <image_data_sourcecodepro_28_0x4e>:
  404298:	00000000 ffff0000 ffffffff ffffffff     ................
  4042a8:	ffffffff 000000ff 00ffffff 00000000     ................
  4042b8:	ffffff00 ffffffff ffffffff ffffffff     ................
  4042c8:	ff000000 0000ffff ffffff00 ff000000     ................
  4042d8:	ffffffff ffffffff 00ffffff ffff0000     ................
  4042e8:	000000ff 00ffffff ffff0000 ffffffff     ................
  4042f8:	ffffffff 0000ffff ffffff00 ff000000     ................
  404308:	ffffffff 000000ff ffffffff ffffffff     ................
  404318:	000000ff 00ffffff ffff0000 ffffffff     ................
  404328:	00ffffff ffff0000 ffffffff ff000000     ................
  404338:	0000ffff ffffff00 ffffffff 0000ffff     ................
  404348:	ffffff00 00ffffff ffff0000 000000ff     ................
  404358:	ffffffff ffffffff ffffffff ff000000     ................
  404368:	0000ffff ffffff00 ff000000 ffffffff     ................
  404378:	ffffffff ffffffff 0000ffff 00000000     ................
  404388:	00ffffff ffff0000 ffffffff ffffffff     ................
  404398:	ffffffff 000000ff ff000000 ffffffff     ................
  4043a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4043b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4043c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4043d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4043e8:	ffffffff ffffffff ffffffff 00ffffff     ................

004043f8 <sourcecodepro_28_0x4e>:
  4043f8:	00404298 00000009 0000000d 00000008     .B@.............

00404408 <image_data_sourcecodepro_28_0x4f>:
  404408:	ffffffff ffffffff 000000ff 00000000     ................
  404418:	ffff0000 ffffffff ffffffff ffffffff     ................
  404428:	000000ff ff000000 ffffffff ffffffff     ................
  404438:	00000000 ffff0000 ffffffff 00ffffff     ................
  404448:	ffff0000 ffffffff ffffffff ffffffff     ................
  404458:	000000ff ffffffff 0000ffff ffffff00     ................
  404468:	ffffffff ffffffff ffffffff ffffffff     ................
  404478:	0000ffff ffffff00 ff000000 ffffffff     ................
  404488:	ffffffff ffffffff ffffffff ffffffff     ................
  404498:	ff000000 0000ffff ffffff00 ffffffff     ................
  4044a8:	ffffffff ffffffff ffffffff 0000ffff     ................
  4044b8:	ffffff00 ff000000 ffffffff ffffffff     ................
  4044c8:	ffffffff ffffffff ffffffff ff000000     ................
  4044d8:	ffffffff 000000ff ffffffff ffffffff     ................
  4044e8:	ffffffff 00ffffff ffff0000 ffffffff     ................
  4044f8:	00ffffff 00000000 ffffff00 ffffffff     ................
  404508:	0000ffff 00000000 ffffffff ffffffff     ................
  404518:	ffffffff 00ffffff 00000000 00000000     ................
  404528:	ffffffff ffffffff ffffffff ffffffff     ................
  404538:	ffffffff ffffffff ffffffff ffffffff     ................
  404548:	ffffffff ffffffff ffffffff ffffffff     ................
  404558:	ffffffff ffffffff ffffffff ffffffff     ................
  404568:	ffffffff ffffffff ffffffff ffffffff     ................
  404578:	ffffffff ffffffff ffffffff ffffffff     ................
  404588:	ffffffff 0000ffff                       ........

00404590 <sourcecodepro_28_0x4f>:
  404590:	00404408 0000000a 0000000d 00000008     .D@.............

004045a0 <image_data_sourcecodepro_28_0x50>:
	...
  4045ac:	ff000000 ffffffff ffffffff ff000000     ................
  4045bc:	ffffffff ffffffff 00ffffff ffff0000     ................
  4045cc:	ffffffff ff000000 ffffffff ffffffff     ................
  4045dc:	ffffffff 0000ffff ffffff00 ff000000     ................
  4045ec:	ffffffff ffffffff ffffffff 0000ffff     ................
  4045fc:	ffffff00 ff000000 ffffffff ffffffff     ................
  40460c:	00ffffff ffff0000 ffffffff 00000000     ................
	...
  404624:	ff000000 ffffffff ffffffff ff000000     ................
  404634:	ffffffff ffffffff ffffffff ffffffff     ................
  404644:	ffffffff ff000000 ffffffff ffffffff     ................
  404654:	ffffffff ffffffff ffffffff ff000000     ................
  404664:	ffffffff ffffffff ffffffff ffffffff     ................
  404674:	ffffffff ff000000 ffffffff ffffffff     ................
  404684:	ffffffff ffffffff ffffffff ffffffff     ................
  404694:	ffffffff ffffffff ffffffff ffffffff     ................
  4046a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4046b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4046c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4046d4:	ffffffff                                ....

004046d8 <sourcecodepro_28_0x50>:
  4046d8:	004045a0 00000008 0000000d 00000008     .E@.............

004046e8 <image_data_sourcecodepro_28_0x51>:
  4046e8:	ffffffff ffffffff 000000ff 00000000     ................
  4046f8:	ffff0000 ffffffff ffffffff ffffffff     ................
  404708:	000000ff ff000000 ffffffff ffffffff     ................
  404718:	00000000 ffff0000 ffffffff 00ffffff     ................
  404728:	ffff0000 ffffffff ffffffff ffffffff     ................
  404738:	000000ff ffffffff 0000ffff ffffff00     ................
  404748:	ffffffff ffffffff ffffffff ffffffff     ................
  404758:	0000ffff ffffff00 ff000000 ffffffff     ................
  404768:	ffffffff ffffffff ffffffff ffffffff     ................
  404778:	ff000000 0000ffff ffffff00 ffffffff     ................
  404788:	ffffffff ffffffff ffffffff 0000ffff     ................
  404798:	ffffff00 ff000000 ffffffff ffffffff     ................
  4047a8:	ffffffff ffffffff ffffffff ff000000     ................
  4047b8:	ffffffff 000000ff ffffffff ffffffff     ................
  4047c8:	ffffffff 00ffffff ffff0000 ffffffff     ................
  4047d8:	00ffffff 00000000 ffffff00 ffffffff     ................
  4047e8:	0000ffff 00000000 ffffffff ffffffff     ................
  4047f8:	ffffffff 00ffffff 00000000 00000000     ................
  404808:	ffffffff ffffffff ffffffff ffffffff     ................
  404818:	ffffffff ffffffff 00ffffff ffff0000     ................
  404828:	ffffffff ffffffff ffffffff ffffffff     ................
  404838:	ffffffff ffffffff 000000ff ffffffff     ................
  404848:	ffffffff ffffffff ffffffff ffffffff     ................
  404858:	ffffffff ffffffff 0000ffff 00000000     ................
  404868:	ff000000 0000ffff                       ........

00404870 <sourcecodepro_28_0x51>:
  404870:	004046e8 0000000a 0000000d 00000008     .F@.............

00404880 <image_data_sourcecodepro_28_0x52>:
	...
  40488c:	ff000000 ffffffff ffffffff 00ffffff     ................
  40489c:	ffff0000 ffffffff ffffffff 0000ffff     ................
  4048ac:	ffffff00 ffffffff 0000ffff ffffff00     ................
  4048bc:	ffffffff ffffffff 000000ff ffffffff     ................
  4048cc:	ffffffff 000000ff ffffffff ffffffff     ................
  4048dc:	ffffffff ff000000 ffffffff ffffffff     ................
  4048ec:	ff000000 ffffffff ffffffff 00ffffff     ................
  4048fc:	ffff0000 ffffffff 00ffffff 00000000     ................
	...
  404914:	ffff0000 ffffffff ffffffff 0000ffff     ................
  404924:	ffffff00 ffffffff 0000ffff ffffff00     ................
  404934:	ffffffff ffffffff 000000ff ffffffff     ................
  404944:	ffffffff ffffffff ff000000 ffffffff     ................
  404954:	ffffffff ff000000 ffffffff ffffffff     ................
  404964:	ffffffff 0000ffff ffffff00 00ffffff     ................
  404974:	ffff0000 ffffffff ffffffff ffffffff     ................
  404984:	ffffffff ff000000 ffffffff ffffffff     ................
  404994:	ffffffff ffffffff ffffffff ffffffff     ................
  4049a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4049b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4049c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4049d4:	ffffffff ffffffff 00ffffff              ............

004049e0 <sourcecodepro_28_0x52>:
  4049e0:	00404880 00000009 0000000d 00000008     .H@.............

004049f0 <image_data_sourcecodepro_28_0x53>:
  4049f0:	00ffffff 00000000 00000000 00000000     ................
  404a00:	ffff0000 ffffffff ff000000 ffffffff     ................
  404a10:	ffffffff ffffffff 0000ffff ffffff00     ................
  404a20:	ff000000 ffffffff ffffffff ffffffff     ................
  404a30:	ffffffff ffffffff ff000000 ffffffff     ................
  404a40:	ffffffff ffffffff ffffffff ffffffff     ................
  404a50:	00ffffff 00000000 00000000 ffffffff     ................
  404a60:	ffffffff ffffffff ffffffff ffffffff     ................
  404a70:	ffffffff 00000000 ffff0000 ffffffff     ................
  404a80:	ffffffff ffffffff ffffffff ffffffff     ................
  404a90:	0000ffff ffffff00 ffffffff ffffffff     ................
  404aa0:	ffffffff ffffffff 0000ffff ffffff00     ................
  404ab0:	ff000000 ffffffff ffffffff ffffffff     ................
  404ac0:	0000ffff ffffff00 00ffffff 00000000     ................
	...
  404ad8:	ffff0000 ffffffff ffffffff ffffffff     ................
  404ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  404af8:	ffffffff ffffffff ffffffff ffffffff     ................
  404b08:	ffffffff ffffffff ffffffff ffffffff     ................
  404b18:	ffffffff ffffffff ffffffff ffffffff     ................

00404b28 <sourcecodepro_28_0x53>:
  404b28:	004049f0 00000008 0000000d 00000008     .I@.............

00404b38 <image_data_sourcecodepro_28_0x54>:
	...
  404b50:	ffffffff ffffffff 000000ff ffffffff     ................
  404b60:	ffffffff ffffffff ffffffff ffffffff     ................
  404b70:	000000ff ffffffff ffffffff ffffffff     ................
  404b80:	ffffffff ffffffff 000000ff ffffffff     ................
  404b90:	ffffffff ffffffff ffffffff ffffffff     ................
  404ba0:	000000ff ffffffff ffffffff ffffffff     ................
  404bb0:	ffffffff ffffffff 000000ff ffffffff     ................
  404bc0:	ffffffff ffffffff ffffffff ffffffff     ................
  404bd0:	000000ff ffffffff ffffffff ffffffff     ................
  404be0:	ffffffff ffffffff 000000ff ffffffff     ................
  404bf0:	ffffffff ffffffff ffffffff ffffffff     ................
  404c00:	000000ff ffffffff ffffffff ffffffff     ................
  404c10:	ffffffff ffffffff 000000ff ffffffff     ................
  404c20:	ffffffff ffffffff ffffffff ffffffff     ................
  404c30:	ffffffff ffffffff ffffffff ffffffff     ................
  404c40:	ffffffff ffffffff ffffffff ffffffff     ................
  404c50:	ffffffff ffffffff ffffffff ffffffff     ................
  404c60:	ffffffff ffffffff ffffffff ffffffff     ................

00404c70 <sourcecodepro_28_0x54>:
  404c70:	00404b38 00000008 0000000d 00000008     8K@.............

00404c80 <image_data_sourcecodepro_28_0x55>:
  404c80:	ff000000 ffffffff ffffffff ffffffff     ................
  404c90:	ffffffff 000000ff 00ffffff ffff0000     ................
  404ca0:	ffffffff ffffffff ffffffff ffffffff     ................
  404cb0:	ff000000 0000ffff ffffff00 ffffffff     ................
  404cc0:	ffffffff ffffffff 00ffffff ffff0000     ................
  404cd0:	000000ff ffffffff ffffffff ffffffff     ................
  404ce0:	ffffffff 0000ffff ffffff00 ff000000     ................
  404cf0:	ffffffff ffffffff ffffffff ffffffff     ................
  404d00:	000000ff 00ffffff ffff0000 ffffffff     ................
  404d10:	ffffffff ffffffff ffffffff ff000000     ................
  404d20:	0000ffff ffffff00 ffffffff ffffffff     ................
  404d30:	ffffffff 00ffffff ffff0000 000000ff     ................
  404d40:	ffffffff ffffffff ffffffff ffffffff     ................
  404d50:	0000ffff ffffff00 00ffffff ffff0000     ................
  404d60:	ffffffff ffffffff 0000ffff ffffff00     ................
  404d70:	ffffffff ffffffff 000000ff 00000000     ................
  404d80:	00000000 ffffff00 ffffffff ffffffff     ................
  404d90:	ffffffff ffffffff ffffffff ffffffff     ................
  404da0:	ffffffff ffffffff ffffffff ffffffff     ................
  404db0:	ffffffff ffffffff ffffffff ffffffff     ................
  404dc0:	ffffffff ffffffff ffffffff ffffffff     ................
  404dd0:	ffffffff ffffffff ffffffff 00ffffff     ................

00404de0 <sourcecodepro_28_0x55>:
  404de0:	00404c80 00000009 0000000d 00000008     .L@.............

00404df0 <image_data_sourcecodepro_28_0x56>:
  404df0:	ff000000 ffffffff ffffffff ffffffff     ................
  404e00:	0000ffff ffffff00 ff000000 ffffffff     ................
  404e10:	ffffffff ffffffff 0000ffff ffffff00     ................
  404e20:	00ffffff ffff0000 ffffffff 00ffffff     ................
  404e30:	ffff0000 ffffffff 00ffffff ffff0000     ................
  404e40:	ffffffff 00ffffff ffff0000 ffffffff     ................
  404e50:	00ffffff ffff0000 ffffffff 00ffffff     ................
  404e60:	ffff0000 ffffffff ffffffff 0000ffff     ................
  404e70:	ffffff00 ff000000 ffffffff ffffffff     ................
  404e80:	ffffffff 0000ffff ffffff00 ff000000     ................
  404e90:	ffffffff ffffffff ffffffff 0000ffff     ................
  404ea0:	ffffff00 ff000000 ffffffff ffffffff     ................
  404eb0:	ffffffff ffffffff 000000ff ffffffff     ................
  404ec0:	ffffffff ffffffff ffffffff ffffffff     ................
  404ed0:	000000ff ffffffff ffffffff ffffffff     ................
  404ee0:	ffffffff ffffffff ffffffff ffffffff     ................
  404ef0:	ffffffff ffffffff ffffffff ffffffff     ................
  404f00:	ffffffff ffffffff ffffffff ffffffff     ................
  404f10:	ffffffff ffffffff ffffffff ffffffff     ................
  404f20:	ffffffff ffffffff                       ........

00404f28 <sourcecodepro_28_0x56>:
  404f28:	00404df0 00000008 0000000d 00000008     .M@.............

00404f38 <image_data_sourcecodepro_28_0x57>:
  404f38:	ff000000 ffffffff ffffffff ffffffff     ................
  404f48:	0000ffff ffffff00 ffffffff ffffffff     ................
  404f58:	ffffffff ff000000 0000ffff ffffff00     ................
  404f68:	ffffffff ffffffff 000000ff 00ffffff     ................
  404f78:	ffff0000 ffffffff ffffffff 0000ffff     ................
  404f88:	ffffff00 00ffffff ffff0000 ffffffff     ................
  404f98:	00ffffff ffff0000 000000ff ffffffff     ................
  404fa8:	ffffffff 000000ff ffffffff ffffffff     ................
  404fb8:	000000ff ffffffff ffffffff 000000ff     ................
  404fc8:	00ffffff ffff0000 ffffffff 00ffffff     ................
  404fd8:	ffff0000 ffffffff 00ffffff ffff0000     ................
  404fe8:	ffffffff 00ffffff ffff0000 000000ff     ................
  404ff8:	ffffffff ffffffff 000000ff ffffffff     ................
  405008:	ffffffff 000000ff ffffffff 0000ffff     ................
  405018:	ffffff00 ffffffff 0000ffff ffffff00     ................
  405028:	00ffffff ffff0000 ffffffff ffffffff     ................
  405038:	0000ffff ffffff00 ff000000 ffffffff     ................
  405048:	ffffffff ff000000 0000ffff ffffff00     ................
  405058:	ffffffff ffffffff ffffffff ff000000     ................
  405068:	0000ffff ffffff00 ffffffff 0000ffff     ................
  405078:	ffffff00 ff000000 ffffffff ffffffff     ................
  405088:	ffffffff 0000ffff 00000000 ffffffff     ................
  405098:	ffffffff ffffffff 00ffffff 00000000     ................
  4050a8:	ffffff00 ffffffff ffffffff ffffffff     ................
  4050b8:	00ffffff ffff0000 ffffffff ffffffff     ................
  4050c8:	ffffffff 000000ff ffffffff ffffffff     ................
  4050d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4050e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4050f8:	ffffffff ffffffff ffffffff ffffffff     ................
  405108:	ffffffff ffffffff ffffffff ffffffff     ................
  405118:	ffffffff ffffffff ffffffff ffffffff     ................
  405128:	ffffffff ffffffff ffffffff ffffffff     ................
  405138:	ffffffff ffffffff ffffffff ffffffff     ................
  405148:	ffffffff ffffffff ffffffff ffffffff     ................
  405158:	0000ffff                                ....

0040515c <sourcecodepro_28_0x57>:
  40515c:	00404f38 0000000e 0000000d 00000008     8O@.............

0040516c <image_data_sourcecodepro_28_0x58>:
  40516c:	ff000000 ffffffff ffffffff ffffffff     ................
  40517c:	0000ffff ffffff00 00ffffff ffff0000     ................
  40518c:	ffffffff 00ffffff ffff0000 ffffffff     ................
  40519c:	00ffffff ffff0000 ffffffff 00ffffff     ................
  4051ac:	ffff0000 ffffffff ffffffff 0000ffff     ................
  4051bc:	ffffff00 ff000000 ffffffff ffffffff     ................
  4051cc:	ffffffff ffffffff 000000ff ffffffff     ................
  4051dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4051ec:	000000ff ffffffff ffffffff ffffffff     ................
  4051fc:	ffffffff 0000ffff ffffff00 ff000000     ................
  40520c:	ffffffff ffffffff 00ffffff ffff0000     ................
  40521c:	ffffffff 00ffffff ffff0000 ffffffff     ................
  40522c:	00ffffff ffff0000 ffffffff 00ffffff     ................
  40523c:	ffff0000 ffffffff ff000000 ffffffff     ................
  40524c:	ffffffff ffffffff 0000ffff ffffff00     ................
  40525c:	ffffffff ffffffff ffffffff ffffffff     ................
  40526c:	ffffffff ffffffff ffffffff ffffffff     ................
  40527c:	ffffffff ffffffff ffffffff ffffffff     ................
  40528c:	ffffffff ffffffff ffffffff ffffffff     ................
  40529c:	ffffffff ffffffff                       ........

004052a4 <sourcecodepro_28_0x58>:
  4052a4:	0040516c 00000008 0000000d 00000008     lQ@.............

004052b4 <image_data_sourcecodepro_28_0x59>:
  4052b4:	ff000000 ffffffff ffffffff ffffffff     ................
  4052c4:	0000ffff ffffff00 00ffffff ffff0000     ................
  4052d4:	ffffffff 00ffffff ffff0000 ffffffff     ................
  4052e4:	00ffffff ffff0000 ffffffff 00ffffff     ................
  4052f4:	ffff0000 ffffffff ffffffff 0000ffff     ................
  405304:	ffffff00 ff000000 ffffffff ffffffff     ................
  405314:	ffffffff 0000ffff ffffff00 ff000000     ................
  405324:	ffffffff ffffffff ffffffff ffffffff     ................
  405334:	000000ff ffffffff ffffffff ffffffff     ................
  405344:	ffffffff ffffffff 000000ff ffffffff     ................
  405354:	ffffffff ffffffff ffffffff ffffffff     ................
  405364:	000000ff ffffffff ffffffff ffffffff     ................
  405374:	ffffffff ffffffff 000000ff ffffffff     ................
  405384:	ffffffff ffffffff ffffffff ffffffff     ................
  405394:	000000ff ffffffff ffffffff ffffffff     ................
  4053a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4053b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4053c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4053d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4053e4:	ffffffff ffffffff                       ........

004053ec <sourcecodepro_28_0x59>:
  4053ec:	004052b4 00000008 0000000d 00000008     .R@.............

004053fc <image_data_sourcecodepro_28_0x5a>:
	...
  405410:	ffffff00 ffffffff ffffffff ffffffff     ................
  405420:	ffffffff 0000ffff ffffff00 ffffffff     ................
  405430:	ffffffff ffffffff 00ffffff ffff0000     ................
  405440:	ffffffff ffffffff ffffffff ffffffff     ................
  405450:	ff000000 ffffffff ffffffff ffffffff     ................
  405460:	ffffffff 000000ff ffffffff ffffffff     ................
  405470:	ffffffff ffffffff ffffffff 000000ff     ................
  405480:	ffffffff ffffffff ffffffff ffffffff     ................
  405490:	0000ffff ffffff00 ffffffff ffffffff     ................
  4054a0:	ffffffff 00ffffff ffff0000 ffffffff     ................
  4054b0:	ffffffff ffffffff ffffffff ff000000     ................
  4054c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4054d0:	ffffffff 00000000 00000000 00000000     ................
	...
  4054e8:	ffffff00 ffffffff ffffffff ffffffff     ................
  4054f8:	ffffffff ffffffff ffffffff ffffffff     ................
  405508:	ffffffff ffffffff ffffffff ffffffff     ................
  405518:	ffffffff ffffffff ffffffff ffffffff     ................
  405528:	ffffffff ffffffff ffffffff              ............

00405534 <sourcecodepro_28_0x5a>:
  405534:	004053fc 00000008 0000000d 00000008     .S@.............

00405544 <sourcecodepro_28_array>:
  405544:	00000041 00403340 00000042 00403488     A...@3@.B....4@.
  405554:	00000043 004035f8 00000044 00403790     C....5@.D....7@.
  405564:	00000045 004038d8 00000046 004039fc     E....8@.F....9@.
  405574:	00000047 00403b6c 00000048 00403cdc     G...l;@.H....<@.
  405584:	00000049 00403d88 0000004a 00403e84     I....=@.J....>@.
  405594:	0000004b 00403fcc 0000004c 004040f0     K....?@.L....@@.
  4055a4:	0000004d 00404288 0000004e 004043f8     M....B@.N....C@.
  4055b4:	0000004f 00404590 00000050 004046d8     O....E@.P....F@.
  4055c4:	00000051 00404870 00000052 004049e0     Q...pH@.R....I@.
  4055d4:	00000053 00404b28 00000054 00404c70     S...(K@.T...pL@.
  4055e4:	00000055 00404de0 00000056 00404f28     U....M@.V...(O@.
  4055f4:	00000057 0040515c 00000058 004052a4     W...\Q@.X....R@.
  405604:	00000059 004053ec 0000005a 00405534     Y....S@.Z...4U@.

00405614 <sourcecodepro_28>:
  405614:	0000001a 00405544 00005a41 454b4942     ....DU@.AZ..BIKE
  405624:	00000000 4f4c4556 41444943 00004544     ....VELOCIDADE..

00405634 <_global_impure_ptr>:
  405634:	20400010                                ..@ 

00405638 <_init>:
  405638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40563a:	bf00      	nop
  40563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40563e:	bc08      	pop	{r3}
  405640:	469e      	mov	lr, r3
  405642:	4770      	bx	lr

00405644 <__init_array_start>:
  405644:	004030e9 	.word	0x004030e9

00405648 <__frame_dummy_init_array_entry>:
  405648:	0040018d                                ..@.

0040564c <_fini>:
  40564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40564e:	bf00      	nop
  405650:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405652:	bc08      	pop	{r3}
  405654:	469e      	mov	lr, r3
  405656:	4770      	bx	lr

00405658 <__fini_array_start>:
  405658:	00400169 	.word	0x00400169
